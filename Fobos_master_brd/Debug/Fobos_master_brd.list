
Fobos_master_brd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800e150  0800e150  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e2a0  0800e2a0  0001e2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e2a8  0800e2a8  0001e2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e2ac  0800e2ac  0001e2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000058  20000000  0800e2b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000040d4  20000058  0800e308  00020058  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000412c  0800e308  0002412c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dc25  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004b85  00000000  00000000  0004dcab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001b88  00000000  00000000  00052830  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a08  00000000  00000000  000543b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000db67  00000000  00000000  00055dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a813  00000000  00000000  00063927  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006e13a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007598  00000000  00000000  0006e1b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000058 	.word	0x20000058
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e138 	.word	0x0800e138

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000005c 	.word	0x2000005c
 80002dc:	0800e138 	.word	0x0800e138

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f92b 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060a:	200f      	movs	r0, #15
 800060c:	f000 f80a 	bl	8000624 <HAL_InitTick>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_Init+0x1a>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e002      	b.n	8000620 <HAL_Init+0x20>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800061a:	f00d fb27 	bl	800dc6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	bd80      	pop	{r7, pc}

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f93f 	bl	80008c6 <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f909 	bl	8000876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000050 	.word	0x20000050
 800067c:	20000004 	.word	0x20000004
 8000680:	20000000 	.word	0x20000000

08000684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004
 80006a8:	20000074 	.word	0x20000074

080006ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000074 	.word	0x20000074

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <__NVIC_SetPriorityGrouping+0x40>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	4313      	orrs	r3, r2
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <__NVIC_SetPriorityGrouping+0x40>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	05fa0000 	.word	0x05fa0000

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073a:	4909      	ldr	r1, [pc, #36]	; (8000760 <__NVIC_EnableIRQ+0x38>)
 800073c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	f002 021f 	and.w	r2, r2, #31
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	490d      	ldr	r1, [pc, #52]	; (80007b0 <__NVIC_SetPriority+0x4c>)
 800077a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	4909      	ldr	r1, [pc, #36]	; (80007b4 <__NVIC_SetPriority+0x50>)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	2201      	movs	r2, #1
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	401a      	ands	r2, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fe:	2101      	movs	r1, #1
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	1e59      	subs	r1, r3, #1
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff90 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff2b 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff42 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff92 	bl	80007b8 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff61 	bl	8000764 <__NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff35 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa4 	bl	800081c <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff fede 	bl	80006ac <HAL_GetTick>
 80008f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs = NULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <HAL_DMA_Init+0x20>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e168      	b.n	8000bd2 <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b8d      	ldr	r3, [pc, #564]	; (8000b3c <HAL_DMA_Init+0x25c>)
 8000908:	429a      	cmp	r2, r3
 800090a:	d907      	bls.n	800091c <HAL_DMA_Init+0x3c>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b8b      	ldr	r3, [pc, #556]	; (8000b40 <HAL_DMA_Init+0x260>)
 8000914:	429a      	cmp	r2, r3
 8000916:	d801      	bhi.n	800091c <HAL_DMA_Init+0x3c>
 8000918:	2301      	movs	r3, #1
 800091a:	e000      	b.n	800091e <HAL_DMA_Init+0x3e>
 800091c:	2300      	movs	r3, #0
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80a5 	beq.w	8000a6e <HAL_DMA_Init+0x18e>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2202      	movs	r2, #2
 8000930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b80      	ldr	r3, [pc, #512]	; (8000b3c <HAL_DMA_Init+0x25c>)
 800093c:	429a      	cmp	r2, r3
 800093e:	d90e      	bls.n	800095e <HAL_DMA_Init+0x7e>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b7e      	ldr	r3, [pc, #504]	; (8000b40 <HAL_DMA_Init+0x260>)
 8000948:	429a      	cmp	r2, r3
 800094a:	d808      	bhi.n	800095e <HAL_DMA_Init+0x7e>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	f022 0201 	bic.w	r2, r2, #1
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e007      	b.n	800096e <HAL_DMA_Init+0x8e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 800096e:	e00f      	b.n	8000990 <HAL_DMA_Init+0xb0>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000970:	f7ff fe9c 	bl	80006ac <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	2b05      	cmp	r3, #5
 800097c:	d908      	bls.n	8000990 <HAL_DMA_Init+0xb0>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2220      	movs	r2, #32
 8000982:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2203      	movs	r2, #3
 8000988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e120      	b.n	8000bd2 <HAL_DMA_Init+0x2f2>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1e8      	bne.n	8000970 <HAL_DMA_Init+0x90>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4b66      	ldr	r3, [pc, #408]	; (8000b44 <HAL_DMA_Init+0x264>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80009b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4313      	orrs	r3, r2
 80009da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d107      	bne.n	80009f4 <HAL_DMA_Init+0x114>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4313      	orrs	r3, r2
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f023 0307 	bic.w	r3, r3, #7
 8000a0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d117      	bne.n	8000a4e <HAL_DMA_Init+0x16e>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00e      	beq.n	8000a4e <HAL_DMA_Init+0x16e>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fcbb 	bl	80013ac <DMA_CheckFifoParam>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d008      	beq.n	8000a4e <HAL_DMA_Init+0x16e>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e0c1      	b.n	8000bd2 <HAL_DMA_Init+0x2f2>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 fc72 	bl	8001340 <DMA_CalcBaseAndBitshift>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a64:	223f      	movs	r2, #63	; 0x3f
 8000a66:	409a      	lsls	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	e076      	b.n	8000b5c <HAL_DMA_Init+0x27c>
  }
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <HAL_DMA_Init+0x268>)
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d907      	bls.n	8000a8a <HAL_DMA_Init+0x1aa>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_DMA_Init+0x26c>)
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d801      	bhi.n	8000a8a <HAL_DMA_Init+0x1aa>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_DMA_Init+0x1ac>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d04b      	beq.n	8000b28 <HAL_DMA_Init+0x248>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_D3_REQUEST(hdma->Init.Request));

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_DMA_Init+0x270>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC   | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM));

    /* Prepare the DMA Channel configuration */
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	2b40      	cmp	r3, #64	; 0x40
 8000ab6:	d008      	beq.n	8000aca <HAL_DMA_Init+0x1ea>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2b80      	cmp	r3, #128	; 0x80
 8000abe:	d102      	bne.n	8000ac6 <HAL_DMA_Init+0x1e6>
 8000ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ac4:	e002      	b.n	8000acc <HAL_DMA_Init+0x1ec>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_DMA_Init+0x1ec>
 8000aca:	2310      	movs	r3, #16
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	68d2      	ldr	r2, [r2, #12]
 8000ad0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000ad2:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	08db      	lsrs	r3, r3, #3
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000ada:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	08db      	lsrs	r3, r3, #3
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000ae2:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	08db      	lsrs	r3, r3, #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000aea:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	f003 0320 	and.w	r3, r3, #32
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000af6:	431a      	orrs	r2, r3
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	091b      	lsrs	r3, r3, #4
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 8000afe:	4313      	orrs	r3, r2
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_DMA_Init+0x274>)
 8000b16:	4413      	add	r3, r2
 8000b18:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_DMA_Init+0x278>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	009a      	lsls	r2, r3, #2
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8000b26:	e019      	b.n	8000b5c <HAL_DMA_Init+0x27c>

  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2203      	movs	r2, #3
 8000b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e04b      	b.n	8000bd2 <HAL_DMA_Init+0x2f2>
 8000b3a:	bf00      	nop
 8000b3c:	4002000f 	.word	0x4002000f
 8000b40:	400204b8 	.word	0x400204b8
 8000b44:	fe10803f 	.word	0xfe10803f
 8000b48:	58025407 	.word	0x58025407
 8000b4c:	58025494 	.word	0x58025494
 8000b50:	ffff800f 	.word	0xffff800f
 8000b54:	a7fdabf8 	.word	0xa7fdabf8
 8000b58:	cccccccd 	.word	0xcccccccd
  }

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fca1 	bl	80014a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b80      	cmp	r3, #128	; 0x80
 8000b68:	d102      	bne.n	8000b70 <HAL_DMA_Init+0x290>
  {
     /* if memory to memory force the request to 0*/
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  }


  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6852      	ldr	r2, [r2, #4]
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000b84:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
     if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */

  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d010      	beq.n	8000bb0 <HAL_DMA_Init+0x2d0>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d80c      	bhi.n	8000bb0 <HAL_DMA_Init+0x2d0>
  {
     /* Initialize parameters for DMAMUX request generator :
        DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
     */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 fcec 	bl	8001574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
     hdma->DMAmuxRequestGen->RGCR = 0U;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	e008      	b.n	8000bc2 <HAL_DMA_Init+0x2e2>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop

08000bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e098      	b.n	8000d20 <HAL_DMA_Abort_IT+0x144>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d004      	beq.n	8000c04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e08d      	b.n	8000d20 <HAL_DMA_Abort_IT+0x144>
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <HAL_DMA_Abort_IT+0x14c>)
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d907      	bls.n	8000c20 <HAL_DMA_Abort_IT+0x44>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <HAL_DMA_Abort_IT+0x150>)
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d801      	bhi.n	8000c20 <HAL_DMA_Abort_IT+0x44>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <HAL_DMA_Abort_IT+0x46>
 8000c20:	2300      	movs	r3, #0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d021      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x8e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2204      	movs	r2, #4
 8000c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <HAL_DMA_Abort_IT+0x14c>)
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d90e      	bls.n	8000c58 <HAL_DMA_Abort_IT+0x7c>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <HAL_DMA_Abort_IT+0x150>)
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d808      	bhi.n	8000c58 <HAL_DMA_Abort_IT+0x7c>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e062      	b.n	8000d1e <HAL_DMA_Abort_IT+0x142>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	e059      	b.n	8000d1e <HAL_DMA_Abort_IT+0x142>
    }
    else /* D3 Domain BDMA */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	f022 020e 	bic.w	r2, r2, #14
 8000c78:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <HAL_DMA_Abort_IT+0x14c>)
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d90e      	bls.n	8000ca4 <HAL_DMA_Abort_IT+0xc8>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <HAL_DMA_Abort_IT+0x150>)
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d808      	bhi.n	8000ca4 <HAL_DMA_Abort_IT+0xc8>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	f022 0201 	bic.w	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_DMA_Abort_IT+0xd8>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_DMA_Abort_IT+0x154>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cca:	2101      	movs	r1, #1
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	6053      	str	r3, [r2, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000cda:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00c      	beq.n	8000cfe <HAL_DMA_Abort_IT+0x122>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cf2:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_DMA_Abort_IT+0x142>
      {
        hdma->XferAbortCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	4002000f 	.word	0x4002000f
 8000d2c:	400204b8 	.word	0x400204b8
 8000d30:	58025400 	.word	0x58025400

08000d34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *ccr_reg = NULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d48:	4b88      	ldr	r3, [pc, #544]	; (8000f6c <HAL_DMA_IRQHandler+0x238>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a88      	ldr	r2, [pc, #544]	; (8000f70 <HAL_DMA_IRQHandler+0x23c>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	0a9b      	lsrs	r3, r3, #10
 8000d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61fb      	str	r3, [r7, #28]

  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b82      	ldr	r3, [pc, #520]	; (8000f74 <HAL_DMA_IRQHandler+0x240>)
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d907      	bls.n	8000d7e <HAL_DMA_IRQHandler+0x4a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b80      	ldr	r3, [pc, #512]	; (8000f78 <HAL_DMA_IRQHandler+0x244>)
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d801      	bhi.n	8000d7e <HAL_DMA_IRQHandler+0x4a>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <HAL_DMA_IRQHandler+0x4c>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 821f 	beq.w	80011c4 <HAL_DMA_IRQHandler+0x490>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d036      	beq.n	8000e04 <HAL_DMA_IRQHandler+0xd0>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <HAL_DMA_IRQHandler+0x240>)
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d910      	bls.n	8000dc4 <HAL_DMA_IRQHandler+0x90>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <HAL_DMA_IRQHandler+0x244>)
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d80a      	bhi.n	8000dc4 <HAL_DMA_IRQHandler+0x90>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	e009      	b.n	8000dd8 <HAL_DMA_IRQHandler+0xa4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <HAL_DMA_IRQHandler+0xd0>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	f022 0204 	bic.w	r2, r2, #4
 8000dea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df0:	2208      	movs	r2, #8
 8000df2:	409a      	lsls	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e08:	4a5c      	ldr	r2, [pc, #368]	; (8000f7c <HAL_DMA_IRQHandler+0x248>)
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d028      	beq.n	8000e66 <HAL_DMA_IRQHandler+0x132>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b56      	ldr	r3, [pc, #344]	; (8000f74 <HAL_DMA_IRQHandler+0x240>)
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d910      	bls.n	8000e42 <HAL_DMA_IRQHandler+0x10e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <HAL_DMA_IRQHandler+0x244>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_DMA_IRQHandler+0x10e>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	e003      	b.n	8000e4a <HAL_DMA_IRQHandler+0x116>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_DMA_IRQHandler+0x132>
      {
        /* Clear the FIFO error flag */
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e52:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <HAL_DMA_IRQHandler+0x248>)
 8000e54:	409a      	lsls	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5e:	f043 0202 	orr.w	r2, r3, #2
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6a:	4a45      	ldr	r2, [pc, #276]	; (8000f80 <HAL_DMA_IRQHandler+0x24c>)
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d028      	beq.n	8000ec8 <HAL_DMA_IRQHandler+0x194>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <HAL_DMA_IRQHandler+0x240>)
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d910      	bls.n	8000ea4 <HAL_DMA_IRQHandler+0x170>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <HAL_DMA_IRQHandler+0x244>)
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d80a      	bhi.n	8000ea4 <HAL_DMA_IRQHandler+0x170>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	e003      	b.n	8000eac <HAL_DMA_IRQHandler+0x178>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <HAL_DMA_IRQHandler+0x194>
      {
        /* Clear the direct mode error flag */
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <HAL_DMA_IRQHandler+0x24c>)
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec0:	f043 0204 	orr.w	r2, r3, #4
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ecc:	2210      	movs	r2, #16
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d06c      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_DMA_IRQHandler+0x240>)
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d910      	bls.n	8000f06 <HAL_DMA_IRQHandler+0x1d2>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_DMA_IRQHandler+0x244>)
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d80a      	bhi.n	8000f06 <HAL_DMA_IRQHandler+0x1d2>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	e009      	b.n	8000f1a <HAL_DMA_IRQHandler+0x1e6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d049      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
      {
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f22:	2210      	movs	r2, #16
 8000f24:	409a      	lsls	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d025      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x250>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d108      	bne.n	8000f58 <HAL_DMA_IRQHandler+0x224>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d031      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
 8000f56:	e02c      	b.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d028      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
 8000f68:	e023      	b.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
 8000f6a:	bf00      	nop
 8000f6c:	20000050 	.word	0x20000050
 8000f70:	1b4e81b5 	.word	0x1b4e81b5
 8000f74:	4002000f 	.word	0x4002000f
 8000f78:	400204b8 	.word	0x400204b8
 8000f7c:	00800001 	.word	0x00800001
 8000f80:	00800004 	.word	0x00800004
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d107      	bne.n	8000fa2 <HAL_DMA_IRQHandler+0x26e>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x27e>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80a7 	beq.w	8001112 <HAL_DMA_IRQHandler+0x3de>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b85      	ldr	r3, [pc, #532]	; (80011e0 <HAL_DMA_IRQHandler+0x4ac>)
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d910      	bls.n	8000ff2 <HAL_DMA_IRQHandler+0x2be>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b83      	ldr	r3, [pc, #524]	; (80011e4 <HAL_DMA_IRQHandler+0x4b0>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_DMA_IRQHandler+0x2be>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf14      	ite	ne
 8000fea:	2301      	movne	r3, #1
 8000fec:	2300      	moveq	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	e009      	b.n	8001006 <HAL_DMA_IRQHandler+0x2d2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8083 	beq.w	8001112 <HAL_DMA_IRQHandler+0x3de>
      {
        /* Clear the transfer complete flag */
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001010:	2220      	movs	r2, #32
 8001012:	409a      	lsls	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b04      	cmp	r3, #4
 8001022:	d137      	bne.n	8001094 <HAL_DMA_IRQHandler+0x360>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	f022 0216 	bic.w	r2, r2, #22
 8001032:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	6952      	ldr	r2, [r2, #20]
 800103e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001042:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <HAL_DMA_IRQHandler+0x320>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <HAL_DMA_IRQHandler+0x330>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f022 0208 	bic.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001068:	223f      	movs	r2, #63	; 0x3f
 800106a:	409a      	lsls	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8154 	beq.w	8001332 <HAL_DMA_IRQHandler+0x5fe>
          {
            hdma->XferAbortCallback(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
          }
          return;
 8001092:	e14e      	b.n	8001332 <HAL_DMA_IRQHandler+0x5fe>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d018      	beq.n	80010d4 <HAL_DMA_IRQHandler+0x3a0>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d108      	bne.n	80010c2 <HAL_DMA_IRQHandler+0x38e>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d02c      	beq.n	8001112 <HAL_DMA_IRQHandler+0x3de>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
 80010c0:	e027      	b.n	8001112 <HAL_DMA_IRQHandler+0x3de>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d023      	beq.n	8001112 <HAL_DMA_IRQHandler+0x3de>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	4798      	blx	r3
 80010d2:	e01e      	b.n	8001112 <HAL_DMA_IRQHandler+0x3de>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <HAL_DMA_IRQHandler+0x3ce>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	f022 0210 	bic.w	r2, r2, #16
 80010f0:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_DMA_IRQHandler+0x3de>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 810c 	beq.w	8001334 <HAL_DMA_IRQHandler+0x600>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d043      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x47c>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2204      	movs	r2, #4
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_DMA_IRQHandler+0x4ac>)
 8001138:	429a      	cmp	r2, r3
 800113a:	d90e      	bls.n	800115a <HAL_DMA_IRQHandler+0x426>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_DMA_IRQHandler+0x4b0>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d808      	bhi.n	800115a <HAL_DMA_IRQHandler+0x426>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_DMA_IRQHandler+0x436>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4293      	cmp	r3, r2
 8001174:	d807      	bhi.n	8001186 <HAL_DMA_IRQHandler+0x452>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f2      	bne.n	800116a <HAL_DMA_IRQHandler+0x436>
 8001184:	e000      	b.n	8001188 <HAL_DMA_IRQHandler+0x454>
            break;
 8001186:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x474>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80011a6:	e003      	b.n	80011b0 <HAL_DMA_IRQHandler+0x47c>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80bd 	beq.w	8001334 <HAL_DMA_IRQHandler+0x600>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
 80011c2:	e0b7      	b.n	8001334 <HAL_DMA_IRQHandler+0x600>
      }
    }
  }
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_DMA_IRQHandler+0x4b4>)
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d90f      	bls.n	80011f0 <HAL_DMA_IRQHandler+0x4bc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_DMA_IRQHandler+0x4b8>)
 80011d8:	429a      	cmp	r2, r3
 80011da:	d809      	bhi.n	80011f0 <HAL_DMA_IRQHandler+0x4bc>
 80011dc:	2301      	movs	r3, #1
 80011de:	e008      	b.n	80011f2 <HAL_DMA_IRQHandler+0x4be>
 80011e0:	4002000f 	.word	0x4002000f
 80011e4:	400204b8 	.word	0x400204b8
 80011e8:	58025407 	.word	0x58025407
 80011ec:	58025494 	.word	0x58025494
 80011f0:	2300      	movs	r3, #0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809e 	beq.w	8001334 <HAL_DMA_IRQHandler+0x600>
  {
    ccr_reg = &(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]

    /* Half Transfer Complete Interrupt management ******************************/
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2104      	movs	r1, #4
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d024      	beq.n	800125c <HAL_DMA_IRQHandler+0x528>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01e      	beq.n	800125c <HAL_DMA_IRQHandler+0x528>
    {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_DMA_IRQHandler+0x502>
        {
          /* Disable the half transfer interrupt */
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 0204 	bic.w	r2, r3, #4
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	601a      	str	r2, [r3, #0]
        }
        /* Clear the half transfer complete flag */
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8001236:	4941      	ldr	r1, [pc, #260]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	2004      	movs	r0, #4
 8001242:	fa00 f303 	lsl.w	r3, r0, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d070      	beq.n	8001334 <HAL_DMA_IRQHandler+0x600>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
       if(hdma->XferHalfCpltCallback != NULL)
 800125a:	e06b      	b.n	8001334 <HAL_DMA_IRQHandler+0x600>
        }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	2102      	movs	r1, #2
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02c      	beq.n	80012ca <HAL_DMA_IRQHandler+0x596>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d026      	beq.n	80012ca <HAL_DMA_IRQHandler+0x596>
    {
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10d      	bne.n	80012a4 <HAL_DMA_IRQHandler+0x570>
      {
        /* Disable TE & TC */
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 020a 	bic.w	r2, r3, #10
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      }
      /* Clear the transfer complete flag */
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 80012a4:	4925      	ldr	r1, [pc, #148]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	2002      	movs	r0, #2
 80012b0:	fa00 f303 	lsl.w	r3, r0, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

      if(hdma->XferCpltCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d039      	beq.n	8001334 <HAL_DMA_IRQHandler+0x600>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
      if(hdma->XferCpltCallback != NULL)
 80012c8:	e034      	b.n	8001334 <HAL_DMA_IRQHandler+0x600>
      }
    }

    /* Transfer Error Interrupt management **************************************/
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	2108      	movs	r1, #8
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d02a      	beq.n	8001334 <HAL_DMA_IRQHandler+0x600>
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d024      	beq.n	8001334 <HAL_DMA_IRQHandler+0x600>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 020e 	bic.w	r2, r3, #14
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 80012f6:	4911      	ldr	r1, [pc, #68]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_DMA_IRQHandler+0x608>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f303 	lsl.w	r3, r0, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_DMA_IRQHandler+0x600>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
 8001330:	e000      	b.n	8001334 <HAL_DMA_IRQHandler+0x600>
          return;
 8001332:	bf00      	nop
      }
    }
  }
}
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	58025400 	.word	0x58025400

08001340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3b10      	subs	r3, #16
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <DMA_CalcBaseAndBitshift+0x60>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <DMA_CalcBaseAndBitshift+0x64>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d908      	bls.n	8001380 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <DMA_CalcBaseAndBitshift+0x68>)
 8001376:	4013      	ands	r3, r2
 8001378:	1d1a      	adds	r2, r3, #4
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	659a      	str	r2, [r3, #88]	; 0x58
 800137e:	e006      	b.n	800138e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <DMA_CalcBaseAndBitshift+0x68>)
 8001388:	4013      	ands	r3, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	aaaaaaab 	.word	0xaaaaaaab
 80013a4:	0800e24c 	.word	0x0800e24c
 80013a8:	fffffc00 	.word	0xfffffc00

080013ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d120      	bne.n	8001402 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d858      	bhi.n	800147a <DMA_CheckFifoParam+0xce>
 80013c8:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <DMA_CheckFifoParam+0x24>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	080013e1 	.word	0x080013e1
 80013d4:	080013f3 	.word	0x080013f3
 80013d8:	080013e1 	.word	0x080013e1
 80013dc:	0800147b 	.word	0x0800147b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d048      	beq.n	800147e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80013f0:	e045      	b.n	800147e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013fa:	d142      	bne.n	8001482 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8001400:	e03f      	b.n	8001482 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140a:	d123      	bne.n	8001454 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	2b03      	cmp	r3, #3
 8001412:	d838      	bhi.n	8001486 <DMA_CheckFifoParam+0xda>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <DMA_CheckFifoParam+0x70>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	08001433 	.word	0x08001433
 8001424:	0800142d 	.word	0x0800142d
 8001428:	08001445 	.word	0x08001445
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
        break;
 8001430:	e030      	b.n	8001494 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d025      	beq.n	800148a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8001442:	e022      	b.n	800148a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800144c:	d11f      	bne.n	800148e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8001452:	e01c      	b.n	800148e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	2b02      	cmp	r3, #2
 800145a:	d902      	bls.n	8001462 <DMA_CheckFifoParam+0xb6>
 800145c:	2b03      	cmp	r3, #3
 800145e:	d003      	beq.n	8001468 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8001460:	e018      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
        break;
 8001466:	e015      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
    break;
 8001478:	e00b      	b.n	8001492 <DMA_CheckFifoParam+0xe6>
        break;
 800147a:	bf00      	nop
 800147c:	e00a      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        break;
 800147e:	bf00      	nop
 8001480:	e008      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        break;
 8001482:	bf00      	nop
 8001484:	e006      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        break;
 8001486:	bf00      	nop
 8001488:	e004      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        break;
 800148a:	bf00      	nop
 800148c:	e002      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
        break;
 800148e:	bf00      	nop
 8001490:	e000      	b.n	8001494 <DMA_CheckFifoParam+0xe8>
    break;
 8001492:	bf00      	nop
    }
  }

  return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60bb      	str	r3, [r7, #8]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d81c      	bhi.n	80014f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d918      	bls.n	80014f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
     (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
  {
    /*BDMA Channels are connected to DMAMUX2 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b08      	subs	r3, #8
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80014ea:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80014ec:	2201      	movs	r2, #1
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	409a      	lsls	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	669a      	str	r2, [r3, #104]	; 0x68
 80014f6:	e022      	b.n	800153e <DMA_CalcDMAMUXChannelBaseAndMask+0x9a>
  }
  else
  {
    /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3b10      	subs	r3, #16
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	60fb      	str	r3, [r7, #12]

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d806      	bhi.n	8001520 <DMA_CalcDMAMUXChannelBaseAndMask+0x7c>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d902      	bls.n	8001520 <DMA_CalcDMAMUXChannelBaseAndMask+0x7c>
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3308      	adds	r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
 8001532:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 8001534:	2201      	movs	r2, #1
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	409a      	lsls	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	58025494 	.word	0x58025494
 8001550:	58025407 	.word	0x58025407
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	16009600 	.word	0x16009600
 800155c:	58025880 	.word	0x58025880
 8001560:	aaaaaaab 	.word	0xaaaaaaab
 8001564:	400204b8 	.word	0x400204b8
 8001568:	4002040f 	.word	0x4002040f
 800156c:	10008200 	.word	0x10008200
 8001570:	40020880 	.word	0x40020880

08001574 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	60bb      	str	r3, [r7, #8]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d025      	beq.n	80015dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d822      	bhi.n	80015dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d80e      	bhi.n	80015bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d90a      	bls.n	80015bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x7c>)
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x80>)
 80015b8:	671a      	str	r2, [r3, #112]	; 0x70
 80015ba:	e009      	b.n	80015d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>
    }
    else
    {
      /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 80015ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	2201      	movs	r2, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	58025494 	.word	0x58025494
 80015ec:	58025407 	.word	0x58025407
 80015f0:	1600963f 	.word	0x1600963f
 80015f4:	58025940 	.word	0x58025940
 80015f8:	1000823f 	.word	0x1000823f
 80015fc:	40020940 	.word	0x40020940

08001600 <HAL_FDCAN_Init>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef* hfdcan)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]

  /* Check FDCAN handle */
  if(hfdcan == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_FDCAN_Init+0x16>
  {
     return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e19e      	b.n	8001954 <HAL_FDCAN_Init+0x354>
  }

  /* Check FDCAN instance */
  if(hfdcan->Instance == FDCAN1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_FDCAN_Init+0x1f0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d106      	bne.n	800162e <HAL_FDCAN_Init+0x2e>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	605a      	str	r2, [r3, #4]
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

  if(hfdcan->State == HAL_FDCAN_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_FDCAN_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

    /* Init the low level hardware */
    HAL_FDCAN_MspInit(hfdcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f00c fb30 	bl	800dca8 <HAL_FDCAN_MspInit>
  }

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	6992      	ldr	r2, [r2, #24]
 8001652:	f022 0210 	bic.w	r2, r2, #16
 8001656:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff f828 	bl	80006ac <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800165e:	e014      	b.n	800168a <HAL_FDCAN_Init+0x8a>
  {
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001660:	f7ff f824 	bl	80006ac <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b0a      	cmp	r3, #10
 800166c:	d90d      	bls.n	800168a <HAL_FDCAN_Init+0x8a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e164      	b.n	8001954 <HAL_FDCAN_Init+0x354>
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b08      	cmp	r3, #8
 8001696:	d0e3      	beq.n	8001660 <HAL_FDCAN_Init+0x60>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	6992      	ldr	r2, [r2, #24]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a8:	f7ff f800 	bl	80006ac <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 80016ae:	e014      	b.n	80016da <HAL_FDCAN_Init+0xda>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016b0:	f7fe fffc 	bl	80006ac <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b0a      	cmp	r3, #10
 80016bc:	d90d      	bls.n	80016da <HAL_FDCAN_Init+0xda>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e13c      	b.n	8001954 <HAL_FDCAN_Init+0x354>
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0e3      	beq.n	80016b0 <HAL_FDCAN_Init+0xb0>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	6992      	ldr	r2, [r2, #24]
 80016f2:	f042 0202 	orr.w	r2, r2, #2
 80016f6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if(hfdcan->Init.AutoRetransmission == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7c1b      	ldrb	r3, [r3, #16]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_FDCAN_Init+0x112>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	6992      	ldr	r2, [r2, #24]
 800170a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	e007      	b.n	8001722 <HAL_FDCAN_Init+0x122>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	6992      	ldr	r2, [r2, #24]
 800171c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001720:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if(hfdcan->Init.TransmitPause == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7c5b      	ldrb	r3, [r3, #17]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_FDCAN_Init+0x13c>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	6992      	ldr	r2, [r2, #24]
 8001734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001738:	619a      	str	r2, [r3, #24]
 800173a:	e007      	b.n	800174c <HAL_FDCAN_Init+0x14c>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	6992      	ldr	r2, [r2, #24]
 8001746:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800174a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if(hfdcan->Init.ProtocolException == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7c9b      	ldrb	r3, [r3, #18]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_FDCAN_Init+0x166>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	6992      	ldr	r2, [r2, #24]
 800175e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	e007      	b.n	8001776 <HAL_FDCAN_Init+0x176>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	6992      	ldr	r2, [r2, #24]
 8001770:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001774:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	6992      	ldr	r2, [r2, #24]
 8001780:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6892      	ldr	r2, [r2, #8]
 8001788:	430a      	orrs	r2, r1
 800178a:	619a      	str	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if(hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d108      	bne.n	80017a6 <HAL_FDCAN_Init+0x1a6>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	6992      	ldr	r2, [r2, #24]
 800179e:	f042 0204 	orr.w	r2, r2, #4
 80017a2:	619a      	str	r2, [r3, #24]
 80017a4:	e02e      	b.n	8001804 <HAL_FDCAN_Init+0x204>
  }
  else if(hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d02a      	beq.n	8001804 <HAL_FDCAN_Init+0x204>
  {
    if(hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d01e      	beq.n	80017f4 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	6992      	ldr	r2, [r2, #24]
 80017c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017c4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	6912      	ldr	r2, [r2, #16]
 80017d0:	f042 0210 	orr.w	r2, r2, #16
 80017d4:	611a      	str	r2, [r3, #16]

      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d112      	bne.n	8001804 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	6992      	ldr	r2, [r2, #24]
 80017e8:	f042 0220 	orr.w	r2, r2, #32
 80017ec:	619a      	str	r2, [r3, #24]
 80017ee:	e009      	b.n	8001804 <HAL_FDCAN_Init+0x204>
 80017f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	6992      	ldr	r2, [r2, #24]
 80017fe:	f042 0220 	orr.w	r2, r2, #32
 8001802:	619a      	str	r2, [r3, #24]
    }
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6992      	ldr	r2, [r2, #24]
 800180c:	3a01      	subs	r2, #1
 800180e:	0651      	lsls	r1, r2, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	69d2      	ldr	r2, [r2, #28]
 8001814:	3a01      	subs	r2, #1
 8001816:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8001818:	4311      	orrs	r1, r2
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6a12      	ldr	r2, [r2, #32]
 800181e:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 8001820:	4311      	orrs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6952      	ldr	r2, [r2, #20]
 8001826:	3a01      	subs	r2, #1
 8001828:	0412      	lsls	r2, r2, #16
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 800182a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 800182c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001836:	d114      	bne.n	8001862 <HAL_FDCAN_Init+0x262>
  {
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001840:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001846:	3a01      	subs	r2, #1
 8001848:	0212      	lsls	r2, r2, #8
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 800184a:	4311      	orrs	r1, r2
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001850:	3a01      	subs	r2, #1
 8001852:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 8001854:	4311      	orrs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1) << 16));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185a:	3a01      	subs	r2, #1
 800185c:	0412      	lsls	r2, r2, #16
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 800185e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 8001860:	60da      	str	r2, [r3, #12]
  }

  if(hfdcan->Init.TxFifoQueueElmtsNbr > 0)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <HAL_FDCAN_Init+0x280>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800187a:	430a      	orrs	r2, r1
 800187c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	4413      	add	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00e      	beq.n	80018ac <HAL_FDCAN_Init+0x2ac>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 800189a:	f022 0207 	bic.w	r2, r2, #7
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80018a2:	482e      	ldr	r0, [pc, #184]	; (800195c <HAL_FDCAN_Init+0x35c>)
 80018a4:	5c41      	ldrb	r1, [r0, r1]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if(hfdcan->Init.RxFifo0ElmtsNbr > 0)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <HAL_FDCAN_Init+0x2d2>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, CvtEltSize[hfdcan->Init.RxFifo0ElmtSize]);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80018c0:	f022 0207 	bic.w	r2, r2, #7
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80018c8:	4824      	ldr	r0, [pc, #144]	; (800195c <HAL_FDCAN_Init+0x35c>)
 80018ca:	5c41      	ldrb	r1, [r0, r1]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if(hfdcan->Init.RxFifo1ElmtsNbr > 0)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00f      	beq.n	80018fa <HAL_FDCAN_Init+0x2fa>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << 4));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80018e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80018ee:	481b      	ldr	r0, [pc, #108]	; (800195c <HAL_FDCAN_Init+0x35c>)
 80018f0:	5c41      	ldrb	r1, [r0, r1]
 80018f2:	0109      	lsls	r1, r1, #4
 80018f4:	430a      	orrs	r2, r1
 80018f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if(hfdcan->Init.RxBuffersNbr > 0)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00f      	beq.n	8001922 <HAL_FDCAN_Init+0x322>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << 8));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 800190e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001916:	4811      	ldr	r0, [pc, #68]	; (800195c <HAL_FDCAN_Init+0x35c>)
 8001918:	5c41      	ldrb	r1, [r0, r1]
 800191a:	0209      	lsls	r1, r1, #8
 800191c:	430a      	orrs	r2, r1
 800191e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if(hfdcan->Instance == FDCAN1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_FDCAN_Init+0x360>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d107      	bne.n	800193c <HAL_FDCAN_Init+0x33c>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6852      	ldr	r2, [r2, #4]
 8001934:	6892      	ldr	r2, [r2, #8]
 8001936:	f022 0203 	bic.w	r2, r2, #3
 800193a:	609a      	str	r2, [r3, #8]
  }

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fab9 	bl	8001eb4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	0800e264 	.word	0x0800e264
 8001960:	4000a000 	.word	0x4000a000

08001964 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef* hfdcan, FDCAN_FilterTypeDef* sFilterConfig)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;

  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_FDCAN_ConfigFilter+0x22>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d156      	bne.n	8001a34 <HAL_FDCAN_ConfigFilter+0xd0>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1));
    }

    if(sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d12b      	bne.n	80019e6 <HAL_FDCAN_ConfigFilter+0x82>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FF));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if(sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b07      	cmp	r3, #7
 8001994:	d10d      	bne.n	80019b2 <HAL_FDCAN_ConfigFilter+0x4e>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27)       |
                           (sFilterConfig->FilterID1 << 16)       |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16)       |
 80019a2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex            );
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8) |
 80019a8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27)       |
 80019aa:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e00e      	b.n	80019d0 <HAL_FDCAN_ConfigFilter+0x6c>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30)   |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30)   |
 80019be:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16)    |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27) |
 80019c6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2             );
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30)   |
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e024      	b.n	8001a30 <HAL_FDCAN_ConfigFilter+0xcc>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFF));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29) | sFilterConfig->FilterID1);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	075a      	lsls	r2, r3, #29
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if(sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d103      	bne.n	8001a04 <HAL_FDCAN_ConfigFilter+0xa0>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e006      	b.n	8001a12 <HAL_FDCAN_ConfigFilter+0xae>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30) | sFilterConfig->FilterID2);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	079a      	lsls	r2, r3, #30
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4 * 2));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

      /* Write filter element to the message RAM */
      *FilterAddress++ = FilterElementW1;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1d1a      	adds	r2, r3, #4
 8001a24:	60fa      	str	r2, [r7, #12]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
      *FilterAddress = FilterElementW2;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e008      	b.n	8001a46 <HAL_FDCAN_ConfigFilter+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FUNCTIONAL_STATE(RejectRemoteStd));
  assert_param(IS_FUNCTIONAL_STATE(RejectRemoteExt));

  if(hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10f      	bne.n	8001a8c <HAL_FDCAN_ConfigGlobalFilter+0x3a>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << 4U) | (NonMatchingExt << 2U) | (RejectRemoteStd << 1U) | RejectRemoteExt);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	0111      	lsls	r1, r2, #4
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	0052      	lsls	r2, r2, #1
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Return function status */
    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e008      	b.n	8001a9e <HAL_FDCAN_ConfigGlobalFilter+0x4c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a92:	f043 0204 	orr.w	r2, r3, #4
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_FDCAN_Start>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  if(hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d111      	bne.n	8001ae2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6992      	ldr	r2, [r2, #24]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Return function status */
    return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e008      	b.n	8001af4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_FDCAN_AddMessageToTxBuffer>:
  * @param  BufferIndex: index of the buffer to be configured.
  *                      This parameter can be a value of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxBuffer(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFF));
  assert_param(IS_FDCAN_TX_LOCATION(BufferIndex));

  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_FDCAN_AddMessageToTxBuffer+0x26>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d13e      	bne.n	8001ba4 <HAL_FDCAN_AddMessageToTxBuffer+0xa4>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b32:	69bb      	ldr	r3, [r7, #24]
  {
    /* Check that the selected buffer has an allocated area into the RAM */
    if(POSITION_VAL(BufferIndex) >= ((hfdcan->Instance->TXBC & FDCAN_TXBC_NDTB) >> 16))
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d309      	bcc.n	8001b60 <HAL_FDCAN_AddMessageToTxBuffer+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b52:	f043 0220 	orr.w	r2, r3, #32
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e02a      	b.n	8001bb6 <HAL_FDCAN_AddMessageToTxBuffer+0xb6>
    }

    /* Check that there is no transmittion request pending for the selected buffer */
    if((hfdcan->Instance->TXBRP & BufferIndex) != 0)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <HAL_FDCAN_AddMessageToTxBuffer+0x84>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PENDING;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e018      	b.n	8001bb6 <HAL_FDCAN_AddMessageToTxBuffer+0xb6>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	613b      	str	r3, [r7, #16]
  return(result);
 8001b90:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      /* Add the message to the Tx buffer */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, POSITION_VAL(BufferIndex));
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fb30 	bl	8002200 <FDCAN_CopyMessageToRAM>
    }

    /* Return function status */
    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e008      	b.n	8001bb6 <HAL_FDCAN_AddMessageToTxBuffer+0xb6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_FDCAN_EnableTxBufferRequest>:
  * @param  BufferIndex: buffer index.
  *                      This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxBufferRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  if(hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d106      	bne.n	8001be2 <HAL_FDCAN_EnableTxBufferRequest+0x24>
  {
    /* Add transmission request */
    hfdcan->Instance->TXBAR = BufferIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Return function status */
    return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e008      	b.n	8001bf4 <HAL_FDCAN_EnableTxBufferRequest+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f043 0208 	orr.w	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader: pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData: pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]

  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d006      	beq.n	8001c2c <HAL_FDCAN_GetRxMessage+0x2c>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	f040 811c 	bne.w	8001e64 <HAL_FDCAN_GetRxMessage+0x264>
  {
    if(RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d136      	bne.n	8001ca0 <HAL_FDCAN_GetRxMessage+0xa0>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_FDCAN_GetRxMessage+0x56>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c48:	f043 0220 	orr.w	r2, r3, #32
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e10f      	b.n	8001e76 <HAL_FDCAN_GetRxMessage+0x276>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_FDCAN_GetRxMessage+0x7a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0fd      	b.n	8001e76 <HAL_FDCAN_GetRxMessage+0x276>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> 8);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	613b      	str	r3, [r7, #16]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	6939      	ldr	r1, [r7, #16]
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e052      	b.n	8001d46 <HAL_FDCAN_GetRxMessage+0x146>
      }
    }
    else if(RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b41      	cmp	r3, #65	; 0x41
 8001ca4:	d136      	bne.n	8001d14 <HAL_FDCAN_GetRxMessage+0x114>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_FDCAN_GetRxMessage+0xca>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0d5      	b.n	8001e76 <HAL_FDCAN_GetRxMessage+0x276>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0c3      	b.n	8001e76 <HAL_FDCAN_GetRxMessage+0x276>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> 8);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfc:	613b      	str	r3, [r7, #16]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	6939      	ldr	r1, [r7, #16]
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e018      	b.n	8001d46 <HAL_FDCAN_GetRxMessage+0x146>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if(RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d809      	bhi.n	8001d32 <HAL_FDCAN_GetRxMessage+0x132>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0a1      	b.n	8001e76 <HAL_FDCAN_GetRxMessage+0x276>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if(pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_FDCAN_GetRxMessage+0x16a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0c9b      	lsrs	r3, r3, #18
 8001d60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e005      	b.n	8001d76 <HAL_FDCAN_GetRxMessage+0x176>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress++ & FDCAN_ELEMENT_MASK_ESI);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	1d1a      	adds	r2, r3, #4
 8001d86:	61fa      	str	r2, [r7, #28]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e1b      	lsrs	r3, r3, #24
 8001dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress++ & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	1d1a      	adds	r2, r3, #4
 8001dd2:	61fa      	str	r2, [r7, #28]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0fdb      	lsrs	r3, r3, #31
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	61bb      	str	r3, [r7, #24]
    for(ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00a      	b.n	8001e00 <HAL_FDCAN_GetRxMessage+0x200>
    {
      *pRxData++ = *pData++;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	603a      	str	r2, [r7, #0]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	1c51      	adds	r1, r2, #1
 8001df4:	61b9      	str	r1, [r7, #24]
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	701a      	strb	r2, [r3, #0]
    for(ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_FDCAN_GetRxMessage+0x284>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d8eb      	bhi.n	8001dea <HAL_FDCAN_GetRxMessage+0x1ea>
    }

    if(RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b40      	cmp	r3, #64	; 0x40
 8001e16:	d105      	bne.n	8001e24 <HAL_FDCAN_GetRxMessage+0x224>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001e22:	e01d      	b.n	8001e60 <HAL_FDCAN_GetRxMessage+0x260>
    }
    else if(RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b41      	cmp	r3, #65	; 0x41
 8001e28:	d105      	bne.n	8001e36 <HAL_FDCAN_GetRxMessage+0x236>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001e34:	e014      	b.n	8001e60 <HAL_FDCAN_GetRxMessage+0x260>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if(RxLocation < FDCAN_RX_BUFFER32)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b1f      	cmp	r3, #31
 8001e3a:	d808      	bhi.n	8001e4e <HAL_FDCAN_GetRxMessage+0x24e>
      {
        hfdcan->Instance->NDAT1 = (1 << RxLocation);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	fa01 f202 	lsl.w	r2, r1, r2
 8001e48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001e4c:	e008      	b.n	8001e60 <HAL_FDCAN_GetRxMessage+0x260>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = (1 << (RxLocation - 0x20));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	3a20      	subs	r2, #32
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e008      	b.n	8001e76 <HAL_FDCAN_GetRxMessage+0x276>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e6a:	f043 0202 	orr.w	r2, r3, #2
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	0800e254 	.word	0x0800e254

08001e88 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status:
  *          - 0 : No pending transmission request on RxBufferIndex.
  *          - 1 : Pending transmission request on RxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION(TxBufferIndex));

  /* Check pending transmittion request on the selected buffer */
  if((hfdcan->Instance->TXBRP & TxBufferIndex) == 0)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  {
    return 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_FDCAN_IsTxBufferMessagePending+0x20>
  }
  return 1;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
  *                 the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;

  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001ed0:	4ba7      	ldr	r3, [pc, #668]	; (8002170 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8001ed8:	0089      	lsls	r1, r1, #2
 8001eda:	430b      	orrs	r3, r1
 8001edc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8001eec:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ef4:	0412      	lsls	r2, r2, #16
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001f16:	4b96      	ldr	r3, [pc, #600]	; (8002170 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001f18:	400b      	ands	r3, r1
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6f09      	ldr	r1, [r1, #112]	; 0x70
 8001f1e:	0089      	lsls	r1, r1, #2
 8001f20:	430b      	orrs	r3, r1
 8001f22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001f32:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f3a:	0412      	lsls	r2, r2, #16
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	675a      	str	r2, [r3, #116]	; 0x74
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (hfdcan->msgRam.RxFIFO0SA << 2));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8001f5e:	4b84      	ldr	r3, [pc, #528]	; (8002170 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001f60:	400b      	ands	r3, r1
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	6f49      	ldr	r1, [r1, #116]	; 0x74
 8001f66:	0089      	lsls	r1, r1, #2
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << 16));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8001f7a:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f82:	0412      	lsls	r2, r2, #16
 8001f84:	430a      	orrs	r2, r1
 8001f86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	441a      	add	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	679a      	str	r2, [r3, #120]	; 0x78
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8001fac:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << 16));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8001fc8:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fd0:	0412      	lsls	r2, r2, #16
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	67da      	str	r2, [r3, #124]	; 0x7c
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (hfdcan->msgRam.RxBufferSA << 2));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8001ffa:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	430a      	orrs	r2, r1
 8002006:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	441a      	add	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800202e:	4b50      	ldr	r3, [pc, #320]	; (8002170 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002030:	400b      	ands	r3, r1
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8002038:	0089      	lsls	r1, r1, #2
 800203a:	430b      	orrs	r3, r1
 800203c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800204c:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002054:	0412      	lsls	r2, r2, #16
 8002056:	430a      	orrs	r2, r1
 8002058:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (hfdcan->msgRam.TxBufferSA << 2));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 800207c:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	430a      	orrs	r2, r1
 800208a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << 16));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 800209a:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020a2:	0412      	lsls	r2, r2, #16
 80020a4:	430a      	orrs	r2, r1
 80020a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	441a      	add	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 80020d0:	f022 517c 	bic.w	r1, r2, #1056964608	; 0x3f000000
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80020d8:	0612      	lsls	r2, r2, #24
 80020da:	430a      	orrs	r2, r1
 80020dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <FDCAN_CalcultateRamBlockAddresses+0x2c0>)
 80020e6:	4413      	add	r3, r2
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	e003      	b.n	8002178 <FDCAN_CalcultateRamBlockAddresses+0x2c4>
 8002170:	ffff0003 	.word	0xffff0003
 8002174:	10002b00 	.word	0x10002b00
 8002178:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	441a      	add	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <FDCAN_CalcultateRamBlockAddresses+0x348>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d909      	bls.n	80021ce <FDCAN_CalcultateRamBlockAddresses+0x31a>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e010      	b.n	80021f0 <FDCAN_CalcultateRamBlockAddresses+0x33c>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e005      	b.n	80021e2 <FDCAN_CalcultateRamBlockAddresses+0x32e>
    {
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3304      	adds	r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d8f3      	bhi.n	80021d6 <FDCAN_CalcultateRamBlockAddresses+0x322>
    }
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	4000b5fc 	.word	0x4000b5fc

08002200 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData: pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex: index of the buffer to be configured.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if(pTxHeader->IdType == FDCAN_STANDARD_ID)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800221e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002226:	4313      	orrs	r3, r2
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e00a      	b.n	8002242 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002234:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800223a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800223c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002240:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800224c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002252:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002258:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress++ = TxElementW1;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1d1a      	adds	r2, r3, #4
 800227c:	61ba      	str	r2, [r7, #24]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	601a      	str	r2, [r3, #0]
  *TxAddress++ = TxElementW2;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	61ba      	str	r2, [r7, #24]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	601a      	str	r2, [r3, #0]

  /* Write Tx payload to the message RAM */
  for(ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e01f      	b.n	80022d2 <FDCAN_CopyMessageToRAM+0xd2>
  {
    *TxAddress++ = ((pTxData[ByteCounter+3] << 24) |
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1d1a      	adds	r2, r3, #4
 8002296:	61ba      	str	r2, [r7, #24]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	3203      	adds	r2, #3
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	440a      	add	r2, r1
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	0611      	lsls	r1, r2, #24
                    (pTxData[ByteCounter+2] << 16) |
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	3202      	adds	r2, #2
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4402      	add	r2, r0
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	0412      	lsls	r2, r2, #16
    *TxAddress++ = ((pTxData[ByteCounter+3] << 24) |
 80022b0:	4311      	orrs	r1, r2
                    (pTxData[ByteCounter+1] << 8) |
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	3201      	adds	r2, #1
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4402      	add	r2, r0
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	0212      	lsls	r2, r2, #8
                    (pTxData[ByteCounter+2] << 16) |
 80022be:	430a      	orrs	r2, r1
                    pTxData[ByteCounter]);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	4401      	add	r1, r0
 80022c6:	7809      	ldrb	r1, [r1, #0]
                    (pTxData[ByteCounter+1] << 8) |
 80022c8:	430a      	orrs	r2, r1
    *TxAddress++ = ((pTxData[ByteCounter+3] << 24) |
 80022ca:	601a      	str	r2, [r3, #0]
  for(ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3304      	adds	r3, #4
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <FDCAN_CopyMessageToRAM+0xf4>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	461a      	mov	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8d6      	bhi.n	8002292 <FDCAN_CopyMessageToRAM+0x92>
  }

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	0800e254 	.word	0x0800e254

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  EXTI_Core_TypeDef * EXTI_Ptr = EXTI_D1; 
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_GPIO_Init+0x248>)
 8002314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e196      	b.n	800264a <HAL_GPIO_Init+0x352>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8185 	bne.w	8002644 <HAL_GPIO_Init+0x34c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x52>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d123      	bne.n	8002392 <HAL_GPIO_Init+0x9a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	69b9      	ldr	r1, [r7, #24]
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d00b      	beq.n	80023e6 <HAL_GPIO_Init+0xee>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023da:	2b11      	cmp	r3, #17
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0xee>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d130      	bne.n	8002448 <HAL_GPIO_Init+0x150>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80df 	beq.w	8002644 <HAL_GPIO_Init+0x34c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <HAL_GPIO_Init+0x24c>)
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_GPIO_Init+0x24c>)
 800248a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_GPIO_Init+0x24c>)
 8002498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_GPIO_Init+0x250>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a20      	ldr	r2, [pc, #128]	; (800254c <HAL_GPIO_Init+0x254>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d051      	beq.n	8002574 <HAL_GPIO_Init+0x27c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_GPIO_Init+0x258>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d031      	beq.n	800253c <HAL_GPIO_Init+0x244>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_GPIO_Init+0x25c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d02b      	beq.n	8002538 <HAL_GPIO_Init+0x240>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_GPIO_Init+0x260>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d025      	beq.n	8002534 <HAL_GPIO_Init+0x23c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_GPIO_Init+0x264>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01f      	beq.n	8002530 <HAL_GPIO_Init+0x238>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_GPIO_Init+0x268>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d019      	beq.n	800252c <HAL_GPIO_Init+0x234>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_GPIO_Init+0x26c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x230>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_GPIO_Init+0x270>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x22c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <HAL_GPIO_Init+0x274>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x228>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_GPIO_Init+0x278>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x224>
 8002518:	2309      	movs	r3, #9
 800251a:	e02c      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 800251c:	230a      	movs	r3, #10
 800251e:	e02a      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002520:	2308      	movs	r3, #8
 8002522:	e028      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002524:	2307      	movs	r3, #7
 8002526:	e026      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002528:	2306      	movs	r3, #6
 800252a:	e024      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 800252c:	2305      	movs	r3, #5
 800252e:	e022      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002530:	2304      	movs	r3, #4
 8002532:	e020      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002534:	2303      	movs	r3, #3
 8002536:	e01e      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002538:	2302      	movs	r3, #2
 800253a:	e01c      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 800253c:	2301      	movs	r3, #1
 800253e:	e01a      	b.n	8002576 <HAL_GPIO_Init+0x27e>
 8002540:	58000080 	.word	0x58000080
 8002544:	58024400 	.word	0x58024400
 8002548:	58000400 	.word	0x58000400
 800254c:	58020000 	.word	0x58020000
 8002550:	58020400 	.word	0x58020400
 8002554:	58020800 	.word	0x58020800
 8002558:	58020c00 	.word	0x58020c00
 800255c:	58021000 	.word	0x58021000
 8002560:	58021400 	.word	0x58021400
 8002564:	58021800 	.word	0x58021800
 8002568:	58021c00 	.word	0x58021c00
 800256c:	58022000 	.word	0x58022000
 8002570:	58022400 	.word	0x58022400
 8002574:	2300      	movs	r3, #0
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002586:	4936      	ldr	r1, [pc, #216]	; (8002660 <HAL_GPIO_Init+0x368>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     
        /* Clear EXTI line configuration */
        temp = EXTI_Ptr->IMR1;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x2c0>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->IMR1 = temp;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_Ptr->EMR1;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2ea>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_Ptr->EMR1 = temp;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x316>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800260e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x344>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800263c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3301      	adds	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	f67f ae65 	bls.w	800231c <HAL_GPIO_Init+0x24>
      }      
    }
  }
}
 8002652:	bf00      	nop
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	58000400 	.word	0x58000400

08002664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	887a      	ldrh	r2, [r7, #2]
 80026ae:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	835a      	strh	r2, [r3, #26]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2CEx_EnableFastModePlus>:
  * @param ConfigFastModePlus: Selects the pin.
  *   This parameter can be one of the @ref I2CEx_FastModePlus values
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80026d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80026ea:	4907      	ldr	r1, [pc, #28]	; (8002708 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400
 8002708:	58000400 	.word	0x58000400

0800270c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e038      	b.n	8002790 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002726:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002730:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6852      	ldr	r2, [r2, #4]
 800273a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6892      	ldr	r2, [r2, #8]
 8002744:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002746:	f7fd ffb1 	bl	80006ac <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800274c:	e008      	b.n	8002760 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800274e:	f7fd ffad 	bl	80006ac <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d901      	bls.n	8002760 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e017      	b.n	8002790 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f1      	bne.n	800274e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d005      	beq.n	8002784 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68d2      	ldr	r2, [r2, #12]
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	e004      	b.n	800278e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80027a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	; 0x38
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8086 	beq.w	80028de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027d2:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3e>
 80027de:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e6:	2b18      	cmp	r3, #24
 80027e8:	d111      	bne.n	800280e <HAL_RCC_OscConfig+0x56>
 80027ea:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b8a      	ldr	r3, [pc, #552]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <HAL_RCC_OscConfig+0x124>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d168      	bne.n	80028dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e364      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x6e>
 8002818:	4a81      	ldr	r2, [pc, #516]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800281a:	4b81      	ldr	r3, [pc, #516]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0xcc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x90>
 800282e:	4a7c      	ldr	r2, [pc, #496]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4a79      	ldr	r2, [pc, #484]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800283c:	4b78      	ldr	r3, [pc, #480]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xcc>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0xb4>
 8002852:	4a73      	ldr	r2, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002854:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4a70      	ldr	r2, [pc, #448]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xcc>
 800286c:	4a6c      	ldr	r2, [pc, #432]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800286e:	4b6c      	ldr	r3, [pc, #432]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800287a:	4b69      	ldr	r3, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fd ff0e 	bl	80006ac <HAL_GetTick>
 8002890:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xee>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7fd ff0a 	bl	80006ac <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e318      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xdc>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fd fefa 	bl	80006ac <HAL_GetTick>
 80028b8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x116>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fd fef6 	bl	80006ac <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e304      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x104>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80a2 	beq.w	8002a30 <HAL_RCC_OscConfig+0x278>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028ec:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_RCC_OscConfig+0x158>
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002900:	2b18      	cmp	r3, #24
 8002902:	d143      	bne.n	800298c <HAL_RCC_OscConfig+0x1d4>
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13d      	bne.n	800298c <HAL_RCC_OscConfig+0x1d4>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x170>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e2d7      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002928:	493d      	ldr	r1, [pc, #244]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0219 	bic.w	r2, r3, #25
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fd feb7 	bl	80006ac <HAL_GetTick>
 800293e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x19c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002942:	f7fd feb3 	bl	80006ac <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e2c1      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x18a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	482f      	ldr	r0, [pc, #188]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002962:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298a:	e051      	b.n	8002a30 <HAL_RCC_OscConfig+0x278>
    }
    
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d031      	beq.n	80029f8 <HAL_RCC_OscConfig+0x240>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002994:	4922      	ldr	r1, [pc, #136]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0219 	bic.w	r2, r3, #25
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fd fe81 	bl	80006ac <HAL_GetTick>
 80029aa:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x208>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fd fe7d 	bl	80006ac <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e28b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x1f6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4814      	ldr	r0, [pc, #80]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	6043      	str	r3, [r0, #4]
 80029f6:	e01b      	b.n	8002a30 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f8:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_OscConfig+0x268>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fd fe52 	bl	80006ac <HAL_GetTick>
 8002a08:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x26c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fd fe4e 	bl	80006ac <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d904      	bls.n	8002a24 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e25c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
 8002a1e:	bf00      	nop
 8002a20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a24:	4ba0      	ldr	r3, [pc, #640]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ed      	bne.n	8002a0c <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d07f      	beq.n	8002b3c <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d00b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x2a8>
 8002a48:	4b97      	ldr	r3, [pc, #604]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a50:	2b18      	cmp	r3, #24
 8002a52:	d127      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2ec>
 8002a54:	4b94      	ldr	r3, [pc, #592]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d121      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2ec>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a60:	4b91      	ldr	r3, [pc, #580]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2c0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b80      	cmp	r3, #128	; 0x80
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2c0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e22f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a78:	488b      	ldr	r0, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a19      	ldr	r1, [r3, #32]
 8002a86:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8002a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aa2:	e04b      	b.n	8002b3c <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d02e      	beq.n	8002b0a <HAL_RCC_OscConfig+0x352>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aac:	4a7e      	ldr	r2, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002aae:	4b7e      	ldr	r3, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fd fdf8 	bl	80006ac <HAL_GetTick>
 8002abc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x31a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ac0:	f7fd fdf4 	bl	80006ac <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e202      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002ad2:	4b75      	ldr	r3, [pc, #468]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ade:	4872      	ldr	r0, [pc, #456]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002ae0:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a19      	ldr	r1, [r3, #32]
 8002aec:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8002af0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	617b      	str	r3, [r7, #20]
  return(result);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	6043      	str	r3, [r0, #4]
 8002b08:	e018      	b.n	8002b3c <HAL_RCC_OscConfig+0x384>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b0c:	4b66      	ldr	r3, [pc, #408]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fd fdc9 	bl	80006ac <HAL_GetTick>
 8002b1a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x378>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b1e:	f7fd fdc5 	bl	80006ac <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1d3      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8002b30:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d036      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b50:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b52:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fd fda6 	bl	80006ac <HAL_GetTick>
 8002b60:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3be>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fd fda2 	bl	80006ac <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1b0      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	4b4c      	ldr	r3, [pc, #304]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3ac>
 8002b82:	e018      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b86:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fd fd8c 	bl	80006ac <HAL_GetTick>
 8002b94:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x3f2>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fd fd88 	bl	80006ac <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e196      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x3e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d036      	beq.n	8002c30 <HAL_RCC_OscConfig+0x478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCC_OscConfig+0x446>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd4:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bd6:	f7fd fd69 	bl	80006ac <HAL_GetTick>
 8002bda:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bde:	f7fd fd65 	bl	80006ac <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e173      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x426>
 8002bfc:	e018      	b.n	8002c30 <HAL_RCC_OscConfig+0x478>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c00:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c08:	6013      	str	r3, [r2, #0]
      
      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c0a:	f7fd fd4f 	bl	80006ac <HAL_GetTick>
 8002c0e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c12:	f7fd fd4b 	bl	80006ac <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e159      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c24:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x45a>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8085 	beq.w	8002d48 <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4a:	f7fd fd2f 	bl	80006ac <HAL_GetTick>
 8002c4e:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ac>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fd fd2b 	bl	80006ac <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x4ac>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e139      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x49a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4ce>
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	e031      	b.n	8002cea <HAL_RCC_OscConfig+0x532>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d110      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4f8>
 8002c8e:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <HAL_RCC_OscConfig+0x4f0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	e020      	b.n	8002cea <HAL_RCC_OscConfig+0x532>
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	58024800 	.word	0x58024800
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x51a>
 8002cb8:	4a89      	ldr	r2, [pc, #548]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002cba:	4b89      	ldr	r3, [pc, #548]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	4a86      	ldr	r2, [pc, #536]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002cc6:	4b86      	ldr	r3, [pc, #536]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	e00b      	b.n	8002cea <HAL_RCC_OscConfig+0x532>
 8002cd2:	4a83      	ldr	r2, [pc, #524]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002cd4:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4a80      	ldr	r2, [pc, #512]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002ce0:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7fd fcdb 	bl	80006ac <HAL_GetTick>
 8002cf6:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x558>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd fcd7 	bl	80006ac <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0e3      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ee      	beq.n	8002cfa <HAL_RCC_OscConfig+0x542>
 8002d1c:	e014      	b.n	8002d48 <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fd fcc5 	bl	80006ac <HAL_GetTick>
 8002d22:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x584>
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fd fcc1 	bl	80006ac <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0cd      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ee      	bne.n	8002d26 <HAL_RCC_OscConfig+0x56e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80c2 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x71e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d5a:	2b18      	cmp	r3, #24
 8002d5c:	f000 80b9 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x71a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f040 809a 	bne.w	8002e9e <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d6c:	4b5c      	ldr	r3, [pc, #368]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fd fc99 	bl	80006ac <HAL_GetTick>
 8002d7a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x5d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fd fc95 	bl	80006ac <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0a3      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9c:	4850      	ldr	r0, [pc, #320]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da2:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_RCC_OscConfig+0x72c>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	430a      	orrs	r2, r1
 8002db2:	4313      	orrs	r3, r2
 8002db4:	6283      	str	r3, [r0, #40]	; 0x28
 8002db6:	494a      	ldr	r1, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	025b      	lsls	r3, r3, #9
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	3b01      	subs	r3, #1
 8002de2:	061b      	lsls	r3, r3, #24
 8002de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002de8:	4313      	orrs	r3, r2
 8002dea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dec:	483c      	ldr	r0, [pc, #240]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002dee:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df2:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_OscConfig+0x730>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002dfa:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8002dfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	fa92 f2a2 	rbit	r2, r2
 8002e06:	60fa      	str	r2, [r7, #12]
  return(result);
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	fab2 f282 	clz	r2, r2
 8002e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e12:	4313      	orrs	r3, r2
 8002e14:	6343      	str	r3, [r0, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */ 
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e16:	4932      	ldr	r1, [pc, #200]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e18:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f023 020c 	bic.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4313      	orrs	r3, r2
 8002e26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e28:	492d      	ldr	r1, [pc, #180]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f023 0202 	bic.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4313      	orrs	r3, r2
 8002e38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e3a:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	62d3      	str	r3, [r2, #44]	; 0x2c
 
        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e52:	4a23      	ldr	r2, [pc, #140]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e5e:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fd fc19 	bl	80006ac <HAL_GetTick>
 8002e7a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x6d8>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fd fc15 	bl	80006ac <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e023      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x6c6>
 8002e9c:	e01b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fd fbff 	bl	80006ac <HAL_GetTick>
 8002eae:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x70c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fd fbfb 	bl	80006ac <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_OscConfig+0x728>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x6fa>
 8002ed0:	e001      	b.n	8002ed6 <HAL_RCC_OscConfig+0x71e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCC_OscConfig+0x720>
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	58024400 	.word	0x58024400
 8002ee4:	fffffc0c 	.word	0xfffffc0c
 8002ee8:	ffff0007 	.word	0xffff0007

08002eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002efa:	4b9d      	ldr	r3, [pc, #628]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0207 	and.w	r2, r3, #7
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d210      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4999      	ldr	r1, [pc, #612]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8002f0a:	4b99      	ldr	r3, [pc, #612]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f18:	4b95      	ldr	r3, [pc, #596]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0207 	and.w	r2, r3, #7
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e11d      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
    }

  }
   /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x5c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f36:	498f      	ldr	r1, [pc, #572]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002f38:	4b8e      	ldr	r3, [pc, #568]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f023 020f 	bic.w	r2, r3, #15
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	618b      	str	r3, [r1, #24]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_ClockConfig+0x198>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f56:	4987      	ldr	r1, [pc, #540]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002f58:	4b86      	ldr	r3, [pc, #536]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f70:	4b80      	ldr	r3, [pc, #512]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d121      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0f2      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xac>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0e6      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xc4>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8002fa0:	4b74      	ldr	r3, [pc, #464]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0da      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b70      	ldr	r3, [pc, #448]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xd4>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0d2      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc0:	496c      	ldr	r1, [pc, #432]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fd fb6b 	bl	80006ac <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d112      	bne.n	8003006 <HAL_RCC_ClockConfig+0x11a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_ClockConfig+0x10c>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe2:	f7fd fb63 	bl	80006ac <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0b6      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003000:	2b10      	cmp	r3, #16
 8003002:	d1ee      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xf6>
 8003004:	e03e      	b.n	8003084 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d112      	bne.n	8003034 <HAL_RCC_ClockConfig+0x148>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x13a>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fd fb4c 	bl	80006ac <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x13a>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e09f      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800302e:	2b18      	cmp	r3, #24
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_ClockConfig+0x124>
 8003032:	e027      	b.n	8003084 <HAL_RCC_ClockConfig+0x198>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d11d      	bne.n	8003078 <HAL_RCC_ClockConfig+0x18c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_ClockConfig+0x168>
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303e:	f7fd fb35 	bl	80006ac <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_ClockConfig+0x168>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e088      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800305c:	2b08      	cmp	r3, #8
 800305e:	d1ee      	bne.n	800303e <HAL_RCC_ClockConfig+0x152>
 8003060:	e010      	b.n	8003084 <HAL_RCC_ClockConfig+0x198>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fd fb23 	bl	80006ac <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_ClockConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e076      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ee      	bne.n	8003062 <HAL_RCC_ClockConfig+0x176>
        }
      }
    }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003084:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0207 	and.w	r2, r3, #7
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d910      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x1c8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4937      	ldr	r1, [pc, #220]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCC_ClockConfig+0x284>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x1c8>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e058      	b.n	8003166 <HAL_RCC_ClockConfig+0x27a>
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x1e6>
  {
    assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030c0:	492c      	ldr	r1, [pc, #176]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	618b      	str	r3, [r1, #24]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030de:	4925      	ldr	r1, [pc, #148]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x222>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030fc:	491d      	ldr	r1, [pc, #116]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61cb      	str	r3, [r1, #28]
  }


  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_RCC_ClockConfig+0x240>
  {
    assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 800311a:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	4313      	orrs	r3, r2
 800312a:	620b      	str	r3, [r1, #32]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800312c:	f000 f828 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8003130:	4601      	mov	r1, r0
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_ClockConfig+0x288>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800313a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	60fb      	str	r3, [r7, #12]
  return(result);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x28c>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	fa21 f303 	lsr.w	r3, r1, r3
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <HAL_RCC_ClockConfig+0x290>)
 800315c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800315e:	200f      	movs	r0, #15
 8003160:	f7fd fa60 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	52002000 	.word	0x52002000
 8003174:	58024400 	.word	0x58024400
 8003178:	0800e290 	.word	0x0800e290
 800317c:	20000050 	.word	0x20000050

08003180 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 8003186:	2301      	movs	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	2301      	movs	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
 float fracn1=0, pllvco = 0;
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 uint32_t sysclockfreq = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031aa:	4ba8      	ldr	r3, [pc, #672]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b2:	2b18      	cmp	r3, #24
 80031b4:	f200 813f 	bhi.w	8003436 <HAL_RCC_GetSysClockFreq+0x2b6>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_RCC_GetSysClockFreq+0x40>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	08003225 	.word	0x08003225
 80031c4:	08003437 	.word	0x08003437
 80031c8:	08003437 	.word	0x08003437
 80031cc:	08003437 	.word	0x08003437
 80031d0:	08003437 	.word	0x08003437
 80031d4:	08003437 	.word	0x08003437
 80031d8:	08003437 	.word	0x08003437
 80031dc:	08003437 	.word	0x08003437
 80031e0:	0800324b 	.word	0x0800324b
 80031e4:	08003437 	.word	0x08003437
 80031e8:	08003437 	.word	0x08003437
 80031ec:	08003437 	.word	0x08003437
 80031f0:	08003437 	.word	0x08003437
 80031f4:	08003437 	.word	0x08003437
 80031f8:	08003437 	.word	0x08003437
 80031fc:	08003437 	.word	0x08003437
 8003200:	08003251 	.word	0x08003251
 8003204:	08003437 	.word	0x08003437
 8003208:	08003437 	.word	0x08003437
 800320c:	08003437 	.word	0x08003437
 8003210:	08003437 	.word	0x08003437
 8003214:	08003437 	.word	0x08003437
 8003218:	08003437 	.word	0x08003437
 800321c:	08003437 	.word	0x08003437
 8003220:	08003257 	.word	0x08003257
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003224:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0xc4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003230:	4b86      	ldr	r3, [pc, #536]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	08db      	lsrs	r3, r3, #3
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	4a85      	ldr	r2, [pc, #532]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }
      
    break;
 8003242:	e0fb      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x2bc>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003244:	4b82      	ldr	r3, [pc, #520]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003246:	61bb      	str	r3, [r7, #24]
    break;
 8003248:	e0f8      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324c:	61bb      	str	r3, [r7, #24]
    break;
 800324e:	e0f5      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x2bc>

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003252:	61bb      	str	r3, [r7, #24]
    break;
 8003254:	e0f2      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x2bc>
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003256:	4b7d      	ldr	r3, [pc, #500]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003260:	4b7a      	ldr	r3, [pc, #488]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326a:	60fb      	str	r3, [r7, #12]
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800326c:	4b77      	ldr	r3, [pc, #476]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003276:	4b75      	ldr	r3, [pc, #468]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	edc7 7a00 	vstr	s15, [r7]

    switch (pllsource)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d055      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x1c4>
 8003298:	2b01      	cmp	r3, #1
 800329a:	d302      	bcc.n	80032a2 <HAL_RCC_GetSysClockFreq+0x122>
 800329c:	2b02      	cmp	r3, #2
 800329e:	d072      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x206>
 80032a0:	e092      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
    case 0x00:  /* HSI used as PLL clock source */

     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032a2:	4b6a      	ldr	r3, [pc, #424]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d029      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x182>
      {
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032ae:	4b67      	ldr	r3, [pc, #412]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	08db      	lsrs	r3, r3, #3
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	4a65      	ldr	r2, [pc, #404]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	607b      	str	r3, [r7, #4]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d0:	4b5e      	ldr	r3, [pc, #376]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e0:	ed97 6a00 	vldr	s12, [r7]
 80032e4:	eddf 5a5d 	vldr	s11, [pc, #372]	; 800345c <HAL_RCC_GetSysClockFreq+0x2dc>
 80032e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      }
      break;
 8003300:	e083      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x28a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8003302:	4a53      	ldr	r2, [pc, #332]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003312:	4b4e      	ldr	r3, [pc, #312]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a00 	vldr	s12, [r7]
 8003326:	eddf 5a4d 	vldr	s11, [pc, #308]	; 800345c <HAL_RCC_GetSysClockFreq+0x2dc>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003342:	e062      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x01:  /* CSI used as PLL clock source */
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8003344:	4a43      	ldr	r2, [pc, #268]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003354:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003364:	ed97 6a00 	vldr	s12, [r7]
 8003368:	eddf 5a3c 	vldr	s11, [pc, #240]	; 800345c <HAL_RCC_GetSysClockFreq+0x2dc>
 800336c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003384:	e041      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x28a>

    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8003386:	4a34      	ldr	r2, [pc, #208]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003396:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a6:	ed97 6a00 	vldr	s12, [r7]
 80033aa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800345c <HAL_RCC_GetSysClockFreq+0x2dc>
 80033ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033c6:	e020      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x28a>

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e8:	ed97 6a00 	vldr	s12, [r7]
 80033ec:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800345c <HAL_RCC_GetSysClockFreq+0x2dc>
 80033f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003408:	bf00      	nop
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_RCC_GetSysClockFreq+0x2cc>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	0a5b      	lsrs	r3, r3, #9
 8003410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003414:	3301      	adds	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003422:	edd7 6a07 	vldr	s13, [r7, #28]
 8003426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800342a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342e:	ee17 3a90 	vmov	r3, s15
 8003432:	61bb      	str	r3, [r7, #24]
    break;
 8003434:	e002      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x2bc>

  default:
    sysclockfreq = CSI_VALUE;
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	61bb      	str	r3, [r7, #24]
    break;
 800343a:	bf00      	nop
  }

  return sysclockfreq;
 800343c:	69bb      	ldr	r3, [r7, #24]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	58024400 	.word	0x58024400
 8003450:	03d09000 	.word	0x03d09000
 8003454:	003d0900 	.word	0x003d0900
 8003458:	01312d00 	.word	0x01312d00
 800345c:	46000000 	.word	0x46000000

08003460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8003466:	f001 fa15 	bl	8004894 <HAL_RCCEx_GetD1SysClockFreq>
 800346a:	4601      	mov	r1, r0
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x44>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 020f 	and.w	r2, r3, #15
 8003474:	2301      	movs	r3, #1
 8003476:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	603b      	str	r3, [r7, #0]
  return(result);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	fa22 f303 	lsr.w	r3, r2, r3
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x48>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	fa21 f303 	lsr.w	r3, r1, r3
 8003492:	4a06      	ldr	r2, [pc, #24]	; (80034ac <HAL_RCC_GetHCLKFreq+0x4c>)
 8003494:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetHCLKFreq+0x4c>)
 8003498:	681b      	ldr	r3, [r3, #0]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
 80034a8:	0800e290 	.word	0x0800e290
 80034ac:	20000054 	.word	0x20000054

080034b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80034b6:	f7ff ffd3 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034c4:	2310      	movs	r3, #16
 80034c6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	603b      	str	r3, [r7, #0]
  return(result);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	58024400 	.word	0x58024400
 80034f0:	0800e290 	.word	0x0800e290

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80034fa:	f7ff ffb1 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034fe:	4601      	mov	r1, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800350c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	603b      	str	r3, [r7, #0]
  return(result);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	58024400 	.word	0x58024400
 8003534:	0800e290 	.word	0x0800e290

08003538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003540:	2300      	movs	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003544:	2300      	movs	r3, #0
 8003546:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03f      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355c:	d013      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800355e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003562:	d802      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003568:	e01f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800356a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800356e:	d013      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003574:	d01c      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003576:	e018      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4ab1      	ldr	r2, [pc, #708]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800357a:	4bb1      	ldr	r3, [pc, #708]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f9a9 	bl	80048e4 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	2102      	movs	r1, #2
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fa3a 	bl	8004a18 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035b8:	49a1      	ldr	r1, [pc, #644]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035ba:	4ba1      	ldr	r3, [pc, #644]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c6:	4313      	orrs	r3, r2
 80035c8:	650b      	str	r3, [r1, #80]	; 0x50
 80035ca:	e003      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80035cc:	7dba      	ldrb	r2, [r7, #22]
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03f      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d826      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003605 	.word	0x08003605
 80035f4:	08003613 	.word	0x08003613
 80035f8:	08003625 	.word	0x08003625
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	0800363d 	.word	0x0800363d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4a8e      	ldr	r2, [pc, #568]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003606:	4b8e      	ldr	r3, [pc, #568]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f001 f963 	bl	80048e4 <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003622:	e00c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f001 f9f4 	bl	8004a18 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
      break;
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800363c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003644:	497e      	ldr	r1, [pc, #504]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003646:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	f023 0207 	bic.w	r2, r3, #7
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	4313      	orrs	r3, r2
 8003654:	650b      	str	r3, [r1, #80]	; 0x50
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003658:	7dba      	ldrb	r2, [r7, #22]
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	4313      	orrs	r3, r2
 800365e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003668:	2b00      	cmp	r3, #0
 800366a:	d040      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d01c      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x176>
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d804      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d00d      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8003680:	e01e      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003682:	2bc0      	cmp	r3, #192	; 0xc0
 8003684:	d01f      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368a:	d01e      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 800368c:	e018      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368e:	4a6c      	ldr	r2, [pc, #432]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003690:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800369a:	e017      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f91e 	bl	80048e4 <RCCEx_PLL2_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036ac:	e00e      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f9af 	bl	8004a18 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036be:	e005      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
      break;
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 80036ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036d2:	495b      	ldr	r1, [pc, #364]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d4:	4b5a      	ldr	r3, [pc, #360]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4313      	orrs	r3, r2
 80036e2:	650b      	str	r3, [r1, #80]	; 0x50
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80036e6:	7dba      	ldrb	r2, [r7, #22]
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d046      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003704:	d01f      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370a:	d805      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003714:	d00e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003716:	e01f      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003718:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800371c:	d01f      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x226>
 800371e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003722:	d01e      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003724:	e018      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003726:	4a46      	ldr	r2, [pc, #280]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003730:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003732:	e017      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f8d2 	bl	80048e4 <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003744:	e00e      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3324      	adds	r3, #36	; 0x24
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f001 f963 	bl	8004a18 <RCCEx_PLL3_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003756:	e005      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
      break;
 800375c:	e002      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      break;
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      break;
 8003762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800376a:	4935      	ldr	r1, [pc, #212]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800376c:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800377a:	4313      	orrs	r3, r2
 800377c:	658b      	str	r3, [r1, #88]	; 0x58
 800377e:	e003      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003780:	7dba      	ldrb	r2, [r7, #22]
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	4313      	orrs	r3, r2
 8003786:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	2b00      	cmp	r3, #0
 8003792:	d046      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800379a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379e:	d01f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a4:	d805      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80037aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ae:	d00e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x296>
 80037b0:	e01f      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80037b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037b6:	d01f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80037b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037bc:	d01e      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80037be:	e018      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037cc:	e017      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f885 	bl	80048e4 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037de:	e00e      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 f916 	bl	8004a18 <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037f0:	e005      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80037fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003814:	4313      	orrs	r3, r2
 8003816:	658b      	str	r3, [r1, #88]	; 0x58
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800381a:	7dba      	ldrb	r2, [r7, #22]
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	4313      	orrs	r3, r2
 8003820:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d036      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	2b10      	cmp	r3, #16
 8003834:	d00b      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003836:	2b10      	cmp	r3, #16
 8003838:	d804      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800383e:	e016      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003840:	58024400 	.word	0x58024400
 8003844:	2b20      	cmp	r3, #32
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003848:	2b30      	cmp	r3, #48	; 0x30
 800384a:	d015      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x340>
 800384c:	e00f      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384e:	4aae      	ldr	r2, [pc, #696]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003850:	4bad      	ldr	r3, [pc, #692]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800385a:	e00e      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x342>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f83e 	bl	80048e4 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800386c:	e005      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x342>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
      break;
 8003872:	e002      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x342>
      break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x342>
      break;
 8003878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003880:	49a1      	ldr	r1, [pc, #644]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003882:	4ba1      	ldr	r3, [pc, #644]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	4313      	orrs	r3, r2
 8003890:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003894:	7dba      	ldrb	r2, [r7, #22]
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	4313      	orrs	r3, r2
 800389a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d044      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b0:	d01f      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80038b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b6:	d805      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80038bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c0:	d00e      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80038c2:	e01f      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80038c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038c8:	d01f      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80038ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ce:	d01e      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80038d0:	e018      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d2:	4a8d      	ldr	r2, [pc, #564]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	4b8c      	ldr	r3, [pc, #560]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038de:	e017      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d8>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fffc 	bl	80048e4 <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038f0:	e00e      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d8>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3324      	adds	r3, #36	; 0x24
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f88d 	bl	8004a18 <RCCEx_PLL3_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003902:	e005      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
      break;
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      break;
 800390e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003916:	497c      	ldr	r1, [pc, #496]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	4313      	orrs	r3, r2
 8003926:	650b      	str	r3, [r1, #80]	; 0x50
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800392a:	7dba      	ldrb	r2, [r7, #22]
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	4313      	orrs	r3, r2
 8003930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d044      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003946:	d01b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8003948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394c:	d805      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x422>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d022      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003958:	e01b      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800395a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800395e:	d01d      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003964:	d01c      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8003966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800396a:	d01b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 800396c:	e011      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f000 ffb5 	bl	80048e4 <RCCEx_PLL2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800397e:	e012      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3324      	adds	r3, #36	; 0x24
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f001 f846 	bl	8004a18 <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003990:	e009      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
      break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 8003998:	bf00      	nop
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 800399c:	bf00      	nop
 800399e:	e002      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039ac:	4956      	ldr	r1, [pc, #344]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	4313      	orrs	r3, r2
 80039bc:	650b      	str	r3, [r1, #80]	; 0x50
 80039be:	e003      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80039c0:	7dba      	ldrb	r2, [r7, #22]
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d046      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039de:	d01b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80039e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e4:	d805      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80039f0:	e01b      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f6:	d01d      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80039f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fc:	d01c      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80039fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a02:	d01b      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a04:	e011      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 ff69 	bl	80048e4 <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a16:	e012      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fffa 	bl	8004a18 <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a28:	e009      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	e006      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8003a30:	bf00      	nop
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8003a34:	bf00      	nop
 8003a36:	e002      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
      break;
 8003a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a44:	4930      	ldr	r1, [pc, #192]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a54:	4313      	orrs	r3, r2
 8003a56:	658b      	str	r3, [r1, #88]	; 0x58
 8003a58:	e003      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003a5a:	7dba      	ldrb	r2, [r7, #22]
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	75bb      	strb	r3, [r7, #22]
  }


#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02f      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a76:	d005      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8003a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a90:	e00c      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x574>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 ff23 	bl	80048e4 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x574>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x574>
      break;
 8003aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab2:	4915      	ldr	r1, [pc, #84]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab4:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x596>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003ac6:	7dba      	ldrb	r2, [r7, #22]
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d036      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d81d      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003af9 	.word	0x08003af9
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	08003b25 	.word	0x08003b25
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003afa:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b04:	e00f      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fee6 	bl	80048e4 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
      break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      break;
 8003b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b2c:	49b0      	ldr	r1, [pc, #704]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003b2e:	4bb0      	ldr	r3, [pc, #704]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b3e:	e003      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003b40:	7dba      	ldrb	r2, [r7, #22]
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 808a 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x732>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b56:	4aa7      	ldr	r2, [pc, #668]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b58:	4ba6      	ldr	r3, [pc, #664]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b62:	f7fc fda3 	bl	80006ac <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b68:	e009      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x646>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fc fd9f 	bl	80006ac <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d902      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        ret = HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	75fb      	strb	r3, [r7, #23]
        break;
 8003b7c:	e005      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x652>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b7e:	4b9d      	ldr	r3, [pc, #628]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ef      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x632>
      }
    }

    if(ret == HAL_OK)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d168      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b90:	4b97      	ldr	r3, [pc, #604]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b9a:	4053      	eors	r3, r2
 8003b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x694>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b92      	ldr	r3, [pc, #584]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bae:	4a90      	ldr	r2, [pc, #576]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003bb0:	4b8f      	ldr	r3, [pc, #572]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bba:	4a8d      	ldr	r2, [pc, #564]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bc6:	4a8a      	ldr	r2, [pc, #552]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd6:	d115      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fc fd68 	bl	80006ac <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fc fd64 	bl	80006ac <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d902      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
          {
            ret = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	75fb      	strb	r3, [r7, #23]
            break;
 8003bf6:	e005      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	4b7d      	ldr	r3, [pc, #500]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ed      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
          }
        }
      }

      if(ret == HAL_OK)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d126      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x720>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c18:	d10d      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8003c1a:	4875      	ldr	r0, [pc, #468]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003c1c:	4b74      	ldr	r3, [pc, #464]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c2a:	0919      	lsrs	r1, r3, #4
 8003c2c:	4b72      	ldr	r3, [pc, #456]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	6103      	str	r3, [r0, #16]
 8003c34:	e005      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003c36:	4a6e      	ldr	r2, [pc, #440]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003c38:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c40:	6113      	str	r3, [r2, #16]
 8003c42:	496b      	ldr	r1, [pc, #428]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	4313      	orrs	r3, r2
 8003c54:	670b      	str	r3, [r1, #112]	; 0x70
 8003c56:	e008      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x732>
      }
      else
      {
        /* set overall return value */
        status |= ret;
 8003c58:	7dba      	ldrb	r2, [r7, #22]
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	75bb      	strb	r3, [r7, #22]
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x732>
      }
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003c62:	7dba      	ldrb	r2, [r7, #22]
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07f      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c7a:	2b28      	cmp	r3, #40	; 0x28
 8003c7c:	d866      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x814>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003d53 	.word	0x08003d53
 8003c88:	08003d4d 	.word	0x08003d4d
 8003c8c:	08003d4d 	.word	0x08003d4d
 8003c90:	08003d4d 	.word	0x08003d4d
 8003c94:	08003d4d 	.word	0x08003d4d
 8003c98:	08003d4d 	.word	0x08003d4d
 8003c9c:	08003d4d 	.word	0x08003d4d
 8003ca0:	08003d4d 	.word	0x08003d4d
 8003ca4:	08003d29 	.word	0x08003d29
 8003ca8:	08003d4d 	.word	0x08003d4d
 8003cac:	08003d4d 	.word	0x08003d4d
 8003cb0:	08003d4d 	.word	0x08003d4d
 8003cb4:	08003d4d 	.word	0x08003d4d
 8003cb8:	08003d4d 	.word	0x08003d4d
 8003cbc:	08003d4d 	.word	0x08003d4d
 8003cc0:	08003d4d 	.word	0x08003d4d
 8003cc4:	08003d3b 	.word	0x08003d3b
 8003cc8:	08003d4d 	.word	0x08003d4d
 8003ccc:	08003d4d 	.word	0x08003d4d
 8003cd0:	08003d4d 	.word	0x08003d4d
 8003cd4:	08003d4d 	.word	0x08003d4d
 8003cd8:	08003d4d 	.word	0x08003d4d
 8003cdc:	08003d4d 	.word	0x08003d4d
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003d53 	.word	0x08003d53
 8003ce8:	08003d4d 	.word	0x08003d4d
 8003cec:	08003d4d 	.word	0x08003d4d
 8003cf0:	08003d4d 	.word	0x08003d4d
 8003cf4:	08003d4d 	.word	0x08003d4d
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003d4d 	.word	0x08003d4d
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d53 	.word	0x08003d53
 8003d08:	08003d4d 	.word	0x08003d4d
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d4d 	.word	0x08003d4d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d4d 	.word	0x08003d4d
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08003d53 	.word	0x08003d53
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fdd8 	bl	80048e4 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d38:	e00c      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x81c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3324      	adds	r3, #36	; 0x24
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fe69 	bl	8004a18 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d4a:	e003      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      break;
 8003d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d5a:	4925      	ldr	r1, [pc, #148]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003d6e:	7dba      	ldrb	r2, [r7, #22]
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d040      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d820      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x894>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003dd3 	.word	0x08003dd3
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003dbb 	.word	0x08003dbb
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fd98 	bl	80048e4 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x89c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3324      	adds	r3, #36	; 0x24
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fe29 	bl	8004a18 <RCCEx_PLL3_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d110      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dda:	4905      	ldr	r1, [pc, #20]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f023 0207 	bic.w	r2, r3, #7
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	4313      	orrs	r3, r2
 8003dea:	654b      	str	r3, [r1, #84]	; 0x54
 8003dec:	e00a      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	58024800 	.word	0x58024800
 8003df8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003dfc:	7dba      	ldrb	r2, [r7, #22]
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d03b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d820      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e63 	.word	0x08003e63
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e4b 	.word	0x08003e4b
 8003e2c:	08003e63 	.word	0x08003e63
 8003e30:	08003e63 	.word	0x08003e63
 8003e34:	08003e63 	.word	0x08003e63
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fd50 	bl	80048e4 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e48:	e00c      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x92c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3324      	adds	r3, #36	; 0x24
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fde1 	bl	8004a18 <RCCEx_PLL3_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e60:	e000      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      break;
 8003e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6a:	49b7      	ldr	r1, [pc, #732]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8003e6c:	4bb6      	ldr	r3, [pc, #728]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f023 0207 	bic.w	r2, r3, #7
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e7e:	e003      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003e80:	7dba      	ldrb	r2, [r7, #22]
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d046      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9e:	d01b      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea4:	d805      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d022      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8003eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8003eb0:	e01b      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8003eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebc:	d01c      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8003ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec2:	d01b      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 8003ec4:	e011      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fd09 	bl	80048e4 <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e012      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9c6>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3324      	adds	r3, #36	; 0x24
 8003edc:	2102      	movs	r1, #2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fd9a 	bl	8004a18 <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e009      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
      break;
 8003eee:	e006      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      break;
 8003efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f04:	4990      	ldr	r1, [pc, #576]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8003f06:	4b90      	ldr	r3, [pc, #576]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	4313      	orrs	r3, r2
 8003f16:	654b      	str	r3, [r1, #84]	; 0x54
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003f1a:	7dba      	ldrb	r2, [r7, #22]
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d046      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d01b      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3e:	d805      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa14>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d022      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa52>
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f4a:	e01b      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d01d      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xa56>
 8003f52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f56:	d01c      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8003f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f5c:	d01b      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003f5e:	e011      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fcbc 	bl	80048e4 <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f70:	e012      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fd4d 	bl	8004a18 <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f82:	e009      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      break;
 8003f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f9e:	496a      	ldr	r1, [pc, #424]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xa84>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8003fb4:	7dba      	ldrb	r2, [r7, #22]
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d046      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd2:	d01b      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xad4>
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd8:	d805      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d022      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8003fe4:	e01b      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d01d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003fec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ff0:	d01c      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8003ff2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff6:	d01b      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8003ff8:	e011      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xae6>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fc6f 	bl	80048e4 <RCCEx_PLL2_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800400a:	e012      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xafa>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3324      	adds	r3, #36	; 0x24
 8004010:	2102      	movs	r1, #2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fd00 	bl	8004a18 <RCCEx_PLL3_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800401c:	e009      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xafa>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
      break;
 8004022:	e006      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8004024:	bf00      	nop
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8004028:	bf00      	nop
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xafa>
      break;
 8004030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004038:	4943      	ldr	r1, [pc, #268]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800403a:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004048:	4313      	orrs	r3, r2
 800404a:	658b      	str	r3, [r1, #88]	; 0x58
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800404e:	7dba      	ldrb	r2, [r7, #22]
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	4313      	orrs	r3, r2
 8004054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d10b      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
    {
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3324      	adds	r3, #36	; 0x24
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fccf 	bl	8004a18 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	7dbb      	ldrb	r3, [r7, #22]
 8004080:	4313      	orrs	r3, r2
 8004082:	75bb      	strb	r3, [r7, #22]
 8004084:	e009      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004086:	4930      	ldr	r1, [pc, #192]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004096:	4313      	orrs	r3, r2
 8004098:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d10b      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
    {
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3324      	adds	r3, #36	; 0x24
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fcad 	bl	8004a18 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	7dbb      	ldrb	r3, [r7, #22]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	75bb      	strb	r3, [r7, #22]
 80040c8:	e009      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ca:	491f      	ldr	r1, [pc, #124]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80040cc:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	4313      	orrs	r3, r2
 80040dc:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d034      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d00d      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80040f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040fa:	d016      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xbec>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fbec 	bl	80048e4 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004110:	e00c      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xbf4>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fc7d 	bl	8004a18 <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004122:	e003      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
      break;
 800412a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004132:	4905      	ldr	r1, [pc, #20]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc10>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004142:	4313      	orrs	r3, r2
 8004144:	658b      	str	r3, [r1, #88]	; 0x58
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 8004148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status |= ret;
 800414c:	7dba      	ldrb	r2, [r7, #22]
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	4313      	orrs	r3, r2
 8004152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d031      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416a:	d00c      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800416c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004170:	d015      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004176:	d10f      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004178:	4a7c      	ldr	r2, [pc, #496]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800417a:	4b7c      	ldr	r3, [pc, #496]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004184:	e00c      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3324      	adds	r3, #36	; 0x24
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fc43 	bl	8004a18 <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004196:	e003      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      break;
 800419e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a6:	4971      	ldr	r1, [pc, #452]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80041a8:	4b70      	ldr	r3, [pc, #448]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	4313      	orrs	r3, r2
 80041b8:	654b      	str	r3, [r1, #84]	; 0x54
 80041ba:	e003      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80041bc:	7dba      	ldrb	r2, [r7, #22]
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02b      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d007      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 80041de:	e00f      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e0:	4a62      	ldr	r2, [pc, #392]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041ec:	e00b      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fb75 	bl	80048e4 <RCCEx_PLL2_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800420c:	4957      	ldr	r1, [pc, #348]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800420e:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	4313      	orrs	r3, r2
 800421c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800421e:	e003      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 8004220:	7dba      	ldrb	r2, [r7, #22]
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	4313      	orrs	r3, r2
 8004226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3324      	adds	r3, #36	; 0x24
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fbec 	bl	8004a18 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	7dbb      	ldrb	r3, [r7, #22]
 8004246:	4313      	orrs	r3, r2
 8004248:	75bb      	strb	r3, [r7, #22]
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d031      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425e:	d00c      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004264:	d802      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d011      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800426a:	e00d      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d00f      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d00e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4a3c      	ldr	r2, [pc, #240]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004286:	e007      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e004      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8004296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800429e:	4933      	ldr	r1, [pc, #204]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80042a0:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ac:	4313      	orrs	r3, r2
 80042ae:	654b      	str	r3, [r1, #84]	; 0x54
 80042b0:	e003      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xd82>
    }
    else
    {
      /* set overall return value */
      status |= ret;
 80042b2:	7dba      	ldrb	r2, [r7, #22]
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042c6:	4929      	ldr	r1, [pc, #164]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80042c8:	4b28      	ldr	r3, [pc, #160]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4313      	orrs	r3, r2
 80042d6:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042e4:	4921      	ldr	r1, [pc, #132]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80042e6:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004304:	4919      	ldr	r1, [pc, #100]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004306:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	4313      	orrs	r3, r2
 8004314:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800432c:	6113      	str	r3, [r2, #16]
 800432e:	490f      	ldr	r1, [pc, #60]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800433a:	4313      	orrs	r3, r2
 800433c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	da08      	bge.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004346:	4909      	ldr	r1, [pc, #36]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0xe34>)
 800434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	4313      	orrs	r3, r2
 8004356:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004358:	7dbb      	ldrb	r3, [r7, #22]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
  {
    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
  }
  return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	58024400 	.word	0x58024400

08004370 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8004376:	f7ff f873 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 800437a:	4601      	mov	r1, r0
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCCEx_GetD3PCLK1Freq+0x3c>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004384:	2310      	movs	r3, #16
 8004386:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	603b      	str	r3, [r7, #0]
  return(result);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <HAL_RCCEx_GetD3PCLK1Freq+0x40>)
 800439c:	5cd3      	ldrb	r3, [r2, r3]
 800439e:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	0800e290 	.word	0x0800e290

080043b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t  pllsource = 0, pll2m = 1 ,  pll2fracen = 0, hsivalue = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  float fracn2 =0 ,pll2vco = 0;
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043d8:	4b8d      	ldr	r3, [pc, #564]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80043e2:	4b8b      	ldr	r3, [pc, #556]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	0b1b      	lsrs	r3, r3, #12
 80043e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ec:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80043ee:	4b88      	ldr	r3, [pc, #544]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	613b      	str	r3, [r7, #16]
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043f8:	4b85      	ldr	r3, [pc, #532]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004410:	edc7 7a02 	vstr	s15, [r7, #8]

  switch (pllsource)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d055      	beq.n	80044c6 <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 800441a:	2b01      	cmp	r3, #1
 800441c:	d302      	bcc.n	8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800441e:	2b02      	cmp	r3, #2
 8004420:	d072      	beq.n	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8004422:	e092      	b.n	800454a <HAL_RCCEx_GetPLL2ClockFreq+0x196>
  {

  case 0x00:  /* HSI used as PLL clock source */

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004424:	4b7a      	ldr	r3, [pc, #488]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d029      	beq.n	8004484 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004430:	4b77      	ldr	r3, [pc, #476]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	4a76      	ldr	r2, [pc, #472]	; (8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	60fb      	str	r3, [r7, #12]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004452:	4b6f      	ldr	r3, [pc, #444]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a02 	vldr	s12, [r7, #8]
 8004466:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
    }
    break;
 8004482:	e083      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004484:	4a63      	ldr	r2, [pc, #396]	; (8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x260>)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	ee07 3a90 	vmov	s15, r3
 8004490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004494:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a8:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 80044ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80044c4:	e062      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  case 0x01:  /* HSI used as PLL clock source */
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80044c6:	4a55      	ldr	r2, [pc, #340]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044d6:	4b4e      	ldr	r3, [pc, #312]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ea:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004506:	e041      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  case 0x02:  /* HSE used as PLL clock source */
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8004508:	4a45      	ldr	r2, [pc, #276]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x26c>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	ee07 3a90 	vmov	s15, r3
 8004514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004518:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004528:	ed97 6a02 	vldr	s12, [r7, #8]
 800452c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004548:	e020      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

  default:
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800454a:	4a34      	ldr	r2, [pc, #208]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x268>)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x264>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 800458a:	bf00      	nop
  }
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 800458c:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004596:	3301      	adds	r3, #1
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ac:	ee17 2a90 	vmov	r2, s15
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 80045b4:	4b16      	ldr	r3, [pc, #88]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045be:	3301      	adds	r3, #1
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d4:	ee17 2a90 	vmov	r2, s15
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>)
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	0e1b      	lsrs	r3, r3, #24
 80045e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e6:	3301      	adds	r3, #1
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	609a      	str	r2, [r3, #8]


}
 8004604:	bf00      	nop
 8004606:	3724      	adds	r7, #36	; 0x24
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	58024400 	.word	0x58024400
 8004614:	03d09000 	.word	0x03d09000
 8004618:	46000000 	.word	0x46000000
 800461c:	003d0900 	.word	0x003d0900
 8004620:	01312d00 	.word	0x01312d00

08004624 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource = 0, pll3m = 1, pll3fracen = 0 , hsivalue =0;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  float fracn3 =0 , pll3vco = 0;
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004648:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004652:	4b8b      	ldr	r3, [pc, #556]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	0d1b      	lsrs	r3, r3, #20
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800465e:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	613b      	str	r3, [r7, #16]
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004668:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004680:	edc7 7a02 	vstr	s15, [r7, #8]
  switch (pllsource)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d055      	beq.n	8004736 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 800468a:	2b01      	cmp	r3, #1
 800468c:	d302      	bcc.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800468e:	2b02      	cmp	r3, #2
 8004690:	d072      	beq.n	8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8004692:	e092      	b.n	80047ba <HAL_RCCEx_GetPLL3ClockFreq+0x196>
  {
  case 0x00:  /* HSI used as PLL clock source */

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004694:	4b7a      	ldr	r3, [pc, #488]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d029      	beq.n	80046f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
    {
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046a0:	4b77      	ldr	r3, [pc, #476]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a76      	ldr	r2, [pc, #472]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	60fb      	str	r3, [r7, #12]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c2:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d6:	eddf 5a6c 	vldr	s11, [pc, #432]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    else
    {
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
    }
    break;
 80046f2:	e083      	b.n	80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80046f4:	4a63      	ldr	r2, [pc, #396]	; (8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x260>)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004704:	4b5e      	ldr	r3, [pc, #376]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004714:	ed97 6a02 	vldr	s12, [r7, #8]
 8004718:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 800471c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004730:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004734:	e062      	b.n	80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
  case 0x01:  /* HSI used as PLL clock source */
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004736:	4a55      	ldr	r2, [pc, #340]	; (800488c <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004746:	4b4e      	ldr	r3, [pc, #312]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a02 	vldr	s12, [r7, #8]
 800475a:	eddf 5a4b 	vldr	s11, [pc, #300]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 8004776:	e041      	b.n	80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

  case 0x02:  /* HSE used as PLL clock source */
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8004778:	4a45      	ldr	r2, [pc, #276]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x26c>)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004788:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004798:	ed97 6a02 	vldr	s12, [r7, #8]
 800479c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 80047a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b4:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80047b8:	e020      	b.n	80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

  default:
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 80047ba:	4a34      	ldr	r2, [pc, #208]	; (800488c <HAL_RCCEx_GetPLL3ClockFreq+0x268>)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	ed97 6a02 	vldr	s12, [r7, #8]
 80047de:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x264>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a07 	vstr	s15, [r7, #28]
    break;
 80047fa:	bf00      	nop
  }
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	0a5b      	lsrs	r3, r3, #9
 8004802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004806:	3301      	adds	r3, #1
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004810:	edd7 6a07 	vldr	s13, [r7, #28]
 8004814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481c:	ee17 2a90 	vmov	r2, s15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482e:	3301      	adds	r3, #1
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004838:	edd7 6a07 	vldr	s13, [r7, #28]
 800483c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004844:	ee17 2a90 	vmov	r2, s15
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>)
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004856:	3301      	adds	r3, #1
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004860:	edd7 6a07 	vldr	s13, [r7, #28]
 8004864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486c:	ee17 2a90 	vmov	r2, s15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	609a      	str	r2, [r3, #8]

}
 8004874:	bf00      	nop
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	58024400 	.word	0x58024400
 8004884:	03d09000 	.word	0x03d09000
 8004888:	46000000 	.word	0x46000000
 800488c:	003d0900 	.word	0x003d0900
 8004890:	01312d00 	.word	0x01312d00

08004894 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800489a:	f7fe fc71 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 800489e:	4601      	mov	r1, r0
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_RCCEx_GetD1SysClockFreq+0x44>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80048a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ac:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	603b      	str	r3, [r7, #0]
  return(result);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <HAL_RCCEx_GetD1SysClockFreq+0x48>)
 80048c2:	5cd3      	ldrb	r3, [r2, r3]
 80048c4:	fa21 f303 	lsr.w	r3, r1, r3
 80048c8:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 80048ca:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_RCCEx_GetD1SysClockFreq+0x4c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	58024400 	.word	0x58024400
 80048dc:	0800e290 	.word	0x0800e290
 80048e0:	20000050 	.word	0x20000050

080048e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048f2:	4b48      	ldr	r3, [pc, #288]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d101      	bne.n	8004902 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e083      	b.n	8004a0a <RCCEx_PLL2_Config+0x126>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004902:	4a44      	ldr	r2, [pc, #272]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004904:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800490c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490e:	f7fb fecd 	bl	80006ac <HAL_GetTick>
 8004912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004914:	e008      	b.n	8004928 <RCCEx_PLL2_Config+0x44>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004916:	f7fb fec9 	bl	80006ac <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e070      	b.n	8004a0a <RCCEx_PLL2_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004934:	4937      	ldr	r1, [pc, #220]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	031b      	lsls	r3, r3, #12
 8004944:	4313      	orrs	r3, r2
 8004946:	628b      	str	r3, [r1, #40]	; 0x28
 8004948:	4932      	ldr	r1, [pc, #200]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	3b01      	subs	r3, #1
 800495a:	025b      	lsls	r3, r3, #9
 800495c:	b29b      	uxth	r3, r3
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	3b01      	subs	r3, #1
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	3b01      	subs	r3, #1
 8004974:	061b      	lsls	r3, r3, #24
 8004976:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800497a:	4313      	orrs	r3, r2
 800497c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800497e:	4925      	ldr	r1, [pc, #148]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004990:	4920      	ldr	r1, [pc, #128]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f023 0220 	bic.w	r2, r3, #32
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLL2_Config+0xd2>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049aa:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b4:	e00f      	b.n	80049d6 <RCCEx_PLL2_Config+0xf2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <RCCEx_PLL2_Config+0xe6>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c8:	e005      	b.n	80049d6 <RCCEx_PLL2_Config+0xf2>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ca:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049d6:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fb fe63 	bl	80006ac <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80049e8:	e008      	b.n	80049fc <RCCEx_PLL2_Config+0x118>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049ea:	f7fb fe5f 	bl	80006ac <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <RCCEx_PLL2_Config+0x118>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e006      	b.n	8004a0a <RCCEx_PLL2_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <RCCEx_PLL2_Config+0x130>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <RCCEx_PLL2_Config+0x106>
    }

  }


  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400

08004a18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a26:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d101      	bne.n	8004a36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e083      	b.n	8004b3e <RCCEx_PLL3_Config+0x126>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a36:	4a44      	ldr	r2, [pc, #272]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a38:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fb fe33 	bl	80006ac <HAL_GetTick>
 8004a46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004a48:	e008      	b.n	8004a5c <RCCEx_PLL3_Config+0x44>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a4a:	f7fb fe2f 	bl	80006ac <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e070      	b.n	8004b3e <RCCEx_PLL3_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a68:	4937      	ldr	r1, [pc, #220]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a6a:	4b37      	ldr	r3, [pc, #220]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	051b      	lsls	r3, r3, #20
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a7c:	4932      	ldr	r1, [pc, #200]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	025b      	lsls	r3, r3, #9
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ab2:	4925      	ldr	r1, [pc, #148]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ac4:	4920      	ldr	r1, [pc, #128]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <RCCEx_PLL3_Config+0xd2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ae8:	e00f      	b.n	8004b0a <RCCEx_PLL3_Config+0xf2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d106      	bne.n	8004afe <RCCEx_PLL3_Config+0xe6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004afc:	e005      	b.n	8004b0a <RCCEx_PLL3_Config+0xf2>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b0a:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004b0c:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b16:	f7fb fdc9 	bl	80006ac <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <RCCEx_PLL3_Config+0x118>
    {
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b1e:	f7fb fdc5 	bl	80006ac <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <RCCEx_PLL3_Config+0x118>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e006      	b.n	8004b3e <RCCEx_PLL3_Config+0x126>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <RCCEx_PLL3_Config+0x130>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <RCCEx_PLL3_Config+0x106>
    }

  }


  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400

08004b4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
  
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_SPI_Init+0x1a>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0e0      	b.n	8004d28 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */
  
  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6f      	ldr	r2, [pc, #444]	; (8004d30 <HAL_SPI_Init+0x1e4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00f      	beq.n	8004b96 <HAL_SPI_Init+0x4a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6e      	ldr	r2, [pc, #440]	; (8004d34 <HAL_SPI_Init+0x1e8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00a      	beq.n	8004b96 <HAL_SPI_Init+0x4a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6c      	ldr	r2, [pc, #432]	; (8004d38 <HAL_SPI_Init+0x1ec>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d005      	beq.n	8004b96 <HAL_SPI_Init+0x4a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d901      	bls.n	8004b96 <HAL_SPI_Init+0x4a>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0c8      	b.n	8004d28 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f001 fa44 	bl	8006024 <SPI_GetPacketSize>
 8004b9c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a63      	ldr	r2, [pc, #396]	; (8004d30 <HAL_SPI_Init+0x1e4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_SPI_Init+0x76>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a61      	ldr	r2, [pc, #388]	; (8004d34 <HAL_SPI_Init+0x1e8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_SPI_Init+0x76>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a60      	ldr	r2, [pc, #384]	; (8004d38 <HAL_SPI_Init+0x1ec>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Init+0x76>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d811      	bhi.n	8004be6 <HAL_SPI_Init+0x9a>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8004bc6:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_SPI_Init+0x1e4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d009      	beq.n	8004be0 <HAL_SPI_Init+0x94>
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a58      	ldr	r2, [pc, #352]	; (8004d34 <HAL_SPI_Init+0x1e8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_SPI_Init+0x94>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <HAL_SPI_Init+0x1ec>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d104      	bne.n	8004bea <HAL_SPI_Init+0x9e>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d901      	bls.n	8004bea <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e09e      	b.n	8004d28 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_SPI_Init+0xb8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f009 f89c 	bl	800dd3c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
 
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c24:	d110      	bne.n	8004c48 <HAL_SPI_Init+0xfc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2e:	d10b      	bne.n	8004c48 <HAL_SPI_Init+0xfc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_SPI_Init+0xfc>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c46:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	69d1      	ldr	r1, [r2, #28]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c54:	4311      	orrs	r1, r2
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68d2      	ldr	r2, [r2, #12]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c74:	4311      	orrs	r1, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c7a:	4311      	orrs	r1, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6992      	ldr	r2, [r2, #24]
 8004c80:	4311      	orrs	r1, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6912      	ldr	r2, [r2, #16]
 8004c86:	4311      	orrs	r1, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6952      	ldr	r2, [r2, #20]
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6a12      	ldr	r2, [r2, #32]
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6852      	ldr	r2, [r2, #4]
 8004c98:	4311      	orrs	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6892      	ldr	r2, [r2, #8]
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d113      	bne.n	8004ce4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	6892      	ldr	r2, [r2, #8]
 8004cc6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d12:	430a      	orrs	r2, r1
 8004d14:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40013000 	.word	0x40013000
 8004d34:	40003800 	.word	0x40003800
 8004d38:	40003c00 	.word	0x40003c00

08004d3c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	74fb      	strb	r3, [r7, #19]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Transmit+0x26>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e1db      	b.n	800511a <HAL_SPI_Transmit+0x3de>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6a:	f7fb fc9f 	bl	80006ac <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d007      	beq.n	8004d8c <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	e1c6      	b.n	800511a <HAL_SPI_Transmit+0x3de>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0x5c>
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d107      	bne.n	8004da8 <HAL_SPI_Transmit+0x6c>
  {
    errorcode = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	e1b8      	b.n	800511a <HAL_SPI_Transmit+0x3de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2203      	movs	r2, #3
 8004dac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004df8:	d107      	bne.n	8004e0a <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the number if data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	4b97      	ldr	r3, [pc, #604]	; (8005074 <HAL_SPI_Transmit+0x338>)
 8004e16:	400b      	ands	r3, r1
 8004e18:	88f9      	ldrh	r1, [r7, #6]
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e36:	d107      	bne.n	8004e48 <HAL_SPI_Transmit+0x10c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b0f      	cmp	r3, #15
 8004e4e:	d947      	bls.n	8004ee0 <HAL_SPI_Transmit+0x1a4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e50:	e03f      	b.n	8004ed2 <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d114      	bne.n	8004e8a <HAL_SPI_Transmit+0x14e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004e88:	e023      	b.n	8004ed2 <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_SPI_Transmit+0x16c>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d01c      	beq.n	8004ed2 <HAL_SPI_Transmit+0x196>
 8004e98:	f7fb fc08 	bl	80006ac <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d314      	bcc.n	8004ed2 <HAL_SPI_Transmit+0x196>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 ffed 	bl	8005e88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e123      	b.n	800511a <HAL_SPI_Transmit+0x3de>
    while (hspi->TxXferCount > 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1b9      	bne.n	8004e52 <HAL_SPI_Transmit+0x116>
 8004ede:	e0f6      	b.n	80050ce <HAL_SPI_Transmit+0x392>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b07      	cmp	r3, #7
 8004ee6:	f240 80eb 	bls.w	80050c0 <HAL_SPI_Transmit+0x384>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eea:	e05f      	b.n	8004fac <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d134      	bne.n	8004f64 <HAL_SPI_Transmit+0x228>
      {
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d918      	bls.n	8004f38 <HAL_SPI_Transmit+0x1fc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_SPI_Transmit+0x1fc>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b02      	subs	r3, #2
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004f36:	e039      	b.n	8004fac <HAL_SPI_Transmit+0x270>
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f42:	8812      	ldrh	r2, [r2, #0]
 8004f44:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	1c9a      	adds	r2, r3, #2
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004f62:	e023      	b.n	8004fac <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_SPI_Transmit+0x246>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d01c      	beq.n	8004fac <HAL_SPI_Transmit+0x270>
 8004f72:	f7fb fb9b 	bl	80006ac <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d314      	bcc.n	8004fac <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 ff80 	bl	8005e88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0b6      	b.n	800511a <HAL_SPI_Transmit+0x3de>
    while (hspi->TxXferCount > 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d199      	bne.n	8004eec <HAL_SPI_Transmit+0x1b0>
 8004fb8:	e089      	b.n	80050ce <HAL_SPI_Transmit+0x392>
  else
  {
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d157      	bne.n	8005078 <HAL_SPI_Transmit+0x33c>
      {
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d918      	bls.n	8005006 <HAL_SPI_Transmit+0x2ca>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d914      	bls.n	8005006 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=4;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005004:	e05c      	b.n	80050c0 <HAL_SPI_Transmit+0x384>
        }
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	d919      	bls.n	8005046 <HAL_SPI_Transmit+0x30a>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d015      	beq.n	8005046 <HAL_SPI_Transmit+0x30a>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3320      	adds	r3, #32
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005024:	8812      	ldrh	r2, [r2, #0]
 8005026:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	1c9a      	adds	r2, r3, #2
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b02      	subs	r3, #2
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005044:	e03c      	b.n	80050c0 <HAL_SPI_Transmit+0x384>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3320      	adds	r3, #32
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005070:	e026      	b.n	80050c0 <HAL_SPI_Transmit+0x384>
 8005072:	bf00      	nop
 8005074:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <HAL_SPI_Transmit+0x35a>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d01c      	beq.n	80050c0 <HAL_SPI_Transmit+0x384>
 8005086:	f7fb fb11 	bl	80006ac <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d314      	bcc.n	80050c0 <HAL_SPI_Transmit+0x384>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fef6 	bl	8005e88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e02c      	b.n	800511a <HAL_SPI_Transmit+0x3de>
    while (hspi->TxXferCount > 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f47f af76 	bne.w	8004fba <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2108      	movs	r1, #8
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 ff75 	bl	8005fc8 <SPI_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_SPI_Transmit+0x3b8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fec7 	bl	8005e88 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_SPI_Transmit+0x3dc>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_SPI_Transmit+0x3de>
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop

08005124 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	74fb      	strb	r3, [r7, #19]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d112      	bne.n	800516c <HAL_SPI_Receive+0x48>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10e      	bne.n	800516c <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2204      	movs	r2, #4
 8005152:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f9d2 	bl	800550c <HAL_SPI_TransmitReceive>
 8005168:	4603      	mov	r3, r0
 800516a:	e1cb      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_SPI_Receive+0x56>
 8005176:	2302      	movs	r3, #2
 8005178:	e1c4      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005182:	f7fb fa93 	bl	80006ac <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d007      	beq.n	80051a4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005194:	2302      	movs	r3, #2
 8005196:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	e1af      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
  }

  if ((pData == NULL) || (Size == 0U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Receive+0x8c>
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d107      	bne.n	80051c0 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	e1a1      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2204      	movs	r2, #4
 80051c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	88fa      	ldrh	r2, [r7, #6]
 80051e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005210:	d107      	bne.n	8005222 <HAL_SPI_Receive+0xfe>
  {
    SPI_1LINE_RX(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* Set the number if data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	4b95      	ldr	r3, [pc, #596]	; (8005484 <HAL_SPI_Receive+0x360>)
 800522e:	400b      	ands	r3, r1
 8005230:	88f9      	ldrh	r1, [r7, #6]
 8005232:	430b      	orrs	r3, r1
 8005234:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524e:	d107      	bne.n	8005260 <HAL_SPI_Receive+0x13c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d948      	bls.n	80052fa <HAL_SPI_Receive+0x1d6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005268:	e040      	b.n	80052ec <HAL_SPI_Receive+0x1c8>
    {
      /* Check the RXWNE/EOT flag */
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	f248 0308 	movw	r3, #32776	; 0x8008
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <HAL_SPI_Receive+0x180>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005284:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052a2:	e023      	b.n	80052ec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HAL_SPI_Receive+0x19e>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d01c      	beq.n	80052ec <HAL_SPI_Receive+0x1c8>
 80052b2:	f7fb f9fb 	bl	80006ac <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d314      	bcc.n	80052ec <HAL_SPI_Receive+0x1c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fde0 	bl	8005e88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e10b      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
    while (hspi->RxXferCount > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1b8      	bne.n	800526a <HAL_SPI_Receive+0x146>
 80052f8:	e0f1      	b.n	80054de <HAL_SPI_Receive+0x3ba>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b07      	cmp	r3, #7
 8005300:	f240 80e6 	bls.w	80054d0 <HAL_SPI_Receive+0x3ac>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005304:	e05d      	b.n	80053c2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d032      	beq.n	800537a <HAL_SPI_Receive+0x256>
      {
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d014      	beq.n	800534c <HAL_SPI_Receive+0x228>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800532c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount-=2;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b02      	subs	r3, #2
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800534a:	e03a      	b.n	80053c2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	3230      	adds	r2, #48	; 0x30
 8005356:	8812      	ldrh	r2, [r2, #0]
 8005358:	b292      	uxth	r2, r2
 800535a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005360:	1c9a      	adds	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005378:	e023      	b.n	80053c2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <HAL_SPI_Receive+0x274>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d01c      	beq.n	80053c2 <HAL_SPI_Receive+0x29e>
 8005388:	f7fb f990 	bl	80006ac <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	1ad2      	subs	r2, r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d314      	bcc.n	80053c2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fd75 	bl	8005e88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0a0      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
    while (hspi->RxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d19b      	bne.n	8005306 <HAL_SPI_Receive+0x1e2>
 80053ce:	e086      	b.n	80054de <HAL_SPI_Receive+0x3ba>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXWNE/FRLVL flag */
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d054      	beq.n	8005488 <HAL_SPI_Receive+0x364>
      {
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d014      	beq.n	8005416 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fc:	1d1a      	adds	r2, r3, #4
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount-=4;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b04      	subs	r3, #4
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005414:	e05c      	b.n	80054d0 <HAL_SPI_Receive+0x3ac>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005424:	d916      	bls.n	8005454 <HAL_SPI_Receive+0x330>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	3230      	adds	r2, #48	; 0x30
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	b292      	uxth	r2, r2
 8005434:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543a:	1c9a      	adds	r2, r3, #2
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount-=2;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b02      	subs	r3, #2
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005452:	e03d      	b.n	80054d0 <HAL_SPI_Receive+0x3ac>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	3230      	adds	r2, #48	; 0x30
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005480:	e026      	b.n	80054d0 <HAL_SPI_Receive+0x3ac>
 8005482:	bf00      	nop
 8005484:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_SPI_Receive+0x382>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d01c      	beq.n	80054d0 <HAL_SPI_Receive+0x3ac>
 8005496:	f7fb f909 	bl	80006ac <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d314      	bcc.n	80054d0 <HAL_SPI_Receive+0x3ac>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fcee 	bl	8005e88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e019      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
    while (hspi->RxXferCount > 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f47f af79 	bne.w	80053d0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fcd2 	bl	8005e88 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_SPI_Receive+0x3de>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_SPI_Receive+0x3e0>
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	807b      	strh	r3, [r7, #2]
  uint32_t tickstart = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	74fb      	strb	r3, [r7, #19]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x24>
 800552c:	2302      	movs	r3, #2
 800552e:	e2c0      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fb f8b8 	bl	80006ac <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	d016      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x6c>
        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX))))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 800554e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005552:	d109      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x5c>
        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX))))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x5c>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b04      	cmp	r3, #4
 8005566:	d007      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x6c>
  {
    errorcode = HAL_BUSY;
 8005568:	2302      	movs	r3, #2
 800556a:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	e29c      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_SPI_TransmitReceive+0x7e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_TransmitReceive+0x7e>
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	74fb      	strb	r3, [r7, #19]
    __HAL_UNLOCK(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005596:	7cfb      	ldrb	r3, [r7, #19]
 8005598:	e28b      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d003      	beq.n	80055ae <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2205      	movs	r2, #5
 80055aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	887a      	ldrh	r2, [r7, #2]
 80055d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	887a      	ldrh	r2, [r7, #2]
 80055de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number if data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	4b9b      	ldr	r3, [pc, #620]	; (8005868 <HAL_SPI_TransmitReceive+0x35c>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	8879      	ldrh	r1, [r7, #2]
 80055fe:	430b      	orrs	r3, r1
 8005600:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561a:	d107      	bne.n	800562c <HAL_SPI_TransmitReceive+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d971      	bls.n	8005718 <HAL_SPI_TransmitReceive+0x20c>
  {
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005634:	e063      	b.n	80056fe <HAL_SPI_TransmitReceive+0x1f2>
    {
      /* Check TXE flag */
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01a      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x16c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d113      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x16c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }

      /* Check RXWNE/EOT flag */
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x1b0>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	f248 0308 	movw	r3, #32776	; 0x8008
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d013      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x1b0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800569e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	1d1a      	adds	r2, r3, #4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d01c      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x1f2>
 80056c4:	f7fa fff2 	bl	80006ac <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	1ad2      	subs	r2, r2, r3
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d314      	bcc.n	80056fe <HAL_SPI_TransmitReceive+0x1f2>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fbd7 	bl	8005e88 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e1d9      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d195      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x12a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d18f      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x12a>
 8005716:	e1a6      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x55a>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b07      	cmp	r3, #7
 800571e:	f240 8194 	bls.w	8005a4a <HAL_SPI_TransmitReceive+0x53e>
  {
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005722:	e0a3      	b.n	800586c <HAL_SPI_TransmitReceive+0x360>
    {
      /* Check TXE flag */
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d03a      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x29a>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	d133      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x29a>
      {
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d918      	bls.n	800577c <HAL_SPI_TransmitReceive+0x270>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <HAL_SPI_TransmitReceive+0x270>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	1d1a      	adds	r2, r3, #4
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b02      	subs	r3, #2
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800577a:	e014      	b.n	80057a6 <HAL_SPI_TransmitReceive+0x29a>
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3320      	adds	r3, #32
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005786:	8812      	ldrh	r2, [r2, #0]
 8005788:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        }
      }

      /* Check RXWNE/FRLVL flag */
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d038      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x318>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d031      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x318>
      {
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d014      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x2ec>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount-=2;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b02      	subs	r3, #2
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057f6:	e015      	b.n	8005824 <HAL_SPI_TransmitReceive+0x318>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	3230      	adds	r2, #48	; 0x30
 8005802:	8812      	ldrh	r2, [r2, #0]
 8005804:	b292      	uxth	r2, r2
 8005806:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        }
      }

      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d01f      	beq.n	800586c <HAL_SPI_TransmitReceive+0x360>
 800582c:	f7fa ff3e 	bl	80006ac <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad2      	subs	r2, r2, r3
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	429a      	cmp	r2, r3
 800583a:	d317      	bcc.n	800586c <HAL_SPI_TransmitReceive+0x360>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fb23 	bl	8005e88 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e125      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
 8005866:	bf00      	nop
 8005868:	ffff0000 	.word	0xffff0000
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f af55 	bne.w	8005724 <HAL_SPI_TransmitReceive+0x218>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	f47f af4e 	bne.w	8005724 <HAL_SPI_TransmitReceive+0x218>
 8005888:	e0ed      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x55a>
  else
  {
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d05a      	beq.n	800594c <HAL_SPI_TransmitReceive+0x440>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d153      	bne.n	800594c <HAL_SPI_TransmitReceive+0x440>
      {
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d918      	bls.n	80058e2 <HAL_SPI_TransmitReceive+0x3d6>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d914      	bls.n	80058e2 <HAL_SPI_TransmitReceive+0x3d6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c8:	1d1a      	adds	r2, r3, #4
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=4;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b04      	subs	r3, #4
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058e0:	e034      	b.n	800594c <HAL_SPI_TransmitReceive+0x440>
        }
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d919      	bls.n	8005922 <HAL_SPI_TransmitReceive+0x416>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <HAL_SPI_TransmitReceive+0x416>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3320      	adds	r3, #32
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005900:	8812      	ldrh	r2, [r2, #0]
 8005902:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005908:	1c9a      	adds	r2, r3, #2
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount-=2;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b02      	subs	r3, #2
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005920:	e014      	b.n	800594c <HAL_SPI_TransmitReceive+0x440>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3320      	adds	r3, #32
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800592c:	7812      	ldrb	r2, [r2, #0]
 800592e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d057      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x4fc>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d050      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x4fc>
      {
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d014      	beq.n	800599e <HAL_SPI_TransmitReceive+0x492>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800597e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount-=4;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b04      	subs	r3, #4
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800599c:	e034      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x4fc>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80059a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ac:	d916      	bls.n	80059dc <HAL_SPI_TransmitReceive+0x4d0>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	3230      	adds	r2, #48	; 0x30
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	b292      	uxth	r2, r2
 80059bc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c2:	1c9a      	adds	r2, r3, #2
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount-=2;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b02      	subs	r3, #2
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059da:	e015      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x4fc>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	3230      	adds	r2, #48	; 0x30
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        }
      }

      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d01c      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x53e>
 8005a10:	f7fa fe4c 	bl	80006ac <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad2      	subs	r2, r2, r3
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d314      	bcc.n	8005a4a <HAL_SPI_TransmitReceive+0x53e>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fa31 	bl	8005e88 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e033      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f af19 	bne.w	800588a <HAL_SPI_TransmitReceive+0x37e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af12 	bne.w	800588a <HAL_SPI_TransmitReceive+0x37e>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2108      	movs	r1, #8
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 faa9 	bl	8005fc8 <SPI_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x580>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a82:	f043 0220 	orr.w	r2, r3, #32
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f9fb 	bl	8005e88 <SPI_CloseTransfer>

       /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x5a4>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x5a6>
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	61bb      	str	r3, [r7, #24]
  uint32_t itflag   = hspi->Instance->SR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	617b      	str	r3, [r7, #20]
  uint32_t trigger  = itsource & itflag;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60fb      	str	r3, [r7, #12]
  uint32_t handled  = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]

  HAL_SPI_StateTypeDef State = hspi->State;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005aee:	72fb      	strb	r3, [r7, #11]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <HAL_SPI_IRQHandler+0x54>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_SPI_IRQHandler+0x54>
  {
    hspi->RxISR(hspi);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
    handled = 1;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <HAL_SPI_IRQHandler+0x74>
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_SPI_IRQHandler+0x74>
  {
    hspi->TxISR(hspi);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
    handled = 1;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]
  }

  if (handled != 0)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 815a 	bne.w	8005dec <HAL_SPI_IRQHandler+0x330>
    return;
  
  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80a1 	beq.w	8005c86 <HAL_SPI_IRQHandler+0x1ca>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	6992      	ldr	r2, [r2, #24]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	6992      	ldr	r2, [r2, #24]
 8005b5e:	f042 0210 	orr.w	r2, r2, #16
 8005b62:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	6992      	ldr	r2, [r2, #24]
 8005b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b72:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	6912      	ldr	r2, [r2, #16]
 8005b7e:	f022 0208 	bic.w	r2, r2, #8
 8005b82:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00f      	beq.n	8005bae <HAL_SPI_IRQHandler+0xf2>
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d004      	beq.n	8005b9e <HAL_SPI_IRQHandler+0xe2>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_SPI_IRQHandler+0xf2>
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d05a      	beq.n	8005c5a <HAL_SPI_IRQHandler+0x19e>
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d155      	bne.n	8005c5a <HAL_SPI_IRQHandler+0x19e>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d13e      	bne.n	8005c3a <HAL_SPI_IRQHandler+0x17e>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0)
 8005bbc:	e037      	b.n	8005c2e <HAL_SPI_IRQHandler+0x172>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b0f      	cmp	r3, #15
 8005bc4:	d90b      	bls.n	8005bde <HAL_SPI_IRQHandler+0x122>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bd0:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64
 8005bdc:	e01e      	b.n	8005c1c <HAL_SPI_IRQHandler+0x160>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	d90d      	bls.n	8005c02 <HAL_SPI_IRQHandler+0x146>
          {
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	3230      	adds	r2, #48	; 0x30
 8005bf0:	8812      	ldrh	r2, [r2, #0]
 8005bf2:	b292      	uxth	r2, r2
 8005bf4:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	665a      	str	r2, [r3, #100]	; 0x64
 8005c00:	e00c      	b.n	8005c1c <HAL_SPI_IRQHandler+0x160>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	3230      	adds	r2, #48	; 0x30
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          hspi->RxXferCount--;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1c1      	bne.n	8005bbe <HAL_SPI_IRQHandler+0x102>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f924 	bl	8005e88 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_SPI_IRQHandler+0x19e>
      {
        HAL_SPI_ErrorCallback(hspi);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8f4 	bl	8005e40 <HAL_SPI_ErrorCallback>
        return;
 8005c58:	e0cd      	b.n	8005df6 <HAL_SPI_IRQHandler+0x33a>
      }
    }

    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d103      	bne.n	8005c68 <HAL_SPI_IRQHandler+0x1ac>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8e3 	bl	8005e2c <HAL_SPI_TxRxCpltCallback>
    }
    else if (State == HAL_SPI_STATE_BUSY_TX)
    {
      HAL_SPI_TxCpltCallback(hspi);
    }
    return;
 8005c66:	e0c3      	b.n	8005df0 <HAL_SPI_IRQHandler+0x334>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005c68:	7afb      	ldrb	r3, [r7, #11]
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d103      	bne.n	8005c76 <HAL_SPI_IRQHandler+0x1ba>
      HAL_SPI_RxCpltCallback(hspi);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8d2 	bl	8005e18 <HAL_SPI_RxCpltCallback>
    return;
 8005c74:	e0bc      	b.n	8005df0 <HAL_SPI_IRQHandler+0x334>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	f040 80b9 	bne.w	8005df0 <HAL_SPI_IRQHandler+0x334>
      HAL_SPI_TxCpltCallback(hspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f8c0 	bl	8005e04 <HAL_SPI_TxCpltCallback>
    return;
 8005c84:	e0b4      	b.n	8005df0 <HAL_SPI_IRQHandler+0x334>
  }

  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <HAL_SPI_IRQHandler+0x1f0>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_SPI_IRQHandler+0x1f0>
  {
    /* Abort on going, clear SUSP flag to avoid infinit looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	6992      	ldr	r2, [r2, #24]
 8005ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca8:	619a      	str	r2, [r3, #24]
    
    return;
 8005caa:	e0a4      	b.n	8005df6 <HAL_SPI_IRQHandler+0x33a>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 809f 	beq.w	8005df6 <HAL_SPI_IRQHandler+0x33a>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != RESET)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00f      	beq.n	8005ce2 <HAL_SPI_IRQHandler+0x226>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc8:	f043 0204 	orr.w	r2, r3, #4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	6992      	ldr	r2, [r2, #24]
 8005cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != RESET)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00f      	beq.n	8005d0c <HAL_SPI_IRQHandler+0x250>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	6992      	ldr	r2, [r2, #24]
 8005d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != RESET)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <HAL_SPI_IRQHandler+0x27a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	f043 0208 	orr.w	r2, r3, #8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	6992      	ldr	r2, [r2, #24]
 8005d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d34:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != RESET)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00f      	beq.n	8005d60 <HAL_SPI_IRQHandler+0x2a4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	6992      	ldr	r2, [r2, #24]
 8005d5a:	f042 0220 	orr.w	r2, r2, #32
 8005d5e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d044      	beq.n	8005df4 <HAL_SPI_IRQHandler+0x338>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6919      	ldr	r1, [r3, #16]
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_SPI_IRQHandler+0x340>)
 8005d86:	400b      	ands	r3, r1
 8005d88:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d022      	beq.n	8005dda <HAL_SPI_IRQHandler+0x31e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	6892      	ldr	r2, [r2, #8]
 8005d9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005da2:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_SPI_IRQHandler+0x302>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <HAL_SPI_IRQHandler+0x344>)
 8005db2:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fa ff0f 	bl	8000bdc <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_SPI_IRQHandler+0x338>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dca:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <HAL_SPI_IRQHandler+0x344>)
 8005dcc:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fa ff02 	bl	8000bdc <HAL_DMA_Abort_IT>

        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
 8005dd8:	e00c      	b.n	8005df4 <HAL_SPI_IRQHandler+0x338>
        hspi->State = HAL_SPI_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f82c 	bl	8005e40 <HAL_SPI_ErrorCallback>
    return;
 8005de8:	bf00      	nop
 8005dea:	e003      	b.n	8005df4 <HAL_SPI_IRQHandler+0x338>
    return;
 8005dec:	bf00      	nop
 8005dee:	e002      	b.n	8005df6 <HAL_SPI_IRQHandler+0x33a>
    return;
 8005df0:	bf00      	nop
 8005df2:	e000      	b.n	8005df6 <HAL_SPI_IRQHandler+0x33a>
    return;
 8005df4:	bf00      	nop
  }
}
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	fffffc94 	.word	0xfffffc94
 8005e00:	08005e55 	.word	0x08005e55

08005e04 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  HAL_SPI_ErrorCallback(hspi);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff ffe0 	bl	8005e40 <HAL_SPI_ErrorCallback>
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	6992      	ldr	r2, [r2, #24]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	6992      	ldr	r2, [r2, #24]
 8005eb2:	f042 0210 	orr.w	r2, r2, #16
 8005eb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6919      	ldr	r1, [r3, #16]
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <SPI_CloseTransfer+0x13c>)
 8005ed4:	400b      	ands	r3, r1
 8005ed6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	6892      	ldr	r2, [r2, #8]
 8005ee2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005ee6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d014      	beq.n	8005f1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00f      	beq.n	8005f1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	6992      	ldr	r2, [r2, #24]
 8005f18:	f042 0220 	orr.w	r2, r2, #32
 8005f1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d014      	beq.n	8005f54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00f      	beq.n	8005f54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3a:	f043 0204 	orr.w	r2, r3, #4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	6992      	ldr	r2, [r2, #24]
 8005f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00f      	beq.n	8005f7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	6992      	ldr	r2, [r2, #24]
 8005f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8e:	f043 0208 	orr.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	6992      	ldr	r2, [r2, #24]
 8005fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	fffffc94 	.word	0xfffffc94

08005fc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005fd8:	e010      	b.n	8005ffc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d00c      	beq.n	8005ffc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005fe8:	f7fa fb60 	bl	80006ac <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d901      	bls.n	8005ffc <SPI_WaitOnFlagUntilTimeout+0x34>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e00f      	b.n	800601c <SPI_WaitOnFlagUntilTimeout+0x54>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	401a      	ands	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	429a      	cmp	r2, r3
 8006018:	d0df      	beq.n	8005fda <SPI_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3307      	adds	r3, #7
 8006042:	08db      	lsrs	r3, r3, #3
 8006044:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e01d      	b.n	80060a8 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_TIM_Base_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f007 feed 	bl	800de60 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f000 f95b 	bl	8006354 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d122      	bne.n	800610c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d11b      	bne.n	800610c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0202 	mvn.w	r2, #2
 80060dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f90f 	bl	8006316 <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f901 	bl	8006302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f912 	bl	800632a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b04      	cmp	r3, #4
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0204 	mvn.w	r2, #4
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8e5 	bl	8006316 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8d7 	bl	8006302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f8e8 	bl	800632a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b08      	cmp	r3, #8
 800616c:	d122      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b08      	cmp	r3, #8
 800617a:	d11b      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0208 	mvn.w	r2, #8
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2204      	movs	r2, #4
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8bb 	bl	8006316 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8ad 	bl	8006302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f8be 	bl	800632a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b10      	cmp	r3, #16
 80061c0:	d122      	bne.n	8006208 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0210 	mvn.w	r2, #16
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2208      	movs	r2, #8
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f891 	bl	8006316 <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f883 	bl	8006302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f894 	bl	800632a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b01      	cmp	r3, #1
 8006214:	d10e      	bne.n	8006234 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	d107      	bne.n	8006234 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0201 	mvn.w	r2, #1
 800622c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f85d 	bl	80062ee <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623e:	2b80      	cmp	r3, #128	; 0x80
 8006240:	d10e      	bne.n	8006260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624c:	2b80      	cmp	r3, #128	; 0x80
 800624e:	d107      	bne.n	8006260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006258:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f978 	bl	8006550 <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626e:	d10e      	bne.n	800628e <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d107      	bne.n	800628e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006286:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f961 	bl	8006550 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d10e      	bne.n	80062ba <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d107      	bne.n	80062ba <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f842 	bl	800633e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d10e      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d107      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f06f 0220 	mvn.w	r2, #32
 80062de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f92b 	bl	800653c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a41      	ldr	r2, [pc, #260]	; (8006474 <TIM_Base_SetConfig+0x120>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_Base_SetConfig+0x46>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d00f      	beq.n	800639a <TIM_Base_SetConfig+0x46>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a3e      	ldr	r2, [pc, #248]	; (8006478 <TIM_Base_SetConfig+0x124>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_Base_SetConfig+0x46>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a3d      	ldr	r2, [pc, #244]	; (800647c <TIM_Base_SetConfig+0x128>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_Base_SetConfig+0x46>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a3c      	ldr	r2, [pc, #240]	; (8006480 <TIM_Base_SetConfig+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_Base_SetConfig+0x46>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a3b      	ldr	r2, [pc, #236]	; (8006484 <TIM_Base_SetConfig+0x130>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a31      	ldr	r2, [pc, #196]	; (8006474 <TIM_Base_SetConfig+0x120>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01f      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d01b      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2e      	ldr	r2, [pc, #184]	; (8006478 <TIM_Base_SetConfig+0x124>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d017      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2d      	ldr	r2, [pc, #180]	; (800647c <TIM_Base_SetConfig+0x128>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a2c      	ldr	r2, [pc, #176]	; (8006480 <TIM_Base_SetConfig+0x12c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00f      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a2b      	ldr	r2, [pc, #172]	; (8006484 <TIM_Base_SetConfig+0x130>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a2a      	ldr	r2, [pc, #168]	; (8006488 <TIM_Base_SetConfig+0x134>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a29      	ldr	r2, [pc, #164]	; (800648c <TIM_Base_SetConfig+0x138>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0xa0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a28      	ldr	r2, [pc, #160]	; (8006490 <TIM_Base_SetConfig+0x13c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  TIMx->CR1 = tmpcr1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	b29a      	uxth	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	b29a      	uxth	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a10      	ldr	r2, [pc, #64]	; (8006474 <TIM_Base_SetConfig+0x120>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00f      	beq.n	8006456 <TIM_Base_SetConfig+0x102>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a12      	ldr	r2, [pc, #72]	; (8006484 <TIM_Base_SetConfig+0x130>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00b      	beq.n	8006456 <TIM_Base_SetConfig+0x102>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a11      	ldr	r2, [pc, #68]	; (8006488 <TIM_Base_SetConfig+0x134>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d007      	beq.n	8006456 <TIM_Base_SetConfig+0x102>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a10      	ldr	r2, [pc, #64]	; (800648c <TIM_Base_SetConfig+0x138>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_Base_SetConfig+0x102>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <TIM_Base_SetConfig+0x13c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d104      	bne.n	8006460 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	615a      	str	r2, [r3, #20]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e03d      	b.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d108      	bne.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006502:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
} 
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400

0800653c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e043      	b.n	80065fe <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f007 fc90 	bl	800deb0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f82d 	bl	8006608 <UART_SetConfig>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e022      	b.n	80065fe <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 ffcf 	bl	8007564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	6852      	ldr	r2, [r2, #4]
 80065d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	6892      	ldr	r2, [r2, #8]
 80065e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f856 	bl	80076a8 <UART_CheckIdleState>
 80065fc:	4603      	mov	r3, r0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	b095      	sub	sp, #84	; 0x54
 800660e:	af00      	add	r7, sp, #0
 8006610:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg                     = 0x00000000U;
 8006612:	2300      	movs	r3, #0
 8006614:	64fb      	str	r3, [r7, #76]	; 0x4c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint16_t brrtemp                    = 0x0000U;
 800661c:	2300      	movs	r3, #0
 800661e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t usartdiv                   = 0x0000U;
 8006622:	2300      	movs	r3, #0
 8006624:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef ret               = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	431a      	orrs	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	431a      	orrs	r2, r3
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	4313      	orrs	r3, r2
 8006644:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	4313      	orrs	r3, r2
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4ac0      	ldr	r2, [pc, #768]	; (800695c <UART_SetConfig+0x354>)
 800665c:	401a      	ands	r2, r3
 800665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006660:	4313      	orrs	r3, r2
 8006662:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	604b      	str	r3, [r1, #4]
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4bb6      	ldr	r3, [pc, #728]	; (8006960 <UART_SetConfig+0x358>)
 8006686:	429a      	cmp	r2, r3
 8006688:	d004      	beq.n	8006694 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006690:	4313      	orrs	r3, r2
 8006692:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669c:	d107      	bne.n	80066ae <UART_SetConfig+0xa6>
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	431a      	orrs	r2, r3
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	4313      	orrs	r3, r2
 80066ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4aaa      	ldr	r2, [pc, #680]	; (8006964 <UART_SetConfig+0x35c>)
 80066ba:	401a      	ands	r2, r3
 80066bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	f023 020f 	bic.w	r2, r3, #15
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	4313      	orrs	r3, r2
 80066d6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	4ba2      	ldr	r3, [pc, #648]	; (8006968 <UART_SetConfig+0x360>)
 80066de:	429a      	cmp	r2, r3
 80066e0:	d175      	bne.n	80067ce <UART_SetConfig+0x1c6>
 80066e2:	4ba2      	ldr	r3, [pc, #648]	; (800696c <UART_SetConfig+0x364>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ea:	2b28      	cmp	r3, #40	; 0x28
 80066ec:	f200 8266 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0xf0>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800679d 	.word	0x0800679d
 80066fc:	08006bbd 	.word	0x08006bbd
 8006700:	08006bbd 	.word	0x08006bbd
 8006704:	08006bbd 	.word	0x08006bbd
 8006708:	08006bbd 	.word	0x08006bbd
 800670c:	08006bbd 	.word	0x08006bbd
 8006710:	08006bbd 	.word	0x08006bbd
 8006714:	08006bbd 	.word	0x08006bbd
 8006718:	080067a5 	.word	0x080067a5
 800671c:	08006bbd 	.word	0x08006bbd
 8006720:	08006bbd 	.word	0x08006bbd
 8006724:	08006bbd 	.word	0x08006bbd
 8006728:	08006bbd 	.word	0x08006bbd
 800672c:	08006bbd 	.word	0x08006bbd
 8006730:	08006bbd 	.word	0x08006bbd
 8006734:	08006bbd 	.word	0x08006bbd
 8006738:	080067ad 	.word	0x080067ad
 800673c:	08006bbd 	.word	0x08006bbd
 8006740:	08006bbd 	.word	0x08006bbd
 8006744:	08006bbd 	.word	0x08006bbd
 8006748:	08006bbd 	.word	0x08006bbd
 800674c:	08006bbd 	.word	0x08006bbd
 8006750:	08006bbd 	.word	0x08006bbd
 8006754:	08006bbd 	.word	0x08006bbd
 8006758:	080067b5 	.word	0x080067b5
 800675c:	08006bbd 	.word	0x08006bbd
 8006760:	08006bbd 	.word	0x08006bbd
 8006764:	08006bbd 	.word	0x08006bbd
 8006768:	08006bbd 	.word	0x08006bbd
 800676c:	08006bbd 	.word	0x08006bbd
 8006770:	08006bbd 	.word	0x08006bbd
 8006774:	08006bbd 	.word	0x08006bbd
 8006778:	080067bd 	.word	0x080067bd
 800677c:	08006bbd 	.word	0x08006bbd
 8006780:	08006bbd 	.word	0x08006bbd
 8006784:	08006bbd 	.word	0x08006bbd
 8006788:	08006bbd 	.word	0x08006bbd
 800678c:	08006bbd 	.word	0x08006bbd
 8006790:	08006bbd 	.word	0x08006bbd
 8006794:	08006bbd 	.word	0x08006bbd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	2301      	movs	r3, #1
 800679e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80067a2:	e20a      	b.n	8006bba <UART_SetConfig+0x5b2>
 80067a4:	2304      	movs	r3, #4
 80067a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80067aa:	e206      	b.n	8006bba <UART_SetConfig+0x5b2>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80067b2:	e202      	b.n	8006bba <UART_SetConfig+0x5b2>
 80067b4:	2308      	movs	r3, #8
 80067b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80067ba:	e1fe      	b.n	8006bba <UART_SetConfig+0x5b2>
 80067bc:	2310      	movs	r3, #16
 80067be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80067c2:	e1fa      	b.n	8006bba <UART_SetConfig+0x5b2>
 80067c4:	2320      	movs	r3, #32
 80067c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80067ca:	bf00      	nop
 80067cc:	e1f5      	b.n	8006bba <UART_SetConfig+0x5b2>
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b67      	ldr	r3, [pc, #412]	; (8006970 <UART_SetConfig+0x368>)
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d12e      	bne.n	8006836 <UART_SetConfig+0x22e>
 80067d8:	4b64      	ldr	r3, [pc, #400]	; (800696c <UART_SetConfig+0x364>)
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	f200 81eb 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x1e4>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006805 	.word	0x08006805
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	08006815 	.word	0x08006815
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006825 	.word	0x08006825
 8006800:	0800682d 	.word	0x0800682d
 8006804:	2300      	movs	r3, #0
 8006806:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800680a:	e1d6      	b.n	8006bba <UART_SetConfig+0x5b2>
 800680c:	2304      	movs	r3, #4
 800680e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006812:	e1d2      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800681a:	e1ce      	b.n	8006bba <UART_SetConfig+0x5b2>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006822:	e1ca      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800682a:	e1c6      	b.n	8006bba <UART_SetConfig+0x5b2>
 800682c:	2320      	movs	r3, #32
 800682e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006832:	bf00      	nop
 8006834:	e1c1      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b4e      	ldr	r3, [pc, #312]	; (8006974 <UART_SetConfig+0x36c>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d12e      	bne.n	800689e <UART_SetConfig+0x296>
 8006840:	4b4a      	ldr	r3, [pc, #296]	; (800696c <UART_SetConfig+0x364>)
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	2b05      	cmp	r3, #5
 800684a:	f200 81b7 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0x24c>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	0800686d 	.word	0x0800686d
 8006858:	08006875 	.word	0x08006875
 800685c:	0800687d 	.word	0x0800687d
 8006860:	08006885 	.word	0x08006885
 8006864:	0800688d 	.word	0x0800688d
 8006868:	08006895 	.word	0x08006895
 800686c:	2300      	movs	r3, #0
 800686e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006872:	e1a2      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006874:	2304      	movs	r3, #4
 8006876:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800687a:	e19e      	b.n	8006bba <UART_SetConfig+0x5b2>
 800687c:	2340      	movs	r3, #64	; 0x40
 800687e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006882:	e19a      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800688a:	e196      	b.n	8006bba <UART_SetConfig+0x5b2>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006892:	e192      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006894:	2320      	movs	r3, #32
 8006896:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800689a:	bf00      	nop
 800689c:	e18d      	b.n	8006bba <UART_SetConfig+0x5b2>
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b35      	ldr	r3, [pc, #212]	; (8006978 <UART_SetConfig+0x370>)
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d12e      	bne.n	8006906 <UART_SetConfig+0x2fe>
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <UART_SetConfig+0x364>)
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	f200 8183 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x2b4>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068d5 	.word	0x080068d5
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	080068e5 	.word	0x080068e5
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	2300      	movs	r3, #0
 80068d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80068da:	e16e      	b.n	8006bba <UART_SetConfig+0x5b2>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80068e2:	e16a      	b.n	8006bba <UART_SetConfig+0x5b2>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80068ea:	e166      	b.n	8006bba <UART_SetConfig+0x5b2>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80068f2:	e162      	b.n	8006bba <UART_SetConfig+0x5b2>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80068fa:	e15e      	b.n	8006bba <UART_SetConfig+0x5b2>
 80068fc:	2320      	movs	r3, #32
 80068fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006902:	bf00      	nop
 8006904:	e159      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <UART_SetConfig+0x374>)
 800690c:	429a      	cmp	r2, r3
 800690e:	d140      	bne.n	8006992 <UART_SetConfig+0x38a>
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <UART_SetConfig+0x364>)
 8006912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	2b05      	cmp	r3, #5
 800691a:	f200 814f 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <UART_SetConfig+0x31c>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006955 	.word	0x08006955
 8006934:	08006981 	.word	0x08006981
 8006938:	08006989 	.word	0x08006989
 800693c:	2300      	movs	r3, #0
 800693e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006942:	e13a      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800694a:	e136      	b.n	8006bba <UART_SetConfig+0x5b2>
 800694c:	2340      	movs	r3, #64	; 0x40
 800694e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006952:	e132      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800695a:	e12e      	b.n	8006bba <UART_SetConfig+0x5b2>
 800695c:	cfff69f3 	.word	0xcfff69f3
 8006960:	58000c00 	.word	0x58000c00
 8006964:	11fff4ff 	.word	0x11fff4ff
 8006968:	40011000 	.word	0x40011000
 800696c:	58024400 	.word	0x58024400
 8006970:	40004400 	.word	0x40004400
 8006974:	40004800 	.word	0x40004800
 8006978:	40004c00 	.word	0x40004c00
 800697c:	40005000 	.word	0x40005000
 8006980:	2310      	movs	r3, #16
 8006982:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006986:	e118      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800698e:	bf00      	nop
 8006990:	e113      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4bc5      	ldr	r3, [pc, #788]	; (8006cac <UART_SetConfig+0x6a4>)
 8006998:	429a      	cmp	r2, r3
 800699a:	d174      	bne.n	8006a86 <UART_SetConfig+0x47e>
 800699c:	4bc4      	ldr	r3, [pc, #784]	; (8006cb0 <UART_SetConfig+0x6a8>)
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a4:	2b28      	cmp	r3, #40	; 0x28
 80069a6:	f200 8109 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <UART_SetConfig+0x3a8>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	08006a55 	.word	0x08006a55
 80069b4:	08006bbd 	.word	0x08006bbd
 80069b8:	08006bbd 	.word	0x08006bbd
 80069bc:	08006bbd 	.word	0x08006bbd
 80069c0:	08006bbd 	.word	0x08006bbd
 80069c4:	08006bbd 	.word	0x08006bbd
 80069c8:	08006bbd 	.word	0x08006bbd
 80069cc:	08006bbd 	.word	0x08006bbd
 80069d0:	08006a5d 	.word	0x08006a5d
 80069d4:	08006bbd 	.word	0x08006bbd
 80069d8:	08006bbd 	.word	0x08006bbd
 80069dc:	08006bbd 	.word	0x08006bbd
 80069e0:	08006bbd 	.word	0x08006bbd
 80069e4:	08006bbd 	.word	0x08006bbd
 80069e8:	08006bbd 	.word	0x08006bbd
 80069ec:	08006bbd 	.word	0x08006bbd
 80069f0:	08006a65 	.word	0x08006a65
 80069f4:	08006bbd 	.word	0x08006bbd
 80069f8:	08006bbd 	.word	0x08006bbd
 80069fc:	08006bbd 	.word	0x08006bbd
 8006a00:	08006bbd 	.word	0x08006bbd
 8006a04:	08006bbd 	.word	0x08006bbd
 8006a08:	08006bbd 	.word	0x08006bbd
 8006a0c:	08006bbd 	.word	0x08006bbd
 8006a10:	08006a6d 	.word	0x08006a6d
 8006a14:	08006bbd 	.word	0x08006bbd
 8006a18:	08006bbd 	.word	0x08006bbd
 8006a1c:	08006bbd 	.word	0x08006bbd
 8006a20:	08006bbd 	.word	0x08006bbd
 8006a24:	08006bbd 	.word	0x08006bbd
 8006a28:	08006bbd 	.word	0x08006bbd
 8006a2c:	08006bbd 	.word	0x08006bbd
 8006a30:	08006a75 	.word	0x08006a75
 8006a34:	08006bbd 	.word	0x08006bbd
 8006a38:	08006bbd 	.word	0x08006bbd
 8006a3c:	08006bbd 	.word	0x08006bbd
 8006a40:	08006bbd 	.word	0x08006bbd
 8006a44:	08006bbd 	.word	0x08006bbd
 8006a48:	08006bbd 	.word	0x08006bbd
 8006a4c:	08006bbd 	.word	0x08006bbd
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a5a:	e0ae      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a62:	e0aa      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006a64:	2340      	movs	r3, #64	; 0x40
 8006a66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a6a:	e0a6      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a72:	e0a2      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a7a:	e09e      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006a7c:	2320      	movs	r3, #32
 8006a7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006a82:	bf00      	nop
 8006a84:	e099      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b8a      	ldr	r3, [pc, #552]	; (8006cb4 <UART_SetConfig+0x6ac>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d12e      	bne.n	8006aee <UART_SetConfig+0x4e6>
 8006a90:	4b87      	ldr	r3, [pc, #540]	; (8006cb0 <UART_SetConfig+0x6a8>)
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	2b05      	cmp	r3, #5
 8006a9a:	f200 808f 	bhi.w	8006bbc <UART_SetConfig+0x5b4>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x49c>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006abd 	.word	0x08006abd
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	08006acd 	.word	0x08006acd
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006ae5 	.word	0x08006ae5
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ac2:	e07a      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006aca:	e076      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ad2:	e072      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ada:	e06e      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ae2:	e06a      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006aea:	bf00      	nop
 8006aec:	e065      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b71      	ldr	r3, [pc, #452]	; (8006cb8 <UART_SetConfig+0x6b0>)
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d12e      	bne.n	8006b56 <UART_SetConfig+0x54e>
 8006af8:	4b6d      	ldr	r3, [pc, #436]	; (8006cb0 <UART_SetConfig+0x6a8>)
 8006afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	d85b      	bhi.n	8006bbc <UART_SetConfig+0x5b4>
 8006b04:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x504>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b25 	.word	0x08006b25
 8006b10:	08006b2d 	.word	0x08006b2d
 8006b14:	08006b35 	.word	0x08006b35
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b4d 	.word	0x08006b4d
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b2a:	e046      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b32:	e042      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b3a:	e03e      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b42:	e03a      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b4a:	e036      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b52:	bf00      	nop
 8006b54:	e031      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <UART_SetConfig+0x6b4>)
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d12d      	bne.n	8006bbc <UART_SetConfig+0x5b4>
 8006b60:	4b53      	ldr	r3, [pc, #332]	; (8006cb0 <UART_SetConfig+0x6a8>)
 8006b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d827      	bhi.n	8006bbc <UART_SetConfig+0x5b4>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x56c>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b8d 	.word	0x08006b8d
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	08006b9d 	.word	0x08006b9d
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b92:	e012      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006b9a:	e00e      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006b9c:	2340      	movs	r3, #64	; 0x40
 8006b9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006ba2:	e00a      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006baa:	e006      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006bac:	2310      	movs	r3, #16
 8006bae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006bb2:	e002      	b.n	8006bba <UART_SetConfig+0x5b2>
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006bba:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b3e      	ldr	r3, [pc, #248]	; (8006cbc <UART_SetConfig+0x6b4>)
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	f040 81f4 	bne.w	8006fb0 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch (clocksource)
 8006bcc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d021      	beq.n	8006c18 <UART_SetConfig+0x610>
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	dc04      	bgt.n	8006be2 <UART_SetConfig+0x5da>
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d009      	beq.n	8006bf0 <UART_SetConfig+0x5e8>
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d00b      	beq.n	8006bf8 <UART_SetConfig+0x5f0>
 8006be0:	e033      	b.n	8006c4a <UART_SetConfig+0x642>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d02d      	beq.n	8006c42 <UART_SetConfig+0x63a>
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d00e      	beq.n	8006c08 <UART_SetConfig+0x600>
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	d026      	beq.n	8006c3c <UART_SetConfig+0x634>
 8006bee:	e02c      	b.n	8006c4a <UART_SetConfig+0x642>
    {
    case UART_CLOCKSOURCE_D3PCLK1:
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8006bf0:	f7fd fbbe 	bl	8004370 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bf4:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 8006bf6:	e02c      	b.n	8006c52 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fd fbd9 	bl	80043b4 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8006c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c04:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8006c06:	e024      	b.n	8006c52 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fd fd09 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8006c16:	e01c      	b.n	8006c52 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <UART_SetConfig+0x6a8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <UART_SetConfig+0x62e>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c24:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <UART_SetConfig+0x6a8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f003 0203 	and.w	r2, r3, #3
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <UART_SetConfig+0x6b8>)
 8006c30:	40d3      	lsrs	r3, r2
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8006c34:	e00d      	b.n	8006c52 <UART_SetConfig+0x64a>
        tmpreg = (uint32_t) HSI_VALUE;
 8006c36:	4b22      	ldr	r3, [pc, #136]	; (8006cc0 <UART_SetConfig+0x6b8>)
 8006c38:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8006c3a:	e00a      	b.n	8006c52 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_CSI:
      tmpreg =(uint32_t) CSI_VALUE;
 8006c3c:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <UART_SetConfig+0x6bc>)
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8006c40:	e007      	b.n	8006c52 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      break;
 8006c48:	e003      	b.n	8006c52 <UART_SetConfig+0x64a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006c50:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0U)
 8006c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8475 	beq.w	8007544 <UART_SetConfig+0xf3c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	441a      	add	r2, r3
 8006c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d805      	bhi.n	8006c76 <UART_SetConfig+0x66e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d204      	bcs.n	8006c80 <UART_SetConfig+0x678>
      {
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006c7c:	f000 bc62 	b.w	8007544 <UART_SetConfig+0xf3c>
      }
      else
      {
        switch (clocksource)
 8006c80:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	f000 80bb 	beq.w	8006e00 <UART_SetConfig+0x7f8>
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	dc04      	bgt.n	8006c98 <UART_SetConfig+0x690>
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d01a      	beq.n	8006cc8 <UART_SetConfig+0x6c0>
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d04a      	beq.n	8006d2c <UART_SetConfig+0x724>
 8006c96:	e16d      	b.n	8006f74 <UART_SetConfig+0x96c>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	f000 8146 	beq.w	8006f2a <UART_SetConfig+0x922>
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d079      	beq.n	8006d96 <UART_SetConfig+0x78e>
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	f000 8115 	beq.w	8006ed2 <UART_SetConfig+0x8ca>
 8006ca8:	e164      	b.n	8006f74 <UART_SetConfig+0x96c>
 8006caa:	bf00      	nop
 8006cac:	40011400 	.word	0x40011400
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	40007800 	.word	0x40007800
 8006cb8:	40007c00 	.word	0x40007c00
 8006cbc:	58000c00 	.word	0x58000c00
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	003d0900 	.word	0x003d0900
        {
        case UART_CLOCKSOURCE_D3PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8006cc8:	f7fd fb52 	bl	8004370 <HAL_RCCEx_GetD3PCLK1Freq>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f04f 0100 	mov.w	r1, #0
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	4ab1      	ldr	r2, [pc, #708]	; (8006fa0 <UART_SetConfig+0x998>)
 8006cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f04f 0400 	mov.w	r4, #0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	f7f9 fb02 	bl	80002f0 <__aeabi_uldivmod>
 8006cec:	4603      	mov	r3, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	0222      	lsls	r2, r4, #8
 8006cf2:	61fa      	str	r2, [r7, #28]
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8006cfa:	61fa      	str	r2, [r7, #28]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	f04f 0400 	mov.w	r4, #0
 8006d0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d0e:	18c0      	adds	r0, r0, r3
 8006d10:	eb41 0104 	adc.w	r1, r1, r4
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4623      	mov	r3, r4
 8006d20:	f7f9 fae6 	bl	80002f0 <__aeabi_uldivmod>
 8006d24:	4603      	mov	r3, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8006d2a:	e127      	b.n	8006f7c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL2:
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fd fb3f 	bl	80043b4 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	4a97      	ldr	r2, [pc, #604]	; (8006fa0 <UART_SetConfig+0x998>)
 8006d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f04f 0400 	mov.w	r4, #0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4623      	mov	r3, r4
 8006d52:	f7f9 facd 	bl	80002f0 <__aeabi_uldivmod>
 8006d56:	4603      	mov	r3, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	0222      	lsls	r2, r4, #8
 8006d5c:	617a      	str	r2, [r7, #20]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8006d64:	617a      	str	r2, [r7, #20]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	f04f 0400 	mov.w	r4, #0
 8006d74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d78:	18c0      	adds	r0, r0, r3
 8006d7a:	eb41 0104 	adc.w	r1, r1, r4
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f04f 0400 	mov.w	r4, #0
 8006d86:	461a      	mov	r2, r3
 8006d88:	4623      	mov	r3, r4
 8006d8a:	f7f9 fab1 	bl	80002f0 <__aeabi_uldivmod>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8006d94:	e0f2      	b.n	8006f7c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_PLL3:
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fc42 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	4618      	mov	r0, r3
 8006da4:	f04f 0100 	mov.w	r1, #0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	4a7c      	ldr	r2, [pc, #496]	; (8006fa0 <UART_SetConfig+0x998>)
 8006dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f04f 0400 	mov.w	r4, #0
 8006db8:	461a      	mov	r2, r3
 8006dba:	4623      	mov	r3, r4
 8006dbc:	f7f9 fa98 	bl	80002f0 <__aeabi_uldivmod>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	0222      	lsls	r2, r4, #8
 8006dc6:	60fa      	str	r2, [r7, #12]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8006dce:	60fa      	str	r2, [r7, #12]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	60bb      	str	r3, [r7, #8]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	f04f 0400 	mov.w	r4, #0
 8006dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006de2:	18c0      	adds	r0, r0, r3
 8006de4:	eb41 0104 	adc.w	r1, r1, r4
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f04f 0400 	mov.w	r4, #0
 8006df0:	461a      	mov	r2, r3
 8006df2:	4623      	mov	r3, r4
 8006df4:	f7f9 fa7c 	bl	80002f0 <__aeabi_uldivmod>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8006dfe:	e0bd      	b.n	8006f7c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_HSI:
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e00:	4b68      	ldr	r3, [pc, #416]	; (8006fa4 <UART_SetConfig+0x99c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d036      	beq.n	8006e7a <UART_SetConfig+0x872>
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8006e0c:	4b65      	ldr	r3, [pc, #404]	; (8006fa4 <UART_SetConfig+0x99c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	08db      	lsrs	r3, r3, #3
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	4a64      	ldr	r2, [pc, #400]	; (8006fa8 <UART_SetConfig+0x9a0>)
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f04f 0100 	mov.w	r1, #0
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	4a5e      	ldr	r2, [pc, #376]	; (8006fa0 <UART_SetConfig+0x998>)
 8006e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f04f 0400 	mov.w	r4, #0
 8006e32:	461a      	mov	r2, r3
 8006e34:	4623      	mov	r3, r4
 8006e36:	f7f9 fa5b 	bl	80002f0 <__aeabi_uldivmod>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	0222      	lsls	r2, r4, #8
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	603b      	str	r3, [r7, #0]
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	f04f 0400 	mov.w	r4, #0
 8006e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e5c:	18c0      	adds	r0, r0, r3
 8006e5e:	eb41 0104 	adc.w	r1, r1, r4
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f04f 0400 	mov.w	r4, #0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	f7f9 fa3f 	bl	80002f0 <__aeabi_uldivmod>
 8006e72:	4603      	mov	r3, r0
 8006e74:	460c      	mov	r4, r1
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          else
          {
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
          }
          break;
 8006e78:	e080      	b.n	8006f7c <UART_SetConfig+0x974>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	4a48      	ldr	r2, [pc, #288]	; (8006fa0 <UART_SetConfig+0x998>)
 8006e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f04f 0400 	mov.w	r4, #0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	4846      	ldr	r0, [pc, #280]	; (8006fa8 <UART_SetConfig+0x9a0>)
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	f7f9 fa2c 	bl	80002f0 <__aeabi_uldivmod>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	ea4f 2b04 	mov.w	fp, r4, lsl #8
 8006ea0:	ea4b 6b13 	orr.w	fp, fp, r3, lsr #24
 8006ea4:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	f04f 0400 	mov.w	r4, #0
 8006eb2:	eb1a 0003 	adds.w	r0, sl, r3
 8006eb6:	eb4b 0104 	adc.w	r1, fp, r4
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f04f 0400 	mov.w	r4, #0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	f7f9 fa13 	bl	80002f0 <__aeabi_uldivmod>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8006ed0:	e054      	b.n	8006f7c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_CSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <UART_SetConfig+0x998>)
 8006ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f04f 0400 	mov.w	r4, #0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	4831      	ldr	r0, [pc, #196]	; (8006fac <UART_SetConfig+0x9a4>)
 8006ee8:	f04f 0100 	mov.w	r1, #0
 8006eec:	f7f9 fa00 	bl	80002f0 <__aeabi_uldivmod>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8006ef8:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8006efc:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	f04f 0400 	mov.w	r4, #0
 8006f0a:	eb18 0003 	adds.w	r0, r8, r3
 8006f0e:	eb49 0104 	adc.w	r1, r9, r4
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f04f 0400 	mov.w	r4, #0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	f7f9 f9e7 	bl	80002f0 <__aeabi_uldivmod>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8006f28:	e028      	b.n	8006f7c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <UART_SetConfig+0x998>)
 8006f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f04f 0400 	mov.w	r4, #0
 8006f44:	0226      	lsls	r6, r4, #8
 8006f46:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8006f4a:	021d      	lsls	r5, r3, #8
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	f04f 0400 	mov.w	r4, #0
 8006f56:	18e8      	adds	r0, r5, r3
 8006f58:	eb46 0104 	adc.w	r1, r6, r4
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f04f 0400 	mov.w	r4, #0
 8006f64:	461a      	mov	r2, r3
 8006f66:	4623      	mov	r3, r4
 8006f68:	f7f9 f9c2 	bl	80002f0 <__aeabi_uldivmod>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	64fb      	str	r3, [r7, #76]	; 0x4c
          break;
 8006f72:	e003      	b.n	8006f7c <UART_SetConfig+0x974>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          break;
 8006f7a:	bf00      	nop
        }

        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f82:	d308      	bcc.n	8006f96 <UART_SetConfig+0x98e>
 8006f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8a:	d204      	bcs.n	8006f96 <UART_SetConfig+0x98e>
        {
           huart->Instance->BRR = tmpreg;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f92:	60da      	str	r2, [r3, #12]
 8006f94:	e2d6      	b.n	8007544 <UART_SetConfig+0xf3c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f9c:	e2d2      	b.n	8007544 <UART_SetConfig+0xf3c>
 8006f9e:	bf00      	nop
 8006fa0:	0800e278 	.word	0x0800e278
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	03d09000 	.word	0x03d09000
 8006fac:	003d0900 	.word	0x003d0900
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb8:	f040 8165 	bne.w	8007286 <UART_SetConfig+0xc7e>
  {
    switch (clocksource)
 8006fbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	f200 8144 	bhi.w	800724e <UART_SetConfig+0xc46>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x9c4>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	080070d1 	.word	0x080070d1
 8006fd0:	080070fd 	.word	0x080070fd
 8006fd4:	0800724f 	.word	0x0800724f
 8006fd8:	0800724f 	.word	0x0800724f
 8006fdc:	08007129 	.word	0x08007129
 8006fe0:	0800724f 	.word	0x0800724f
 8006fe4:	0800724f 	.word	0x0800724f
 8006fe8:	0800724f 	.word	0x0800724f
 8006fec:	0800718d 	.word	0x0800718d
 8006ff0:	0800724f 	.word	0x0800724f
 8006ff4:	0800724f 	.word	0x0800724f
 8006ff8:	0800724f 	.word	0x0800724f
 8006ffc:	0800724f 	.word	0x0800724f
 8007000:	0800724f 	.word	0x0800724f
 8007004:	0800724f 	.word	0x0800724f
 8007008:	0800724f 	.word	0x0800724f
 800700c:	080071f9 	.word	0x080071f9
 8007010:	0800724f 	.word	0x0800724f
 8007014:	0800724f 	.word	0x0800724f
 8007018:	0800724f 	.word	0x0800724f
 800701c:	0800724f 	.word	0x0800724f
 8007020:	0800724f 	.word	0x0800724f
 8007024:	0800724f 	.word	0x0800724f
 8007028:	0800724f 	.word	0x0800724f
 800702c:	0800724f 	.word	0x0800724f
 8007030:	0800724f 	.word	0x0800724f
 8007034:	0800724f 	.word	0x0800724f
 8007038:	0800724f 	.word	0x0800724f
 800703c:	0800724f 	.word	0x0800724f
 8007040:	0800724f 	.word	0x0800724f
 8007044:	0800724f 	.word	0x0800724f
 8007048:	0800724f 	.word	0x0800724f
 800704c:	08007223 	.word	0x08007223
 8007050:	0800724f 	.word	0x0800724f
 8007054:	0800724f 	.word	0x0800724f
 8007058:	0800724f 	.word	0x0800724f
 800705c:	0800724f 	.word	0x0800724f
 8007060:	0800724f 	.word	0x0800724f
 8007064:	0800724f 	.word	0x0800724f
 8007068:	0800724f 	.word	0x0800724f
 800706c:	0800724f 	.word	0x0800724f
 8007070:	0800724f 	.word	0x0800724f
 8007074:	0800724f 	.word	0x0800724f
 8007078:	0800724f 	.word	0x0800724f
 800707c:	0800724f 	.word	0x0800724f
 8007080:	0800724f 	.word	0x0800724f
 8007084:	0800724f 	.word	0x0800724f
 8007088:	0800724f 	.word	0x0800724f
 800708c:	0800724f 	.word	0x0800724f
 8007090:	0800724f 	.word	0x0800724f
 8007094:	0800724f 	.word	0x0800724f
 8007098:	0800724f 	.word	0x0800724f
 800709c:	0800724f 	.word	0x0800724f
 80070a0:	0800724f 	.word	0x0800724f
 80070a4:	0800724f 	.word	0x0800724f
 80070a8:	0800724f 	.word	0x0800724f
 80070ac:	0800724f 	.word	0x0800724f
 80070b0:	0800724f 	.word	0x0800724f
 80070b4:	0800724f 	.word	0x0800724f
 80070b8:	0800724f 	.word	0x0800724f
 80070bc:	0800724f 	.word	0x0800724f
 80070c0:	0800724f 	.word	0x0800724f
 80070c4:	0800724f 	.word	0x0800724f
 80070c8:	0800724f 	.word	0x0800724f
 80070cc:	0800715b 	.word	0x0800715b
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80070d0:	f7fc f9ee 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80070d4:	4601      	mov	r1, r0
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	4ac7      	ldr	r2, [pc, #796]	; (80073f8 <UART_SetConfig+0xdf0>)
 80070dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80070e4:	005a      	lsls	r2, r3, #1
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	441a      	add	r2, r3
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80070fa:	e0ac      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80070fc:	f7fc f9fa 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8007100:	4601      	mov	r1, r0
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	4abc      	ldr	r2, [pc, #752]	; (80073f8 <UART_SetConfig+0xdf0>)
 8007108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800710c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007110:	005a      	lsls	r2, r3, #1
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	441a      	add	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8007126:	e096      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800712c:	4618      	mov	r0, r3
 800712e:	f7fd f941 	bl	80043b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007138:	49af      	ldr	r1, [pc, #700]	; (80073f8 <UART_SetConfig+0xdf0>)
 800713a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800713e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007142:	005a      	lsls	r2, r3, #1
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	085b      	lsrs	r3, r3, #1
 800714a:	441a      	add	r2, r3
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8007158:	e07d      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800715a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800715e:	4618      	mov	r0, r3
 8007160:	f7fd fa60 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800716a:	49a3      	ldr	r1, [pc, #652]	; (80073f8 <UART_SetConfig+0xdf0>)
 800716c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007170:	fbb3 f3f2 	udiv	r3, r3, r2
 8007174:	005a      	lsls	r2, r3, #1
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	441a      	add	r2, r3
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 800718a:	e064      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718c:	4b9b      	ldr	r3, [pc, #620]	; (80073fc <UART_SetConfig+0xdf4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <UART_SetConfig+0xbc6>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8007198:	4b98      	ldr	r3, [pc, #608]	; (80073fc <UART_SetConfig+0xdf4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	08db      	lsrs	r3, r3, #3
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	4a97      	ldr	r2, [pc, #604]	; (8007400 <UART_SetConfig+0xdf8>)
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
 80071a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071ac:	4992      	ldr	r1, [pc, #584]	; (80073f8 <UART_SetConfig+0xdf0>)
 80071ae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80071b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b6:	005a      	lsls	r2, r3, #1
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	441a      	add	r2, r3
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 80071cc:	e043      	b.n	8007256 <UART_SetConfig+0xc4e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	4a89      	ldr	r2, [pc, #548]	; (80073f8 <UART_SetConfig+0xdf0>)
 80071d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d8:	461a      	mov	r2, r3
 80071da:	4b89      	ldr	r3, [pc, #548]	; (8007400 <UART_SetConfig+0xdf8>)
 80071dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80071e0:	005a      	lsls	r2, r3, #1
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	441a      	add	r2, r3
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 80071f6:	e02e      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	4a7e      	ldr	r2, [pc, #504]	; (80073f8 <UART_SetConfig+0xdf0>)
 80071fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007202:	461a      	mov	r2, r3
 8007204:	4b7f      	ldr	r3, [pc, #508]	; (8007404 <UART_SetConfig+0xdfc>)
 8007206:	fbb3 f3f2 	udiv	r3, r3, r2
 800720a:	005a      	lsls	r2, r3, #1
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	441a      	add	r2, r3
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 8007220:	e019      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	4a74      	ldr	r2, [pc, #464]	; (80073f8 <UART_SetConfig+0xdf0>)
 8007228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800722c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	b29b      	uxth	r3, r3
 8007236:	005a      	lsls	r2, r3, #1
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	441a      	add	r2, r3
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      break;
 800724c:	e003      	b.n	8007256 <UART_SetConfig+0xc4e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007254:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8007256:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800725a:	f023 030f 	bic.w	r3, r3, #15
 800725e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007262:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007266:	105b      	asrs	r3, r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007274:	4313      	orrs	r3, r2
 8007276:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    huart->Instance->BRR = brrtemp;
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007282:	60da      	str	r2, [r3, #12]
 8007284:	e15e      	b.n	8007544 <UART_SetConfig+0xf3c>
  }
  else
  {
    switch (clocksource)
 8007286:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	f200 8156 	bhi.w	800753c <UART_SetConfig+0xf34>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0xc90>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	0800739d 	.word	0x0800739d
 800729c:	080073cb 	.word	0x080073cb
 80072a0:	0800753d 	.word	0x0800753d
 80072a4:	0800753d 	.word	0x0800753d
 80072a8:	08007409 	.word	0x08007409
 80072ac:	0800753d 	.word	0x0800753d
 80072b0:	0800753d 	.word	0x0800753d
 80072b4:	0800753d 	.word	0x0800753d
 80072b8:	08007471 	.word	0x08007471
 80072bc:	0800753d 	.word	0x0800753d
 80072c0:	0800753d 	.word	0x0800753d
 80072c4:	0800753d 	.word	0x0800753d
 80072c8:	0800753d 	.word	0x0800753d
 80072cc:	0800753d 	.word	0x0800753d
 80072d0:	0800753d 	.word	0x0800753d
 80072d4:	0800753d 	.word	0x0800753d
 80072d8:	080074e1 	.word	0x080074e1
 80072dc:	0800753d 	.word	0x0800753d
 80072e0:	0800753d 	.word	0x0800753d
 80072e4:	0800753d 	.word	0x0800753d
 80072e8:	0800753d 	.word	0x0800753d
 80072ec:	0800753d 	.word	0x0800753d
 80072f0:	0800753d 	.word	0x0800753d
 80072f4:	0800753d 	.word	0x0800753d
 80072f8:	0800753d 	.word	0x0800753d
 80072fc:	0800753d 	.word	0x0800753d
 8007300:	0800753d 	.word	0x0800753d
 8007304:	0800753d 	.word	0x0800753d
 8007308:	0800753d 	.word	0x0800753d
 800730c:	0800753d 	.word	0x0800753d
 8007310:	0800753d 	.word	0x0800753d
 8007314:	0800753d 	.word	0x0800753d
 8007318:	0800750d 	.word	0x0800750d
 800731c:	0800753d 	.word	0x0800753d
 8007320:	0800753d 	.word	0x0800753d
 8007324:	0800753d 	.word	0x0800753d
 8007328:	0800753d 	.word	0x0800753d
 800732c:	0800753d 	.word	0x0800753d
 8007330:	0800753d 	.word	0x0800753d
 8007334:	0800753d 	.word	0x0800753d
 8007338:	0800753d 	.word	0x0800753d
 800733c:	0800753d 	.word	0x0800753d
 8007340:	0800753d 	.word	0x0800753d
 8007344:	0800753d 	.word	0x0800753d
 8007348:	0800753d 	.word	0x0800753d
 800734c:	0800753d 	.word	0x0800753d
 8007350:	0800753d 	.word	0x0800753d
 8007354:	0800753d 	.word	0x0800753d
 8007358:	0800753d 	.word	0x0800753d
 800735c:	0800753d 	.word	0x0800753d
 8007360:	0800753d 	.word	0x0800753d
 8007364:	0800753d 	.word	0x0800753d
 8007368:	0800753d 	.word	0x0800753d
 800736c:	0800753d 	.word	0x0800753d
 8007370:	0800753d 	.word	0x0800753d
 8007374:	0800753d 	.word	0x0800753d
 8007378:	0800753d 	.word	0x0800753d
 800737c:	0800753d 	.word	0x0800753d
 8007380:	0800753d 	.word	0x0800753d
 8007384:	0800753d 	.word	0x0800753d
 8007388:	0800753d 	.word	0x0800753d
 800738c:	0800753d 	.word	0x0800753d
 8007390:	0800753d 	.word	0x0800753d
 8007394:	0800753d 	.word	0x0800753d
 8007398:	0800743d 	.word	0x0800743d
    {
    case UART_CLOCKSOURCE_D2PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	681c      	ldr	r4, [r3, #0]
 80073a0:	f7fc f886 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80073a4:	4601      	mov	r1, r0
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	4a13      	ldr	r2, [pc, #76]	; (80073f8 <UART_SetConfig+0xdf0>)
 80073ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b0:	fbb1 f2f3 	udiv	r2, r1, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	441a      	add	r2, r3
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	60e3      	str	r3, [r4, #12]
      break;
 80073c8:	e0bc      	b.n	8007544 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_D2PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	681c      	ldr	r4, [r3, #0]
 80073ce:	f7fc f891 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 80073d2:	4601      	mov	r1, r0
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <UART_SetConfig+0xdf0>)
 80073da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073de:	fbb1 f2f3 	udiv	r2, r1, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	441a      	add	r2, r3
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	60e3      	str	r3, [r4, #12]
      break;
 80073f6:	e0a5      	b.n	8007544 <UART_SetConfig+0xf3c>
 80073f8:	0800e278 	.word	0x0800e278
 80073fc:	58024400 	.word	0x58024400
 8007400:	03d09000 	.word	0x03d09000
 8007404:	003d0900 	.word	0x003d0900
    case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800740c:	4618      	mov	r0, r3
 800740e:	f7fc ffd1 	bl	80043b4 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800741a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800741c:	484d      	ldr	r0, [pc, #308]	; (8007554 <UART_SetConfig+0xf4c>)
 800741e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8007422:	fbb2 f1f1 	udiv	r1, r2, r1
 8007426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007428:	6852      	ldr	r2, [r2, #4]
 800742a:	0852      	lsrs	r2, r2, #1
 800742c:	4411      	add	r1, r2
 800742e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007430:	6852      	ldr	r2, [r2, #4]
 8007432:	fbb1 f2f2 	udiv	r2, r1, r2
 8007436:	b292      	uxth	r2, r2
 8007438:	60da      	str	r2, [r3, #12]
      break;
 800743a:	e083      	b.n	8007544 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800743c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007440:	4618      	mov	r0, r3
 8007442:	f7fd f8ef 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800744e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007450:	4840      	ldr	r0, [pc, #256]	; (8007554 <UART_SetConfig+0xf4c>)
 8007452:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8007456:	fbb2 f1f1 	udiv	r1, r2, r1
 800745a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745c:	6852      	ldr	r2, [r2, #4]
 800745e:	0852      	lsrs	r2, r2, #1
 8007460:	4411      	add	r1, r2
 8007462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007464:	6852      	ldr	r2, [r2, #4]
 8007466:	fbb1 f2f2 	udiv	r2, r1, r2
 800746a:	b292      	uxth	r2, r2
 800746c:	60da      	str	r2, [r3, #12]
      break;
 800746e:	e069      	b.n	8007544 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007470:	4b39      	ldr	r3, [pc, #228]	; (8007558 <UART_SetConfig+0xf50>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <UART_SetConfig+0xeac>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a35      	ldr	r2, [pc, #212]	; (8007558 <UART_SetConfig+0xf50>)
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	08d2      	lsrs	r2, r2, #3
 8007486:	f002 0203 	and.w	r2, r2, #3
 800748a:	4934      	ldr	r1, [pc, #208]	; (800755c <UART_SetConfig+0xf54>)
 800748c:	fa21 f202 	lsr.w	r2, r1, r2
 8007490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007492:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007494:	482f      	ldr	r0, [pc, #188]	; (8007554 <UART_SetConfig+0xf4c>)
 8007496:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800749a:	fbb2 f1f1 	udiv	r1, r2, r1
 800749e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	0852      	lsrs	r2, r2, #1
 80074a4:	4411      	add	r1, r2
 80074a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a8:	6852      	ldr	r2, [r2, #4]
 80074aa:	fbb1 f2f2 	udiv	r2, r1, r2
 80074ae:	b292      	uxth	r2, r2
 80074b0:	60da      	str	r2, [r3, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      }
      break;
 80074b2:	e047      	b.n	8007544 <UART_SetConfig+0xf3c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074bc:	4925      	ldr	r1, [pc, #148]	; (8007554 <UART_SetConfig+0xf4c>)
 80074be:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4a25      	ldr	r2, [pc, #148]	; (800755c <UART_SetConfig+0xf54>)
 80074c6:	fbb2 f1f1 	udiv	r1, r2, r1
 80074ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074cc:	6852      	ldr	r2, [r2, #4]
 80074ce:	0852      	lsrs	r2, r2, #1
 80074d0:	4411      	add	r1, r2
 80074d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d4:	6852      	ldr	r2, [r2, #4]
 80074d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80074da:	b292      	uxth	r2, r2
 80074dc:	60da      	str	r2, [r3, #12]
      break;
 80074de:	e031      	b.n	8007544 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_CSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074e8:	491a      	ldr	r1, [pc, #104]	; (8007554 <UART_SetConfig+0xf4c>)
 80074ea:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80074ee:	4611      	mov	r1, r2
 80074f0:	4a1b      	ldr	r2, [pc, #108]	; (8007560 <UART_SetConfig+0xf58>)
 80074f2:	fbb2 f1f1 	udiv	r1, r2, r1
 80074f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f8:	6852      	ldr	r2, [r2, #4]
 80074fa:	0852      	lsrs	r2, r2, #1
 80074fc:	4411      	add	r1, r2
 80074fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007500:	6852      	ldr	r2, [r2, #4]
 8007502:	fbb1 f2f2 	udiv	r2, r1, r2
 8007506:	b292      	uxth	r2, r2
 8007508:	60da      	str	r2, [r3, #12]
      break;
 800750a:	e01b      	b.n	8007544 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007514:	490f      	ldr	r1, [pc, #60]	; (8007554 <UART_SetConfig+0xf4c>)
 8007516:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800751a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800751e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007522:	b292      	uxth	r2, r2
 8007524:	4611      	mov	r1, r2
 8007526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007528:	6852      	ldr	r2, [r2, #4]
 800752a:	0852      	lsrs	r2, r2, #1
 800752c:	4411      	add	r1, r2
 800752e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007530:	6852      	ldr	r2, [r2, #4]
 8007532:	fbb1 f2f2 	udiv	r2, r1, r2
 8007536:	b292      	uxth	r2, r2
 8007538:	60da      	str	r2, [r3, #12]
      break;
 800753a:	e003      	b.n	8007544 <UART_SetConfig+0xf3c>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007542:	bf00      	nop
    }
  }

  return ret;
 8007544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007548:	4618      	mov	r0, r3
 800754a:	3754      	adds	r7, #84	; 0x54
 800754c:	46bd      	mov	sp, r7
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	bf00      	nop
 8007554:	0800e278 	.word	0x0800e278
 8007558:	58024400 	.word	0x58024400
 800755c:	03d09000 	.word	0x03d09000
 8007560:	003d0900 	.word	0x003d0900

08007564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	6852      	ldr	r2, [r2, #4]
 8007582:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6812      	ldr	r2, [r2, #0]
 80075a2:	6852      	ldr	r2, [r2, #4]
 80075a4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	6852      	ldr	r2, [r2, #4]
 80075c6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	6852      	ldr	r2, [r2, #4]
 80075e8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	6892      	ldr	r2, [r2, #8]
 800760a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	6892      	ldr	r2, [r2, #8]
 800762c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007634:	430a      	orrs	r2, r1
 8007636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01a      	beq.n	800767a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	6852      	ldr	r2, [r2, #4]
 800764e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007662:	d10a      	bne.n	800767a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	6852      	ldr	r2, [r2, #4]
 800766e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80076ba:	f7f8 fff7 	bl	80006ac <HAL_GetTick>
 80076be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d10e      	bne.n	80076ec <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f82c 	bl	800773a <UART_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e022      	b.n	8007732 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d10e      	bne.n	8007718 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f816 	bl	800773a <UART_WaitOnFlagUntilTimeout>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e00c      	b.n	8007732 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  huart->RxState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774a:	e02c      	b.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007752:	d028      	beq.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0x30>
 800775a:	f7f8 ffa7 	bl	80006ac <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	429a      	cmp	r2, r3
 8007768:	d91d      	bls.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007778:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	6812      	ldr	r2, [r2, #0]
 8007782:	6892      	ldr	r2, [r2, #8]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2220      	movs	r2, #32
 8007796:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e00f      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	401a      	ands	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	bf0c      	ite	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	2300      	movne	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d0c3      	beq.n	800774c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	4603      	mov	r3, r0
 80077d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80077dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077e0:	2b84      	cmp	r3, #132	; 0x84
 80077e2:	d005      	beq.n	80077f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80077e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	3303      	adds	r3, #3
 80077ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80077f0:	68fb      	ldr	r3, [r7, #12]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007802:	f001 fbd5 	bl	8008fb0 <vTaskStartScheduler>
  
  return osOK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd80      	pop	{r7, pc}

0800780c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800780c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af02      	add	r7, sp, #8
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685c      	ldr	r4, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007822:	b29e      	uxth	r6, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ffcf 	bl	80077ce <makeFreeRtosPriority>
 8007830:	4602      	mov	r2, r0
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	9200      	str	r2, [sp, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	4632      	mov	r2, r6
 800783e:	4629      	mov	r1, r5
 8007840:	4620      	mov	r0, r4
 8007842:	f001 f9c3 	bl	8008bcc <xTaskCreate>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d001      	beq.n	8007850 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007850:	68fb      	ldr	r3, [r7, #12]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800785a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800785e:	f001 ffe1 	bl	8009824 <xTaskGetSchedulerState>
 8007862:	4603      	mov	r3, r0
 8007864:	2b01      	cmp	r3, #1
 8007866:	d001      	beq.n	800786c <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8007868:	f000 fa2e 	bl	8007cc8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800786c:	bf00      	nop
 800786e:	bd80      	pop	{r7, pc}

08007870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0208 	add.w	r2, r3, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f04f 32ff 	mov.w	r2, #4294967295
 8007888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f103 0208 	add.w	r2, r3, #8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f103 0208 	add.w	r2, r3, #8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d103      	bne.n	8007932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e00c      	b.n	800794c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3308      	adds	r3, #8
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	e002      	b.n	8007940 <vListInsert+0x2e>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	429a      	cmp	r2, r3
 800794a:	d9f6      	bls.n	800793a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6892      	ldr	r2, [r2, #8]
 800799a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6852      	ldr	r2, [r2, #4]
 80079a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d103      	bne.n	80079b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	1e5a      	subs	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3b04      	subs	r3, #4
 80079f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f023 0201 	bic.w	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3b04      	subs	r3, #4
 8007a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a08:	4a0c      	ldr	r2, [pc, #48]	; (8007a3c <pxPortInitialiseStack+0x64>)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3b14      	subs	r3, #20
 8007a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3b04      	subs	r3, #4
 8007a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f06f 0202 	mvn.w	r2, #2
 8007a26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3b20      	subs	r3, #32
 8007a2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	08007a41 	.word	0x08007a41

08007a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a46:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <prvTaskExitError+0x40>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d00b      	beq.n	8007a68 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	e7fe      	b.n	8007a66 <prvTaskExitError+0x26>
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	b672      	cpsid	i
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	b662      	cpsie	i
 8007a7c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8007a7e:	e7fe      	b.n	8007a7e <prvTaskExitError+0x3e>
 8007a80:	20000008 	.word	0x20000008
	...

08007a90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <pxCurrentTCBConst2>)
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	6808      	ldr	r0, [r1, #0]
 8007a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	f380 8809 	msr	PSP, r0
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8811 	msr	BASEPRI, r0
 8007aaa:	4770      	bx	lr
 8007aac:	f3af 8000 	nop.w

08007ab0 <pxCurrentTCBConst2>:
 8007ab0:	20003c98 	.word	0x20003c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop

08007ab8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007ab8:	4806      	ldr	r0, [pc, #24]	; (8007ad4 <prvPortStartFirstTask+0x1c>)
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f380 8808 	msr	MSP, r0
 8007ac2:	b662      	cpsie	i
 8007ac4:	b661      	cpsie	f
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	df00      	svc	0
 8007ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed08 	.word	0xe000ed08

08007ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ade:	4b2c      	ldr	r3, [pc, #176]	; (8007b90 <xPortStartScheduler+0xb8>)
 8007ae0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	22ff      	movs	r2, #255	; 0xff
 8007aee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <xPortStartScheduler+0xbc>)
 8007b04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b06:	4b24      	ldr	r3, [pc, #144]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b08:	2207      	movs	r2, #7
 8007b0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b0c:	e009      	b.n	8007b22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b0e:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	4a20      	ldr	r2, [pc, #128]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2a:	2b80      	cmp	r3, #128	; 0x80
 8007b2c:	d0ef      	beq.n	8007b0e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b38:	4b17      	ldr	r3, [pc, #92]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <xPortStartScheduler+0xc0>)
 8007b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b4c:	4a13      	ldr	r2, [pc, #76]	; (8007b9c <xPortStartScheduler+0xc4>)
 8007b4e:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <xPortStartScheduler+0xc4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b58:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <xPortStartScheduler+0xc4>)
 8007b5a:	4b10      	ldr	r3, [pc, #64]	; (8007b9c <xPortStartScheduler+0xc4>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b64:	f000 f8d2 	bl	8007d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b68:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <xPortStartScheduler+0xc8>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b6e:	f000 f8e9 	bl	8007d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b72:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <xPortStartScheduler+0xcc>)
 8007b74:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <xPortStartScheduler+0xcc>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b7e:	f7ff ff9b 	bl	8007ab8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8007b82:	f7ff ff5d 	bl	8007a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	e000e400 	.word	0xe000e400
 8007b94:	20000078 	.word	0x20000078
 8007b98:	2000007c 	.word	0x2000007c
 8007b9c:	e000ed20 	.word	0xe000ed20
 8007ba0:	20000008 	.word	0x20000008
 8007ba4:	e000ef34 	.word	0xe000ef34

08007ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	b672      	cpsid	i
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	b662      	cpsie	i
 8007bc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <vPortEnterCritical+0x5c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	4a0e      	ldr	r2, [pc, #56]	; (8007c04 <vPortEnterCritical+0x5c>)
 8007bcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bce:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <vPortEnterCritical+0x5c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d110      	bne.n	8007bf8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <vPortEnterCritical+0x60>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <vPortEnterCritical+0x50>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	b672      	cpsid	i
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	b662      	cpsie	i
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	e7fe      	b.n	8007bf6 <vPortEnterCritical+0x4e>
	}
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20000008 	.word	0x20000008
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <vPortExitCritical+0x50>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <vPortExitCritical+0x26>
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	b672      	cpsid	i
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	b662      	cpsie	i
 8007c2e:	607b      	str	r3, [r7, #4]
 8007c30:	e7fe      	b.n	8007c30 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007c32:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <vPortExitCritical+0x50>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <vPortExitCritical+0x50>)
 8007c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <vPortExitCritical+0x50>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <vPortExitCritical+0x42>
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000008 	.word	0x20000008

08007c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c60:	f3ef 8009 	mrs	r0, PSP
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <pxCurrentTCBConst>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f01e 0f10 	tst.w	lr, #16
 8007c70:	bf08      	it	eq
 8007c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c84:	b672      	cpsid	i
 8007c86:	f380 8811 	msr	BASEPRI, r0
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	b662      	cpsie	i
 8007c94:	f001 fb56 	bl	8009344 <vTaskSwitchContext>
 8007c98:	f04f 0000 	mov.w	r0, #0
 8007c9c:	f380 8811 	msr	BASEPRI, r0
 8007ca0:	bc08      	pop	{r3}
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f01e 0f10 	tst.w	lr, #16
 8007cae:	bf08      	it	eq
 8007cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cb4:	f380 8809 	msr	PSP, r0
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <pxCurrentTCBConst>:
 8007cc0:	20003c98 	.word	0x20003c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ce4:	f001 fa70 	bl	80091c8 <xTaskIncrementTick>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cee:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <xPortSysTickHandler+0x40>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d10:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <vPortSetupTimerInterrupt+0x28>)
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <vPortSetupTimerInterrupt+0x2c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4909      	ldr	r1, [pc, #36]	; (8007d3c <vPortSetupTimerInterrupt+0x30>)
 8007d18:	fba1 1303 	umull	r1, r3, r1, r3
 8007d1c:	099b      	lsrs	r3, r3, #6
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d24:	2207      	movs	r2, #7
 8007d26:	601a      	str	r2, [r3, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	e000e014 	.word	0xe000e014
 8007d38:	20000050 	.word	0x20000050
 8007d3c:	10624dd3 	.word	0x10624dd3
 8007d40:	e000e010 	.word	0xe000e010

08007d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d54 <vPortEnableVFP+0x10>
 8007d48:	6801      	ldr	r1, [r0, #0]
 8007d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d4e:	6001      	str	r1, [r0, #0]
 8007d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d52:	bf00      	nop
 8007d54:	e000ed88 	.word	0xe000ed88

08007d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007d5e:	f3ef 8305 	mrs	r3, IPSR
 8007d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d915      	bls.n	8007d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d6a:	4a18      	ldr	r2, [pc, #96]	; (8007dcc <vPortValidateInterruptPriority+0x74>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d74:	4b16      	ldr	r3, [pc, #88]	; (8007dd0 <vPortValidateInterruptPriority+0x78>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	7afa      	ldrb	r2, [r7, #11]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d20b      	bcs.n	8007d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	b672      	cpsid	i
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	b662      	cpsie	i
 8007d92:	607b      	str	r3, [r7, #4]
 8007d94:	e7fe      	b.n	8007d94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d96:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <vPortValidateInterruptPriority+0x7c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <vPortValidateInterruptPriority+0x80>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90b      	bls.n	8007dbe <vPortValidateInterruptPriority+0x66>
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	e7fe      	b.n	8007dbc <vPortValidateInterruptPriority+0x64>
	}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	e000e3f0 	.word	0xe000e3f0
 8007dd0:	20000078 	.word	0x20000078
 8007dd4:	e000ed0c 	.word	0xe000ed0c
 8007dd8:	2000007c 	.word	0x2000007c

08007ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007de8:	f001 f932 	bl	8009050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dec:	4b5a      	ldr	r3, [pc, #360]	; (8007f58 <pvPortMalloc+0x17c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007df4:	f000 f916 	bl	8008024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007df8:	4b58      	ldr	r3, [pc, #352]	; (8007f5c <pvPortMalloc+0x180>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f040 8090 	bne.w	8007f26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01e      	beq.n	8007e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d015      	beq.n	8007e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	3308      	adds	r3, #8
 8007e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <pvPortMalloc+0x6e>
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	b672      	cpsid	i
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	b662      	cpsie	i
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e7fe      	b.n	8007e48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d06a      	beq.n	8007f26 <pvPortMalloc+0x14a>
 8007e50:	4b43      	ldr	r3, [pc, #268]	; (8007f60 <pvPortMalloc+0x184>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d865      	bhi.n	8007f26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e5a:	4b42      	ldr	r3, [pc, #264]	; (8007f64 <pvPortMalloc+0x188>)
 8007e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e5e:	4b41      	ldr	r3, [pc, #260]	; (8007f64 <pvPortMalloc+0x188>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e64:	e004      	b.n	8007e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d203      	bcs.n	8007e82 <pvPortMalloc+0xa6>
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f1      	bne.n	8007e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e82:	4b35      	ldr	r3, [pc, #212]	; (8007f58 <pvPortMalloc+0x17c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d04c      	beq.n	8007f26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2208      	movs	r2, #8
 8007e92:	4413      	add	r3, r2
 8007e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d920      	bls.n	8007ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <pvPortMalloc+0xfc>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	b672      	cpsid	i
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	b662      	cpsie	i
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	e7fe      	b.n	8007ed6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eea:	69b8      	ldr	r0, [r7, #24]
 8007eec:	f000 f8fc 	bl	80080e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ef0:	4b1b      	ldr	r3, [pc, #108]	; (8007f60 <pvPortMalloc+0x184>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <pvPortMalloc+0x184>)
 8007efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007efe:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <pvPortMalloc+0x184>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <pvPortMalloc+0x18c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d203      	bcs.n	8007f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <pvPortMalloc+0x184>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a16      	ldr	r2, [pc, #88]	; (8007f68 <pvPortMalloc+0x18c>)
 8007f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <pvPortMalloc+0x180>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f26:	f001 f8a1 	bl	800906c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <pvPortMalloc+0x170>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	b672      	cpsid	i
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	b662      	cpsie	i
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e7fe      	b.n	8007f4a <pvPortMalloc+0x16e>
	return pvReturn;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3728      	adds	r7, #40	; 0x28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20003c88 	.word	0x20003c88
 8007f5c:	20003c94 	.word	0x20003c94
 8007f60:	20003c8c 	.word	0x20003c8c
 8007f64:	20003c80 	.word	0x20003c80
 8007f68:	20003c90 	.word	0x20003c90

08007f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04a      	beq.n	8008014 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f7e:	2308      	movs	r3, #8
 8007f80:	425b      	negs	r3, r3
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4413      	add	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	4b22      	ldr	r3, [pc, #136]	; (800801c <vPortFree+0xb0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4013      	ands	r3, r2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <vPortFree+0x46>
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	b672      	cpsid	i
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	b662      	cpsie	i
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	e7fe      	b.n	8007fb0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <vPortFree+0x66>
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	b672      	cpsid	i
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	b662      	cpsie	i
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	e7fe      	b.n	8007fd0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	4b11      	ldr	r3, [pc, #68]	; (800801c <vPortFree+0xb0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d019      	beq.n	8008014 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d115      	bne.n	8008014 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	4b0b      	ldr	r3, [pc, #44]	; (800801c <vPortFree+0xb0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	401a      	ands	r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ff8:	f001 f82a 	bl	8009050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <vPortFree+0xb4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4413      	add	r3, r2
 8008006:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vPortFree+0xb4>)
 8008008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800800a:	6938      	ldr	r0, [r7, #16]
 800800c:	f000 f86c 	bl	80080e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008010:	f001 f82c 	bl	800906c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008014:	bf00      	nop
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20003c94 	.word	0x20003c94
 8008020:	20003c8c 	.word	0x20003c8c

08008024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800802a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800802e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008030:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <prvHeapInit+0xac>)
 8008032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3307      	adds	r3, #7
 8008042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <prvHeapInit+0xac>)
 8008054:	4413      	add	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800805c:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <prvHeapInit+0xb0>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <prvHeapInit+0xb0>)
 8008064:	2200      	movs	r2, #0
 8008066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4413      	add	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008070:	2208      	movs	r2, #8
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0307 	bic.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <prvHeapInit+0xb4>)
 8008084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvHeapInit+0xb4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800808e:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <prvHeapInit+0xb4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvHeapInit+0xb4>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <prvHeapInit+0xb8>)
 80080b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <prvHeapInit+0xbc>)
 80080ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <prvHeapInit+0xc0>)
 80080be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080c2:	601a      	str	r2, [r3, #0]
}
 80080c4:	bf00      	nop
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000080 	.word	0x20000080
 80080d4:	20003c80 	.word	0x20003c80
 80080d8:	20003c88 	.word	0x20003c88
 80080dc:	20003c90 	.word	0x20003c90
 80080e0:	20003c8c 	.word	0x20003c8c
 80080e4:	20003c94 	.word	0x20003c94

080080e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080f0:	4b28      	ldr	r3, [pc, #160]	; (8008194 <prvInsertBlockIntoFreeList+0xac>)
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e002      	b.n	80080fc <prvInsertBlockIntoFreeList+0x14>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d3f7      	bcc.n	80080f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	441a      	add	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d108      	bne.n	800812a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	441a      	add	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	441a      	add	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d118      	bne.n	8008170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <prvInsertBlockIntoFreeList+0xb0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d00d      	beq.n	8008166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e008      	b.n	8008178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008166:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <prvInsertBlockIntoFreeList+0xb0>)
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e003      	b.n	8008178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d002      	beq.n	8008186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20003c80 	.word	0x20003c80
 8008198:	20003c88 	.word	0x20003c88

0800819c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <xQueueGenericReset+0x2c>
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	b672      	cpsid	i
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	b662      	cpsie	i
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	e7fe      	b.n	80081c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80081c8:	f7ff fcee 	bl	8007ba8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d4:	68f9      	ldr	r1, [r7, #12]
 80081d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081d8:	fb01 f303 	mul.w	r3, r1, r3
 80081dc:	441a      	add	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f8:	3b01      	subs	r3, #1
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081fe:	fb01 f303 	mul.w	r3, r1, r3
 8008202:	441a      	add	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	22ff      	movs	r2, #255	; 0xff
 800820c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	22ff      	movs	r2, #255	; 0xff
 8008214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d114      	bne.n	8008248 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01a      	beq.n	800825c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3310      	adds	r3, #16
 800822a:	4618      	mov	r0, r3
 800822c:	f001 f938 	bl	80094a0 <xTaskRemoveFromEventList>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008236:	4b0d      	ldr	r3, [pc, #52]	; (800826c <xQueueGenericReset+0xd0>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	e009      	b.n	800825c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3310      	adds	r3, #16
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff fb0f 	bl	8007870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3324      	adds	r3, #36	; 0x24
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fb0a 	bl	8007870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800825c:	f7ff fcd6 	bl	8007c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008260:	2301      	movs	r3, #1
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	; 0x28
 8008274:	af02      	add	r7, sp, #8
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <xQueueGenericCreate+0x2c>
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	b672      	cpsid	i
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	b662      	cpsie	i
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	e7fe      	b.n	800829a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e004      	b.n	80082b2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	fb02 f303 	mul.w	r3, r2, r3
 80082b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	3348      	adds	r3, #72	; 0x48
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fd90 	bl	8007ddc <pvPortMalloc>
 80082bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	3348      	adds	r3, #72	; 0x48
 80082c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ca:	79fa      	ldrb	r2, [r7, #7]
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4613      	mov	r3, r2
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f805 	bl	80082e6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80082dc:	69bb      	ldr	r3, [r7, #24]
	}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e002      	b.n	8008308 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008314:	2101      	movs	r1, #1
 8008316:	69b8      	ldr	r0, [r7, #24]
 8008318:	f7ff ff40 	bl	800819c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00e      	beq.n	8008350 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f81c 	bl	8008388 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008362:	2301      	movs	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	461a      	mov	r2, r3
 800836e:	6939      	ldr	r1, [r7, #16]
 8008370:	6978      	ldr	r0, [r7, #20]
 8008372:	f7ff ff7d 	bl	8008270 <xQueueGenericCreate>
 8008376:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff ffd3 	bl	8008324 <prvInitialiseMutex>

		return pxNewQueue;
 800837e:	68fb      	ldr	r3, [r7, #12]
	}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08e      	sub	sp, #56	; 0x38
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008396:	2300      	movs	r3, #0
 8008398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <xQueueGenericSend+0x34>
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	b672      	cpsid	i
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	b662      	cpsie	i
 80083b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80083ba:	e7fe      	b.n	80083ba <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d103      	bne.n	80083ca <xQueueGenericSend+0x42>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <xQueueGenericSend+0x46>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e000      	b.n	80083d0 <xQueueGenericSend+0x48>
 80083ce:	2300      	movs	r3, #0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <xQueueGenericSend+0x64>
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	b672      	cpsid	i
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	b662      	cpsie	i
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ea:	e7fe      	b.n	80083ea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d103      	bne.n	80083fa <xQueueGenericSend+0x72>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <xQueueGenericSend+0x76>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <xQueueGenericSend+0x78>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <xQueueGenericSend+0x94>
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	b672      	cpsid	i
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	b662      	cpsie	i
 8008418:	623b      	str	r3, [r7, #32]
 800841a:	e7fe      	b.n	800841a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800841c:	f001 fa02 	bl	8009824 <xTaskGetSchedulerState>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <xQueueGenericSend+0xa4>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <xQueueGenericSend+0xa8>
 800842c:	2301      	movs	r3, #1
 800842e:	e000      	b.n	8008432 <xQueueGenericSend+0xaa>
 8008430:	2300      	movs	r3, #0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <xQueueGenericSend+0xc6>
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	b672      	cpsid	i
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	b662      	cpsie	i
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e7fe      	b.n	800844c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800844e:	f7ff fbab 	bl	8007ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	429a      	cmp	r2, r3
 800845c:	d302      	bcc.n	8008464 <xQueueGenericSend+0xdc>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d129      	bne.n	80084b8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846a:	f000 fa43 	bl	80088f4 <prvCopyDataToQueue>
 800846e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d010      	beq.n	800849a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	3324      	adds	r3, #36	; 0x24
 800847c:	4618      	mov	r0, r3
 800847e:	f001 f80f 	bl	80094a0 <xTaskRemoveFromEventList>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d013      	beq.n	80084b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008488:	4b3f      	ldr	r3, [pc, #252]	; (8008588 <xQueueGenericSend+0x200>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	e00a      	b.n	80084b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d007      	beq.n	80084b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084a0:	4b39      	ldr	r3, [pc, #228]	; (8008588 <xQueueGenericSend+0x200>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084b0:	f7ff fbac 	bl	8007c0c <vPortExitCritical>
				return pdPASS;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e063      	b.n	8008580 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d103      	bne.n	80084c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084be:	f7ff fba5 	bl	8007c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e05c      	b.n	8008580 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80084cc:	f107 0314 	add.w	r3, r7, #20
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 f849 	bl	8009568 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084da:	f7ff fb97 	bl	8007c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084de:	f000 fdb7 	bl	8009050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084e2:	f7ff fb61 	bl	8007ba8 <vPortEnterCritical>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ec:	b25b      	sxtb	r3, r3
 80084ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f2:	d103      	bne.n	80084fc <xQueueGenericSend+0x174>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008502:	b25b      	sxtb	r3, r3
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008508:	d103      	bne.n	8008512 <xQueueGenericSend+0x18a>
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008512:	f7ff fb7b 	bl	8007c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008516:	1d3a      	adds	r2, r7, #4
 8008518:	f107 0314 	add.w	r3, r7, #20
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f001 f848 	bl	80095b4 <xTaskCheckForTimeOut>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d124      	bne.n	8008574 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800852a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800852c:	f000 fada 	bl	8008ae4 <prvIsQueueFull>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d018      	beq.n	8008568 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	3310      	adds	r3, #16
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	4611      	mov	r1, r2
 800853e:	4618      	mov	r0, r3
 8008540:	f000 ff5c 	bl	80093fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008546:	f000 fa65 	bl	8008a14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800854a:	f000 fd8f 	bl	800906c <xTaskResumeAll>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f47f af7c 	bne.w	800844e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <xQueueGenericSend+0x200>)
 8008558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	e772      	b.n	800844e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800856a:	f000 fa53 	bl	8008a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800856e:	f000 fd7d 	bl	800906c <xTaskResumeAll>
 8008572:	e76c      	b.n	800844e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008576:	f000 fa4d 	bl	8008a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800857a:	f000 fd77 	bl	800906c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800857e:	2300      	movs	r3, #0
		}
	}
}
 8008580:	4618      	mov	r0, r3
 8008582:	3738      	adds	r7, #56	; 0x38
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <xQueueGenericSendFromISR+0x30>
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	b672      	cpsid	i
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	b662      	cpsie	i
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
 80085ba:	e7fe      	b.n	80085ba <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <xQueueGenericSendFromISR+0x3e>
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <xQueueGenericSendFromISR+0x42>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <xQueueGenericSendFromISR+0x44>
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10b      	bne.n	80085ec <xQueueGenericSendFromISR+0x60>
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	b672      	cpsid	i
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	b662      	cpsie	i
 80085e8:	623b      	str	r3, [r7, #32]
 80085ea:	e7fe      	b.n	80085ea <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d103      	bne.n	80085fa <xQueueGenericSendFromISR+0x6e>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <xQueueGenericSendFromISR+0x72>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueGenericSendFromISR+0x74>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <xQueueGenericSendFromISR+0x90>
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	b672      	cpsid	i
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	b662      	cpsie	i
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	e7fe      	b.n	800861a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800861c:	f7ff fb9c 	bl	8007d58 <vPortValidateInterruptPriority>
	__asm volatile
 8008620:	f3ef 8211 	mrs	r2, BASEPRI
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	b672      	cpsid	i
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	b662      	cpsie	i
 8008638:	61ba      	str	r2, [r7, #24]
 800863a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800863c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <xQueueGenericSendFromISR+0xc6>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d12c      	bne.n	80086ac <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008662:	f000 f947 	bl	80088f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008666:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800866a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866e:	d112      	bne.n	8008696 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d016      	beq.n	80086a6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ff0f 	bl	80094a0 <xTaskRemoveFromEventList>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00e      	beq.n	80086a6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e007      	b.n	80086a6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800869a:	3301      	adds	r3, #1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	b25a      	sxtb	r2, r3
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086a6:	2301      	movs	r3, #1
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80086aa:	e001      	b.n	80086b0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3738      	adds	r7, #56	; 0x38
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08e      	sub	sp, #56	; 0x38
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <xQueueGenericReceive+0x34>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
 80086f6:	e7fe      	b.n	80086f6 <xQueueGenericReceive+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <xQueueGenericReceive+0x42>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <xQueueGenericReceive+0x46>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueGenericReceive+0x48>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <xQueueGenericReceive+0x64>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	b672      	cpsid	i
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	b662      	cpsie	i
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e7fe      	b.n	8008726 <xQueueGenericReceive+0x62>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008728:	f001 f87c 	bl	8009824 <xTaskGetSchedulerState>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <xQueueGenericReceive+0x74>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <xQueueGenericReceive+0x78>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <xQueueGenericReceive+0x7a>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueGenericReceive+0x96>
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	b672      	cpsid	i
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	b662      	cpsie	i
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e7fe      	b.n	8008758 <xQueueGenericReceive+0x94>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800875a:	f7ff fa25 	bl	8007ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d046      	beq.n	80087f8 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008774:	f000 f928 	bl	80089c8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d121      	bne.n	80087c2 <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	1e5a      	subs	r2, r3, #1
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800878e:	f001 f965 	bl	8009a5c <pvTaskIncrementMutexHeldCount>
 8008792:	4602      	mov	r2, r0
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d027      	beq.n	80087f0 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	3310      	adds	r3, #16
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 fe7b 	bl	80094a0 <xTaskRemoveFromEventList>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d01f      	beq.n	80087f0 <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80087b0:	4b4f      	ldr	r3, [pc, #316]	; (80088f0 <xQueueGenericReceive+0x22c>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	e016      	b.n	80087f0 <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087c6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00f      	beq.n	80087f0 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	3324      	adds	r3, #36	; 0x24
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fe63 	bl	80094a0 <xTaskRemoveFromEventList>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80087e0:	4b43      	ldr	r3, [pc, #268]	; (80088f0 <xQueueGenericReceive+0x22c>)
 80087e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80087f0:	f7ff fa0c 	bl	8007c0c <vPortExitCritical>
				return pdPASS;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e077      	b.n	80088e8 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d103      	bne.n	8008806 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087fe:	f7ff fa05 	bl	8007c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008802:	2300      	movs	r3, #0
 8008804:	e070      	b.n	80088e8 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800880c:	f107 0314 	add.w	r3, r7, #20
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fea9 	bl	8009568 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800881a:	f7ff f9f7 	bl	8007c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800881e:	f000 fc17 	bl	8009050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008822:	f7ff f9c1 	bl	8007ba8 <vPortEnterCritical>
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800882c:	b25b      	sxtb	r3, r3
 800882e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008832:	d103      	bne.n	800883c <xQueueGenericReceive+0x178>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008842:	b25b      	sxtb	r3, r3
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d103      	bne.n	8008852 <xQueueGenericReceive+0x18e>
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008852:	f7ff f9db 	bl	8007c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008856:	1d3a      	adds	r2, r7, #4
 8008858:	f107 0314 	add.w	r3, r7, #20
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fea8 	bl	80095b4 <xTaskCheckForTimeOut>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d131      	bne.n	80088ce <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800886a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800886c:	f000 f924 	bl	8008ab8 <prvIsQueueEmpty>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d025      	beq.n	80088c2 <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d108      	bne.n	8008890 <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 800887e:	f7ff f993 	bl	8007ba8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 ffea 	bl	8009860 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800888c:	f7ff f9be 	bl	8007c0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	3324      	adds	r3, #36	; 0x24
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fdaf 	bl	80093fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800889e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a0:	f000 f8b8 	bl	8008a14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088a4:	f000 fbe2 	bl	800906c <xTaskResumeAll>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f47f af55 	bne.w	800875a <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <xQueueGenericReceive+0x22c>)
 80088b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	e74b      	b.n	800875a <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c4:	f000 f8a6 	bl	8008a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088c8:	f000 fbd0 	bl	800906c <xTaskResumeAll>
 80088cc:	e745      	b.n	800875a <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80088ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088d0:	f000 f8a0 	bl	8008a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088d4:	f000 fbca 	bl	800906c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088da:	f000 f8ed 	bl	8008ab8 <prvIsQueueEmpty>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f43f af3a 	beq.w	800875a <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3738      	adds	r7, #56	; 0x38
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	e000ed04 	.word	0xe000ed04

080088f4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008908:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10d      	bne.n	800892e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d14d      	bne.n	80089b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	4618      	mov	r0, r3
 8008920:	f001 f814 	bl	800994c <xTaskPriorityDisinherit>
 8008924:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	605a      	str	r2, [r3, #4]
 800892c:	e043      	b.n	80089b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d119      	bne.n	8008968 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6898      	ldr	r0, [r3, #8]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	461a      	mov	r2, r3
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	f005 fbe6 	bl	800e110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894c:	441a      	add	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	429a      	cmp	r2, r3
 800895c:	d32b      	bcc.n	80089b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	609a      	str	r2, [r3, #8]
 8008966:	e026      	b.n	80089b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	68d8      	ldr	r0, [r3, #12]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	461a      	mov	r2, r3
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	f005 fbcc 	bl	800e110 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	425b      	negs	r3, r3
 8008982:	441a      	add	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d207      	bcs.n	80089a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	425b      	negs	r3, r3
 800899e:	441a      	add	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d105      	bne.n	80089b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089be:	697b      	ldr	r3, [r7, #20]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d018      	beq.n	8008a0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	441a      	add	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d303      	bcc.n	80089fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68d9      	ldr	r1, [r3, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	461a      	mov	r2, r3
 8008a06:	6838      	ldr	r0, [r7, #0]
 8008a08:	f005 fb82 	bl	800e110 <memcpy>
	}
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a1c:	f7ff f8c4 	bl	8007ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a28:	e011      	b.n	8008a4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d012      	beq.n	8008a58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3324      	adds	r3, #36	; 0x24
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fd32 	bl	80094a0 <xTaskRemoveFromEventList>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a42:	f000 fe19 	bl	8009678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	dce9      	bgt.n	8008a2a <prvUnlockQueue+0x16>
 8008a56:	e000      	b.n	8008a5a <prvUnlockQueue+0x46>
					break;
 8008a58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	22ff      	movs	r2, #255	; 0xff
 8008a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a62:	f7ff f8d3 	bl	8007c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a66:	f7ff f89f 	bl	8007ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a72:	e011      	b.n	8008a98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d012      	beq.n	8008aa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3310      	adds	r3, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fd0d 	bl	80094a0 <xTaskRemoveFromEventList>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a8c:	f000 fdf4 	bl	8009678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dce9      	bgt.n	8008a74 <prvUnlockQueue+0x60>
 8008aa0:	e000      	b.n	8008aa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008aa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	22ff      	movs	r2, #255	; 0xff
 8008aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008aac:	f7ff f8ae 	bl	8007c0c <vPortExitCritical>
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ac0:	f7ff f872 	bl	8007ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008acc:	2301      	movs	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e001      	b.n	8008ad6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ad6:	f7ff f899 	bl	8007c0c <vPortExitCritical>

	return xReturn;
 8008ada:	68fb      	ldr	r3, [r7, #12]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aec:	f7ff f85c 	bl	8007ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d102      	bne.n	8008b02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008afc:	2301      	movs	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e001      	b.n	8008b06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b06:	f7ff f881 	bl	8007c0c <vPortExitCritical>

	return xReturn;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e014      	b.n	8008b4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b24:	4a0e      	ldr	r2, [pc, #56]	; (8008b60 <vQueueAddToRegistry+0x4c>)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10b      	bne.n	8008b48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b30:	490b      	ldr	r1, [pc, #44]	; (8008b60 <vQueueAddToRegistry+0x4c>)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b3a:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <vQueueAddToRegistry+0x4c>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	4413      	add	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b46:	e005      	b.n	8008b54 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b07      	cmp	r3, #7
 8008b52:	d9e7      	bls.n	8008b24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20003e74 	.word	0x20003e74

08008b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b74:	f7ff f818 	bl	8007ba8 <vPortEnterCritical>
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d103      	bne.n	8008b8e <vQueueWaitForMessageRestricted+0x2a>
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b94:	b25b      	sxtb	r3, r3
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d103      	bne.n	8008ba4 <vQueueWaitForMessageRestricted+0x40>
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba4:	f7ff f832 	bl	8007c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	3324      	adds	r3, #36	; 0x24
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fc45 	bl	8009448 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bbe:	6978      	ldr	r0, [r7, #20]
 8008bc0:	f7ff ff28 	bl	8008a14 <prvUnlockQueue>
	}
 8008bc4:	bf00      	nop
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	; 0x30
 8008bd0:	af04      	add	r7, sp, #16
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff f8fb 	bl	8007ddc <pvPortMalloc>
 8008be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00e      	beq.n	8008c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008bee:	2054      	movs	r0, #84	; 0x54
 8008bf0:	f7ff f8f4 	bl	8007ddc <pvPortMalloc>
 8008bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	631a      	str	r2, [r3, #48]	; 0x30
 8008c02:	e005      	b.n	8008c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c04:	6978      	ldr	r0, [r7, #20]
 8008c06:	f7ff f9b1 	bl	8007f6c <vPortFree>
 8008c0a:	e001      	b.n	8008c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d013      	beq.n	8008c3e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c16:	88fa      	ldrh	r2, [r7, #6]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	9302      	str	r3, [sp, #8]
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f80e 	bl	8008c4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c32:	69f8      	ldr	r0, [r7, #28]
 8008c34:	f000 f88c 	bl	8008d50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	61bb      	str	r3, [r7, #24]
 8008c3c:	e002      	b.n	8008c44 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c44:	69bb      	ldr	r3, [r7, #24]
	}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3720      	adds	r7, #32
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b088      	sub	sp, #32
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008c66:	440b      	add	r3, r1
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	f023 0307 	bic.w	r3, r3, #7
 8008c74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <prvInitialiseNewTask+0x4a>
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	b672      	cpsid	i
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	b662      	cpsie	i
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	e7fe      	b.n	8008c96 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	e012      	b.n	8008cc4 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	7819      	ldrb	r1, [r3, #0]
 8008ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	3334      	adds	r3, #52	; 0x34
 8008cae:	460a      	mov	r2, r1
 8008cb0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d006      	beq.n	8008ccc <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d9e9      	bls.n	8008c9e <prvInitialiseNewTask+0x50>
 8008cca:	e000      	b.n	8008cce <prvInitialiseNewTask+0x80>
		{
			break;
 8008ccc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d901      	bls.n	8008ce0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cdc:	2306      	movs	r3, #6
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	2200      	movs	r2, #0
 8008cf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fdda 	bl	80078b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fdd5 	bl	80078b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	f1c3 0207 	rsb	r2, r3, #7
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	2200      	movs	r2, #0
 8008d20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	69b8      	ldr	r0, [r7, #24]
 8008d30:	f7fe fe52 	bl	80079d8 <pxPortInitialiseStack>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d46:	bf00      	nop
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d58:	f7fe ff26 	bl	8007ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <prvAddNewTaskToReadyList+0xb8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	4a29      	ldr	r2, [pc, #164]	; (8008e08 <prvAddNewTaskToReadyList+0xb8>)
 8008d64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d66:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <prvAddNewTaskToReadyList+0xbc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d6e:	4a27      	ldr	r2, [pc, #156]	; (8008e0c <prvAddNewTaskToReadyList+0xbc>)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d74:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <prvAddNewTaskToReadyList+0xb8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d110      	bne.n	8008d9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d7c:	f000 fca0 	bl	80096c0 <prvInitialiseTaskLists>
 8008d80:	e00d      	b.n	8008d9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d82:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <prvAddNewTaskToReadyList+0xc0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d8a:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <prvAddNewTaskToReadyList+0xbc>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d802      	bhi.n	8008d9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d98:	4a1c      	ldr	r2, [pc, #112]	; (8008e0c <prvAddNewTaskToReadyList+0xbc>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d9e:	4b1d      	ldr	r3, [pc, #116]	; (8008e14 <prvAddNewTaskToReadyList+0xc4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <prvAddNewTaskToReadyList+0xc4>)
 8008da6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	2201      	movs	r2, #1
 8008dae:	409a      	lsls	r2, r3
 8008db0:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <prvAddNewTaskToReadyList+0xc8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <prvAddNewTaskToReadyList+0xc8>)
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4a15      	ldr	r2, [pc, #84]	; (8008e1c <prvAddNewTaskToReadyList+0xcc>)
 8008dc8:	441a      	add	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7fe fd7a 	bl	80078ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dd6:	f7fe ff19 	bl	8007c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dda:	4b0d      	ldr	r3, [pc, #52]	; (8008e10 <prvAddNewTaskToReadyList+0xc0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <prvAddNewTaskToReadyList+0xbc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d207      	bcs.n	8008e00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008df0:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <prvAddNewTaskToReadyList+0xd0>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20003d98 	.word	0x20003d98
 8008e0c:	20003c98 	.word	0x20003c98
 8008e10:	20003da4 	.word	0x20003da4
 8008e14:	20003db4 	.word	0x20003db4
 8008e18:	20003da0 	.word	0x20003da0
 8008e1c:	20003c9c 	.word	0x20003c9c
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008e2c:	f7fe febc 	bl	8007ba8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <vTaskDelete+0x18>
 8008e36:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <vTaskDelete+0xf8>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	e000      	b.n	8008e3e <vTaskDelete+0x1a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fd9d 	bl	8007984 <uxListRemove>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d115      	bne.n	8008e7c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4932      	ldr	r1, [pc, #200]	; (8008f20 <vTaskDelete+0xfc>)
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <vTaskDelete+0x58>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e70:	43da      	mvns	r2, r3
 8008e72:	4b2c      	ldr	r3, [pc, #176]	; (8008f24 <vTaskDelete+0x100>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4013      	ands	r3, r2
 8008e78:	4a2a      	ldr	r2, [pc, #168]	; (8008f24 <vTaskDelete+0x100>)
 8008e7a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3318      	adds	r3, #24
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fd7b 	bl	8007984 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008e8e:	4b26      	ldr	r3, [pc, #152]	; (8008f28 <vTaskDelete+0x104>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	4a24      	ldr	r2, [pc, #144]	; (8008f28 <vTaskDelete+0x104>)
 8008e96:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008e98:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <vTaskDelete+0xf8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d10b      	bne.n	8008eba <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4820      	ldr	r0, [pc, #128]	; (8008f2c <vTaskDelete+0x108>)
 8008eaa:	f7fe fd0e 	bl	80078ca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008eae:	4b20      	ldr	r3, [pc, #128]	; (8008f30 <vTaskDelete+0x10c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <vTaskDelete+0x10c>)
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	e009      	b.n	8008ece <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008eba:	4b1e      	ldr	r3, [pc, #120]	; (8008f34 <vTaskDelete+0x110>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	4a1c      	ldr	r2, [pc, #112]	; (8008f34 <vTaskDelete+0x110>)
 8008ec2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 fc77 	bl	80097b8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008eca:	f000 fc85 	bl	80097d8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008ece:	f7fe fe9d 	bl	8007c0c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008ed2:	4b19      	ldr	r3, [pc, #100]	; (8008f38 <vTaskDelete+0x114>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01c      	beq.n	8008f14 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8008eda:	4b10      	ldr	r3, [pc, #64]	; (8008f1c <vTaskDelete+0xf8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d117      	bne.n	8008f14 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <vTaskDelete+0x118>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <vTaskDelete+0xe0>
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	b672      	cpsid	i
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	b662      	cpsie	i
 8008f00:	60bb      	str	r3, [r7, #8]
 8008f02:	e7fe      	b.n	8008f02 <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <vTaskDelete+0x11c>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20003c98 	.word	0x20003c98
 8008f20:	20003c9c 	.word	0x20003c9c
 8008f24:	20003da0 	.word	0x20003da0
 8008f28:	20003db4 	.word	0x20003db4
 8008f2c:	20003d6c 	.word	0x20003d6c
 8008f30:	20003d80 	.word	0x20003d80
 8008f34:	20003d98 	.word	0x20003d98
 8008f38:	20003da4 	.word	0x20003da4
 8008f3c:	20003dc0 	.word	0x20003dc0
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d018      	beq.n	8008f88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f56:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <vTaskDelay+0x64>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <vTaskDelay+0x32>
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	b672      	cpsid	i
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	b662      	cpsie	i
 8008f72:	60bb      	str	r3, [r7, #8]
 8008f74:	e7fe      	b.n	8008f74 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008f76:	f000 f86b 	bl	8009050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fd81 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f82:	f000 f873 	bl	800906c <xTaskResumeAll>
 8008f86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d107      	bne.n	8008f9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f8e:	4b07      	ldr	r3, [pc, #28]	; (8008fac <vTaskDelay+0x68>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20003dc0 	.word	0x20003dc0
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008fb6:	4b20      	ldr	r3, [pc, #128]	; (8009038 <vTaskStartScheduler+0x88>)
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2280      	movs	r2, #128	; 0x80
 8008fc2:	491e      	ldr	r1, [pc, #120]	; (800903c <vTaskStartScheduler+0x8c>)
 8008fc4:	481e      	ldr	r0, [pc, #120]	; (8009040 <vTaskStartScheduler+0x90>)
 8008fc6:	f7ff fe01 	bl	8008bcc <xTaskCreate>
 8008fca:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d102      	bne.n	8008fd8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8008fd2:	f000 fdbd 	bl	8009b50 <xTimerCreateTimerTask>
 8008fd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d117      	bne.n	800900e <vTaskStartScheduler+0x5e>
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	b672      	cpsid	i
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	b662      	cpsie	i
 8008ff2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ff4:	4b13      	ldr	r3, [pc, #76]	; (8009044 <vTaskStartScheduler+0x94>)
 8008ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ffc:	4b12      	ldr	r3, [pc, #72]	; (8009048 <vTaskStartScheduler+0x98>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009002:	4b12      	ldr	r3, [pc, #72]	; (800904c <vTaskStartScheduler+0x9c>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009008:	f7fe fd66 	bl	8007ad8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800900c:	e00f      	b.n	800902e <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d10b      	bne.n	800902e <vTaskStartScheduler+0x7e>
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	b672      	cpsid	i
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	b662      	cpsie	i
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	e7fe      	b.n	800902c <vTaskStartScheduler+0x7c>
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20003dbc 	.word	0x20003dbc
 800903c:	0800e150 	.word	0x0800e150
 8009040:	08009691 	.word	0x08009691
 8009044:	20003db8 	.word	0x20003db8
 8009048:	20003da4 	.word	0x20003da4
 800904c:	20003d9c 	.word	0x20003d9c

08009050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009054:	4b04      	ldr	r3, [pc, #16]	; (8009068 <vTaskSuspendAll+0x18>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a03      	ldr	r2, [pc, #12]	; (8009068 <vTaskSuspendAll+0x18>)
 800905c:	6013      	str	r3, [r2, #0]
}
 800905e:	bf00      	nop
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20003dc0 	.word	0x20003dc0

0800906c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800907a:	4b42      	ldr	r3, [pc, #264]	; (8009184 <xTaskResumeAll+0x118>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10b      	bne.n	800909a <xTaskResumeAll+0x2e>
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	e7fe      	b.n	8009098 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800909a:	f7fe fd85 	bl	8007ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800909e:	4b39      	ldr	r3, [pc, #228]	; (8009184 <xTaskResumeAll+0x118>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	4a37      	ldr	r2, [pc, #220]	; (8009184 <xTaskResumeAll+0x118>)
 80090a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a8:	4b36      	ldr	r3, [pc, #216]	; (8009184 <xTaskResumeAll+0x118>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d161      	bne.n	8009174 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090b0:	4b35      	ldr	r3, [pc, #212]	; (8009188 <xTaskResumeAll+0x11c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d05d      	beq.n	8009174 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090b8:	e02e      	b.n	8009118 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80090ba:	4b34      	ldr	r3, [pc, #208]	; (800918c <xTaskResumeAll+0x120>)
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3318      	adds	r3, #24
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fc5c 	bl	8007984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fc57 	bl	8007984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	2201      	movs	r2, #1
 80090dc:	409a      	lsls	r2, r3
 80090de:	4b2c      	ldr	r3, [pc, #176]	; (8009190 <xTaskResumeAll+0x124>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	4a2a      	ldr	r2, [pc, #168]	; (8009190 <xTaskResumeAll+0x124>)
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4a27      	ldr	r2, [pc, #156]	; (8009194 <xTaskResumeAll+0x128>)
 80090f6:	441a      	add	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fe fbe3 	bl	80078ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b23      	ldr	r3, [pc, #140]	; (8009198 <xTaskResumeAll+0x12c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910e:	429a      	cmp	r2, r3
 8009110:	d302      	bcc.n	8009118 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009112:	4b22      	ldr	r3, [pc, #136]	; (800919c <xTaskResumeAll+0x130>)
 8009114:	2201      	movs	r2, #1
 8009116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009118:	4b1c      	ldr	r3, [pc, #112]	; (800918c <xTaskResumeAll+0x120>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1cc      	bne.n	80090ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009126:	f000 fb57 	bl	80097d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800912a:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <xTaskResumeAll+0x134>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d010      	beq.n	8009158 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009136:	f000 f847 	bl	80091c8 <xTaskIncrementTick>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009140:	4b16      	ldr	r3, [pc, #88]	; (800919c <xTaskResumeAll+0x130>)
 8009142:	2201      	movs	r2, #1
 8009144:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3b01      	subs	r3, #1
 800914a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1f1      	bne.n	8009136 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <xTaskResumeAll+0x134>)
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009158:	4b10      	ldr	r3, [pc, #64]	; (800919c <xTaskResumeAll+0x130>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d009      	beq.n	8009174 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <xTaskResumeAll+0x138>)
 8009166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009174:	f7fe fd4a 	bl	8007c0c <vPortExitCritical>

	return xAlreadyYielded;
 8009178:	68bb      	ldr	r3, [r7, #8]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20003dc0 	.word	0x20003dc0
 8009188:	20003d98 	.word	0x20003d98
 800918c:	20003d58 	.word	0x20003d58
 8009190:	20003da0 	.word	0x20003da0
 8009194:	20003c9c 	.word	0x20003c9c
 8009198:	20003c98 	.word	0x20003c98
 800919c:	20003dac 	.word	0x20003dac
 80091a0:	20003da8 	.word	0x20003da8
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <xTaskGetTickCount+0x1c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091b4:	687b      	ldr	r3, [r7, #4]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20003d9c 	.word	0x20003d9c

080091c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091d2:	4b51      	ldr	r3, [pc, #324]	; (8009318 <xTaskIncrementTick+0x150>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f040 808e 	bne.w	80092f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80091dc:	4b4f      	ldr	r3, [pc, #316]	; (800931c <xTaskIncrementTick+0x154>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091e4:	4a4d      	ldr	r2, [pc, #308]	; (800931c <xTaskIncrementTick+0x154>)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d121      	bne.n	8009234 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091f0:	4b4b      	ldr	r3, [pc, #300]	; (8009320 <xTaskIncrementTick+0x158>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <xTaskIncrementTick+0x4a>
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	b672      	cpsid	i
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	b662      	cpsie	i
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	e7fe      	b.n	8009210 <xTaskIncrementTick+0x48>
 8009212:	4b43      	ldr	r3, [pc, #268]	; (8009320 <xTaskIncrementTick+0x158>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	4b42      	ldr	r3, [pc, #264]	; (8009324 <xTaskIncrementTick+0x15c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a40      	ldr	r2, [pc, #256]	; (8009320 <xTaskIncrementTick+0x158>)
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	4a40      	ldr	r2, [pc, #256]	; (8009324 <xTaskIncrementTick+0x15c>)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4b40      	ldr	r3, [pc, #256]	; (8009328 <xTaskIncrementTick+0x160>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	4a3e      	ldr	r2, [pc, #248]	; (8009328 <xTaskIncrementTick+0x160>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	f000 fad2 	bl	80097d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009234:	4b3d      	ldr	r3, [pc, #244]	; (800932c <xTaskIncrementTick+0x164>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	429a      	cmp	r2, r3
 800923c:	d34d      	bcc.n	80092da <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800923e:	4b38      	ldr	r3, [pc, #224]	; (8009320 <xTaskIncrementTick+0x158>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <xTaskIncrementTick+0x84>
 8009248:	2301      	movs	r3, #1
 800924a:	e000      	b.n	800924e <xTaskIncrementTick+0x86>
 800924c:	2300      	movs	r3, #0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009252:	4b36      	ldr	r3, [pc, #216]	; (800932c <xTaskIncrementTick+0x164>)
 8009254:	f04f 32ff 	mov.w	r2, #4294967295
 8009258:	601a      	str	r2, [r3, #0]
					break;
 800925a:	e03e      	b.n	80092da <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800925c:	4b30      	ldr	r3, [pc, #192]	; (8009320 <xTaskIncrementTick+0x158>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d203      	bcs.n	800927c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009274:	4a2d      	ldr	r2, [pc, #180]	; (800932c <xTaskIncrementTick+0x164>)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6013      	str	r3, [r2, #0]
						break;
 800927a:	e02e      	b.n	80092da <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3304      	adds	r3, #4
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fb7f 	bl	8007984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	3318      	adds	r3, #24
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fb76 	bl	8007984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	2201      	movs	r2, #1
 800929e:	409a      	lsls	r2, r3
 80092a0:	4b23      	ldr	r3, [pc, #140]	; (8009330 <xTaskIncrementTick+0x168>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	4a22      	ldr	r2, [pc, #136]	; (8009330 <xTaskIncrementTick+0x168>)
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4a1f      	ldr	r2, [pc, #124]	; (8009334 <xTaskIncrementTick+0x16c>)
 80092b8:	441a      	add	r2, r3
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	3304      	adds	r3, #4
 80092be:	4619      	mov	r1, r3
 80092c0:	4610      	mov	r0, r2
 80092c2:	f7fe fb02 	bl	80078ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	4b1b      	ldr	r3, [pc, #108]	; (8009338 <xTaskIncrementTick+0x170>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d3b4      	bcc.n	800923e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d8:	e7b1      	b.n	800923e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092da:	4b17      	ldr	r3, [pc, #92]	; (8009338 <xTaskIncrementTick+0x170>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e0:	4914      	ldr	r1, [pc, #80]	; (8009334 <xTaskIncrementTick+0x16c>)
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d907      	bls.n	8009302 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80092f2:	2301      	movs	r3, #1
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e004      	b.n	8009302 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092f8:	4b10      	ldr	r3, [pc, #64]	; (800933c <xTaskIncrementTick+0x174>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	4a0f      	ldr	r2, [pc, #60]	; (800933c <xTaskIncrementTick+0x174>)
 8009300:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009302:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <xTaskIncrementTick+0x178>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800930a:	2301      	movs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800930e:	697b      	ldr	r3, [r7, #20]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20003dc0 	.word	0x20003dc0
 800931c:	20003d9c 	.word	0x20003d9c
 8009320:	20003d50 	.word	0x20003d50
 8009324:	20003d54 	.word	0x20003d54
 8009328:	20003db0 	.word	0x20003db0
 800932c:	20003db8 	.word	0x20003db8
 8009330:	20003da0 	.word	0x20003da0
 8009334:	20003c9c 	.word	0x20003c9c
 8009338:	20003c98 	.word	0x20003c98
 800933c:	20003da8 	.word	0x20003da8
 8009340:	20003dac 	.word	0x20003dac

08009344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800934a:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <vTaskSwitchContext+0xa4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009352:	4b26      	ldr	r3, [pc, #152]	; (80093ec <vTaskSwitchContext+0xa8>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009358:	e040      	b.n	80093dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800935a:	4b24      	ldr	r3, [pc, #144]	; (80093ec <vTaskSwitchContext+0xa8>)
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009360:	4b23      	ldr	r3, [pc, #140]	; (80093f0 <vTaskSwitchContext+0xac>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	fab3 f383 	clz	r3, r3
 800936c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800936e:	7afb      	ldrb	r3, [r7, #11]
 8009370:	f1c3 031f 	rsb	r3, r3, #31
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	491f      	ldr	r1, [pc, #124]	; (80093f4 <vTaskSwitchContext+0xb0>)
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10b      	bne.n	80093a2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	b672      	cpsid	i
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	b662      	cpsie	i
 800939e:	607b      	str	r3, [r7, #4]
 80093a0:	e7fe      	b.n	80093a0 <vTaskSwitchContext+0x5c>
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4a11      	ldr	r2, [pc, #68]	; (80093f4 <vTaskSwitchContext+0xb0>)
 80093ae:	4413      	add	r3, r2
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	605a      	str	r2, [r3, #4]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	3308      	adds	r3, #8
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d104      	bne.n	80093d2 <vTaskSwitchContext+0x8e>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	605a      	str	r2, [r3, #4]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	4a07      	ldr	r2, [pc, #28]	; (80093f8 <vTaskSwitchContext+0xb4>)
 80093da:	6013      	str	r3, [r2, #0]
}
 80093dc:	bf00      	nop
 80093de:	371c      	adds	r7, #28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20003dc0 	.word	0x20003dc0
 80093ec:	20003dac 	.word	0x20003dac
 80093f0:	20003da0 	.word	0x20003da0
 80093f4:	20003c9c 	.word	0x20003c9c
 80093f8:	20003c98 	.word	0x20003c98

080093fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10b      	bne.n	8009424 <vTaskPlaceOnEventList+0x28>
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	b672      	cpsid	i
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	b662      	cpsie	i
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	e7fe      	b.n	8009422 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <vTaskPlaceOnEventList+0x48>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3318      	adds	r3, #24
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7fe fa70 	bl	8007912 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009432:	2101      	movs	r1, #1
 8009434:	6838      	ldr	r0, [r7, #0]
 8009436:	f000 fb25 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20003c98 	.word	0x20003c98

08009448 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10b      	bne.n	8009472 <vTaskPlaceOnEventListRestricted+0x2a>
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	b672      	cpsid	i
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	b662      	cpsie	i
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e7fe      	b.n	8009470 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <vTaskPlaceOnEventListRestricted+0x54>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3318      	adds	r3, #24
 8009478:	4619      	mov	r1, r3
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7fe fa25 	bl	80078ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295
 800948a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	68b8      	ldr	r0, [r7, #8]
 8009490:	f000 faf8 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
	}
 8009494:	bf00      	nop
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20003c98 	.word	0x20003c98

080094a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <xTaskRemoveFromEventList+0x2e>
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	b672      	cpsid	i
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	b662      	cpsie	i
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	e7fe      	b.n	80094cc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	3318      	adds	r3, #24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fa56 	bl	8007984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d8:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <xTaskRemoveFromEventList+0xb0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d11c      	bne.n	800951a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe fa4d 	bl	8007984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	2201      	movs	r2, #1
 80094f0:	409a      	lsls	r2, r3
 80094f2:	4b18      	ldr	r3, [pc, #96]	; (8009554 <xTaskRemoveFromEventList+0xb4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	4a16      	ldr	r2, [pc, #88]	; (8009554 <xTaskRemoveFromEventList+0xb4>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4a13      	ldr	r2, [pc, #76]	; (8009558 <xTaskRemoveFromEventList+0xb8>)
 800950a:	441a      	add	r2, r3
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe f9d9 	bl	80078ca <vListInsertEnd>
 8009518:	e005      	b.n	8009526 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3318      	adds	r3, #24
 800951e:	4619      	mov	r1, r3
 8009520:	480e      	ldr	r0, [pc, #56]	; (800955c <xTaskRemoveFromEventList+0xbc>)
 8009522:	f7fe f9d2 	bl	80078ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <xTaskRemoveFromEventList+0xc0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	429a      	cmp	r2, r3
 8009532:	d905      	bls.n	8009540 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <xTaskRemoveFromEventList+0xc4>)
 800953a:	2201      	movs	r2, #1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e001      	b.n	8009544 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009544:	697b      	ldr	r3, [r7, #20]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20003dc0 	.word	0x20003dc0
 8009554:	20003da0 	.word	0x20003da0
 8009558:	20003c9c 	.word	0x20003c9c
 800955c:	20003d58 	.word	0x20003d58
 8009560:	20003c98 	.word	0x20003c98
 8009564:	20003dac 	.word	0x20003dac

08009568 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <vTaskSetTimeOutState+0x26>
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	b672      	cpsid	i
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	b662      	cpsie	i
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e7fe      	b.n	800958c <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <vTaskSetTimeOutState+0x44>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009596:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <vTaskSetTimeOutState+0x48>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	605a      	str	r2, [r3, #4]
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20003db0 	.word	0x20003db0
 80095b0:	20003d9c 	.word	0x20003d9c

080095b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10b      	bne.n	80095dc <xTaskCheckForTimeOut+0x28>
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	b672      	cpsid	i
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	b662      	cpsie	i
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e7fe      	b.n	80095da <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10b      	bne.n	80095fa <xTaskCheckForTimeOut+0x46>
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	b672      	cpsid	i
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	b662      	cpsie	i
 80095f6:	60bb      	str	r3, [r7, #8]
 80095f8:	e7fe      	b.n	80095f8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80095fa:	f7fe fad5 	bl	8007ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095fe:	4b1c      	ldr	r3, [pc, #112]	; (8009670 <xTaskCheckForTimeOut+0xbc>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d102      	bne.n	8009614 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e026      	b.n	8009662 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b16      	ldr	r3, [pc, #88]	; (8009674 <xTaskCheckForTimeOut+0xc0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d007      	beq.n	8009630 <xTaskCheckForTimeOut+0x7c>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	429a      	cmp	r2, r3
 8009628:	d802      	bhi.n	8009630 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800962a:	2301      	movs	r3, #1
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	e018      	b.n	8009662 <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d20e      	bcs.n	800965e <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6859      	ldr	r1, [r3, #4]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	1acb      	subs	r3, r1, r3
 800964c:	441a      	add	r2, r3
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff ff88 	bl	8009568 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e001      	b.n	8009662 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 800965e:	2301      	movs	r3, #1
 8009660:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009662:	f7fe fad3 	bl	8007c0c <vPortExitCritical>

	return xReturn;
 8009666:	697b      	ldr	r3, [r7, #20]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20003d9c 	.word	0x20003d9c
 8009674:	20003db0 	.word	0x20003db0

08009678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800967c:	4b03      	ldr	r3, [pc, #12]	; (800968c <vTaskMissedYield+0x14>)
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
}
 8009682:	bf00      	nop
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20003dac 	.word	0x20003dac

08009690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009698:	f000 f852 	bl	8009740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <prvIdleTask+0x28>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d9f9      	bls.n	8009698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096a4:	4b05      	ldr	r3, [pc, #20]	; (80096bc <prvIdleTask+0x2c>)
 80096a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096b4:	e7f0      	b.n	8009698 <prvIdleTask+0x8>
 80096b6:	bf00      	nop
 80096b8:	20003c9c 	.word	0x20003c9c
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	e00c      	b.n	80096e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a12      	ldr	r2, [pc, #72]	; (8009720 <prvInitialiseTaskLists+0x60>)
 80096d8:	4413      	add	r3, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe f8c8 	bl	8007870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3301      	adds	r3, #1
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b06      	cmp	r3, #6
 80096ea:	d9ef      	bls.n	80096cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096ec:	480d      	ldr	r0, [pc, #52]	; (8009724 <prvInitialiseTaskLists+0x64>)
 80096ee:	f7fe f8bf 	bl	8007870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <prvInitialiseTaskLists+0x68>)
 80096f4:	f7fe f8bc 	bl	8007870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096f8:	480c      	ldr	r0, [pc, #48]	; (800972c <prvInitialiseTaskLists+0x6c>)
 80096fa:	f7fe f8b9 	bl	8007870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096fe:	480c      	ldr	r0, [pc, #48]	; (8009730 <prvInitialiseTaskLists+0x70>)
 8009700:	f7fe f8b6 	bl	8007870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009704:	480b      	ldr	r0, [pc, #44]	; (8009734 <prvInitialiseTaskLists+0x74>)
 8009706:	f7fe f8b3 	bl	8007870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <prvInitialiseTaskLists+0x78>)
 800970c:	4a05      	ldr	r2, [pc, #20]	; (8009724 <prvInitialiseTaskLists+0x64>)
 800970e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <prvInitialiseTaskLists+0x7c>)
 8009712:	4a05      	ldr	r2, [pc, #20]	; (8009728 <prvInitialiseTaskLists+0x68>)
 8009714:	601a      	str	r2, [r3, #0]
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20003c9c 	.word	0x20003c9c
 8009724:	20003d28 	.word	0x20003d28
 8009728:	20003d3c 	.word	0x20003d3c
 800972c:	20003d58 	.word	0x20003d58
 8009730:	20003d6c 	.word	0x20003d6c
 8009734:	20003d84 	.word	0x20003d84
 8009738:	20003d50 	.word	0x20003d50
 800973c:	20003d54 	.word	0x20003d54

08009740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009746:	e028      	b.n	800979a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8009748:	f7ff fc82 	bl	8009050 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <prvCheckTasksWaitingTermination+0x6c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bf0c      	ite	eq
 8009754:	2301      	moveq	r3, #1
 8009756:	2300      	movne	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800975c:	f7ff fc86 	bl	800906c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d119      	bne.n	800979a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8009766:	f7fe fa1f 	bl	8007ba8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <prvCheckTasksWaitingTermination+0x6c>)
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	3304      	adds	r3, #4
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe f904 	bl	8007984 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800977c:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <prvCheckTasksWaitingTermination+0x70>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3b01      	subs	r3, #1
 8009782:	4a0b      	ldr	r2, [pc, #44]	; (80097b0 <prvCheckTasksWaitingTermination+0x70>)
 8009784:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8009786:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <prvCheckTasksWaitingTermination+0x74>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <prvCheckTasksWaitingTermination+0x74>)
 800978e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8009790:	f7fe fa3c 	bl	8007c0c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8009794:	6838      	ldr	r0, [r7, #0]
 8009796:	f000 f80f 	bl	80097b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800979a:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <prvCheckTasksWaitingTermination+0x74>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1d2      	bne.n	8009748 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20003d6c 	.word	0x20003d6c
 80097b0:	20003d98 	.word	0x20003d98
 80097b4:	20003d80 	.word	0x20003d80

080097b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fbd1 	bl	8007f6c <vPortFree>
			vPortFree( pxTCB );
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7fe fbce 	bl	8007f6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097de:	4b0f      	ldr	r3, [pc, #60]	; (800981c <prvResetNextTaskUnblockTime+0x44>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <prvResetNextTaskUnblockTime+0x14>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <prvResetNextTaskUnblockTime+0x16>
 80097ec:	2300      	movs	r3, #0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097f2:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <prvResetNextTaskUnblockTime+0x48>)
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295
 80097f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097fa:	e008      	b.n	800980e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <prvResetNextTaskUnblockTime+0x44>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	4a05      	ldr	r2, [pc, #20]	; (8009820 <prvResetNextTaskUnblockTime+0x48>)
 800980c:	6013      	str	r3, [r2, #0]
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20003d50 	.word	0x20003d50
 8009820:	20003db8 	.word	0x20003db8

08009824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800982a:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <xTaskGetSchedulerState+0x34>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009832:	2301      	movs	r3, #1
 8009834:	607b      	str	r3, [r7, #4]
 8009836:	e008      	b.n	800984a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009838:	4b08      	ldr	r3, [pc, #32]	; (800985c <xTaskGetSchedulerState+0x38>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009840:	2302      	movs	r3, #2
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	e001      	b.n	800984a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009846:	2300      	movs	r3, #0
 8009848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800984a:	687b      	ldr	r3, [r7, #4]
	}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	20003da4 	.word	0x20003da4
 800985c:	20003dc0 	.word	0x20003dc0

08009860 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d062      	beq.n	8009938 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4b32      	ldr	r3, [pc, #200]	; (8009940 <vTaskPriorityInherit+0xe0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	429a      	cmp	r2, r3
 800987e:	d25b      	bcs.n	8009938 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	db06      	blt.n	8009896 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009888:	4b2d      	ldr	r3, [pc, #180]	; (8009940 <vTaskPriorityInherit+0xe0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	f1c3 0207 	rsb	r2, r3, #7
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6959      	ldr	r1, [r3, #20]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4a27      	ldr	r2, [pc, #156]	; (8009944 <vTaskPriorityInherit+0xe4>)
 80098a8:	4413      	add	r3, r2
 80098aa:	4299      	cmp	r1, r3
 80098ac:	d101      	bne.n	80098b2 <vTaskPriorityInherit+0x52>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <vTaskPriorityInherit+0x54>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d03a      	beq.n	800992e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe f861 	bl	8007984 <uxListRemove>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d115      	bne.n	80098f4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098cc:	491d      	ldr	r1, [pc, #116]	; (8009944 <vTaskPriorityInherit+0xe4>)
 80098ce:	4613      	mov	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	440b      	add	r3, r1
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <vTaskPriorityInherit+0x94>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	43da      	mvns	r2, r3
 80098ea:	4b17      	ldr	r3, [pc, #92]	; (8009948 <vTaskPriorityInherit+0xe8>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4013      	ands	r3, r2
 80098f0:	4a15      	ldr	r2, [pc, #84]	; (8009948 <vTaskPriorityInherit+0xe8>)
 80098f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098f4:	4b12      	ldr	r3, [pc, #72]	; (8009940 <vTaskPriorityInherit+0xe0>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009902:	2201      	movs	r2, #1
 8009904:	409a      	lsls	r2, r3
 8009906:	4b10      	ldr	r3, [pc, #64]	; (8009948 <vTaskPriorityInherit+0xe8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4313      	orrs	r3, r2
 800990c:	4a0e      	ldr	r2, [pc, #56]	; (8009948 <vTaskPriorityInherit+0xe8>)
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4a09      	ldr	r2, [pc, #36]	; (8009944 <vTaskPriorityInherit+0xe4>)
 800991e:	441a      	add	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3304      	adds	r3, #4
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fd ffcf 	bl	80078ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800992c:	e004      	b.n	8009938 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800992e:	4b04      	ldr	r3, [pc, #16]	; (8009940 <vTaskPriorityInherit+0xe0>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8009938:	bf00      	nop
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20003c98 	.word	0x20003c98
 8009944:	20003c9c 	.word	0x20003c9c
 8009948:	20003da0 	.word	0x20003da0

0800994c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d070      	beq.n	8009a44 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009962:	4b3b      	ldr	r3, [pc, #236]	; (8009a50 <xTaskPriorityDisinherit+0x104>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	429a      	cmp	r2, r3
 800996a:	d00b      	beq.n	8009984 <xTaskPriorityDisinherit+0x38>
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e7fe      	b.n	8009982 <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10b      	bne.n	80099a4 <xTaskPriorityDisinherit+0x58>
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	b672      	cpsid	i
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	b662      	cpsie	i
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	e7fe      	b.n	80099a2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a8:	1e5a      	subs	r2, r3, #1
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d044      	beq.n	8009a44 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d140      	bne.n	8009a44 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fd ffdc 	bl	8007984 <uxListRemove>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d115      	bne.n	80099fe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d6:	491f      	ldr	r1, [pc, #124]	; (8009a54 <xTaskPriorityDisinherit+0x108>)
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <xTaskPriorityDisinherit+0xb2>
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	2201      	movs	r2, #1
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43da      	mvns	r2, r3
 80099f4:	4b18      	ldr	r3, [pc, #96]	; (8009a58 <xTaskPriorityDisinherit+0x10c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4013      	ands	r3, r2
 80099fa:	4a17      	ldr	r2, [pc, #92]	; (8009a58 <xTaskPriorityDisinherit+0x10c>)
 80099fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0a:	f1c3 0207 	rsb	r2, r3, #7
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	2201      	movs	r2, #1
 8009a18:	409a      	lsls	r2, r3
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <xTaskPriorityDisinherit+0x10c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	4a0d      	ldr	r2, [pc, #52]	; (8009a58 <xTaskPriorityDisinherit+0x10c>)
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4a08      	ldr	r2, [pc, #32]	; (8009a54 <xTaskPriorityDisinherit+0x108>)
 8009a32:	441a      	add	r2, r3
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f7fd ff45 	bl	80078ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a44:	697b      	ldr	r3, [r7, #20]
	}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20003c98 	.word	0x20003c98
 8009a54:	20003c9c 	.word	0x20003c9c
 8009a58:	20003da0 	.word	0x20003da0

08009a5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a6e:	3201      	adds	r2, #1
 8009a70:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009a72:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a74:	681b      	ldr	r3, [r3, #0]
	}
 8009a76:	4618      	mov	r0, r3
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	20003c98 	.word	0x20003c98

08009a84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a8e:	4b29      	ldr	r3, [pc, #164]	; (8009b34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a94:	4b28      	ldr	r3, [pc, #160]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fd ff72 	bl	8007984 <uxListRemove>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009aa6:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	2201      	movs	r2, #1
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	43da      	mvns	r2, r3
 8009ab4:	4b21      	ldr	r3, [pc, #132]	; (8009b3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009abc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac4:	d10a      	bne.n	8009adc <prvAddCurrentTaskToDelayedList+0x58>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009acc:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	481a      	ldr	r0, [pc, #104]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ad6:	f7fd fef8 	bl	80078ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ada:	e026      	b.n	8009b2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ae4:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d209      	bcs.n	8009b08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af4:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3304      	adds	r3, #4
 8009afe:	4619      	mov	r1, r3
 8009b00:	4610      	mov	r0, r2
 8009b02:	f7fd ff06 	bl	8007912 <vListInsert>
}
 8009b06:	e010      	b.n	8009b2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b08:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f7fd fefc 	bl	8007912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d202      	bcs.n	8009b2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b24:	4a09      	ldr	r2, [pc, #36]	; (8009b4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	6013      	str	r3, [r2, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20003d9c 	.word	0x20003d9c
 8009b38:	20003c98 	.word	0x20003c98
 8009b3c:	20003da0 	.word	0x20003da0
 8009b40:	20003d84 	.word	0x20003d84
 8009b44:	20003d54 	.word	0x20003d54
 8009b48:	20003d50 	.word	0x20003d50
 8009b4c:	20003db8 	.word	0x20003db8

08009b50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ); /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b5a:	f000 faeb 	bl	800a134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b5e:	4b12      	ldr	r3, [pc, #72]	; (8009ba8 <xTimerCreateTimerTask+0x58>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009b66:	4b11      	ldr	r3, [pc, #68]	; (8009bac <xTimerCreateTimerTask+0x5c>)
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b74:	490e      	ldr	r1, [pc, #56]	; (8009bb0 <xTimerCreateTimerTask+0x60>)
 8009b76:	480f      	ldr	r0, [pc, #60]	; (8009bb4 <xTimerCreateTimerTask+0x64>)
 8009b78:	f7ff f828 	bl	8008bcc <xTaskCreate>
 8009b7c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <xTimerCreateTimerTask+0x4c>
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	b672      	cpsid	i
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	b662      	cpsie	i
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	e7fe      	b.n	8009b9a <xTimerCreateTimerTask+0x4a>
	return xReturn;
 8009b9c:	687b      	ldr	r3, [r7, #4]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20003df4 	.word	0x20003df4
 8009bac:	20003df8 	.word	0x20003df8
 8009bb0:	0800e158 	.word	0x0800e158
 8009bb4:	08009d79 	.word	0x08009d79

08009bb8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af02      	add	r7, sp, #8
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009bc6:	2028      	movs	r0, #40	; 0x28
 8009bc8:	f7fe f908 	bl	8007ddc <pvPortMalloc>
 8009bcc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f805 	bl	8009bf2 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009be8:	697b      	ldr	r3, [r7, #20]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b086      	sub	sp, #24
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	607a      	str	r2, [r7, #4]
 8009bfe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <prvInitialiseNewTimer+0x2c>
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	b672      	cpsid	i
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	b662      	cpsie	i
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	e7fe      	b.n	8009c1c <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d015      	beq.n	8009c50 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009c24:	f000 fa86 	bl	800a134 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	6a3a      	ldr	r2, [r7, #32]
 8009c44:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	3304      	adds	r3, #4
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fd fe30 	bl	80078b0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009c50:	bf00      	nop
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10b      	bne.n	8009c88 <xTimerGenericCommand+0x30>
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	b672      	cpsid	i
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	b662      	cpsie	i
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	e7fe      	b.n	8009c86 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c88:	4b19      	ldr	r3, [pc, #100]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d02a      	beq.n	8009ce6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b05      	cmp	r3, #5
 8009ca0:	dc18      	bgt.n	8009cd4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ca2:	f7ff fdbf 	bl	8009824 <xTaskGetSchedulerState>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d109      	bne.n	8009cc0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	f107 0114 	add.w	r1, r7, #20
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb8:	f7fe fb66 	bl	8008388 <xQueueGenericSend>
 8009cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8009cbe:	e012      	b.n	8009ce6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	f107 0114 	add.w	r1, r7, #20
 8009cc8:	2300      	movs	r3, #0
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f7fe fb5c 	bl	8008388 <xQueueGenericSend>
 8009cd0:	6278      	str	r0, [r7, #36]	; 0x24
 8009cd2:	e008      	b.n	8009ce6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cd4:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <xTimerGenericCommand+0x98>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	f107 0114 	add.w	r1, r7, #20
 8009cdc:	2300      	movs	r3, #0
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	f7fe fc54 	bl	800858c <xQueueGenericSendFromISR>
 8009ce4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3728      	adds	r7, #40	; 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20003df4 	.word	0x20003df4

08009cf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <prvProcessExpiredTimer+0x80>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fd fe39 	bl	8007984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d123      	bne.n	8009d62 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	18d1      	adds	r1, r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	6978      	ldr	r0, [r7, #20]
 8009d28:	f000 f8ca 	bl	8009ec0 <prvInsertTimerInActiveList>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d017      	beq.n	8009d62 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d32:	2300      	movs	r3, #0
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2300      	movs	r3, #0
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	6978      	ldr	r0, [r7, #20]
 8009d3e:	f7ff ff8b 	bl	8009c58 <xTimerGenericCommand>
 8009d42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10b      	bne.n	8009d62 <prvProcessExpiredTimer+0x6e>
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	b672      	cpsid	i
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	b662      	cpsie	i
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e7fe      	b.n	8009d60 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	6978      	ldr	r0, [r7, #20]
 8009d68:	4798      	blx	r3
}
 8009d6a:	bf00      	nop
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20003dec 	.word	0x20003dec

08009d78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 f857 	bl	8009e38 <prvGetNextExpireTime>
 8009d8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f803 	bl	8009d9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d96:	f000 f8d5 	bl	8009f44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d9a:	e7f1      	b.n	8009d80 <prvTimerTask+0x8>

08009d9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009da6:	f7ff f953 	bl	8009050 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f866 	bl	8009e80 <prvSampleTimeNow>
 8009db4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d130      	bne.n	8009e1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10a      	bne.n	8009dd8 <prvProcessTimerOrBlockTask+0x3c>
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d806      	bhi.n	8009dd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dca:	f7ff f94f 	bl	800906c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff8f 	bl	8009cf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dd6:	e024      	b.n	8009e22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d008      	beq.n	8009df0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dde:	4b13      	ldr	r3, [pc, #76]	; (8009e2c <prvProcessTimerOrBlockTask+0x90>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	bf0c      	ite	eq
 8009de8:	2301      	moveq	r3, #1
 8009dea:	2300      	movne	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009df0:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <prvProcessTimerOrBlockTask+0x94>)
 8009df2:	6818      	ldr	r0, [r3, #0]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f7fe feb1 	bl	8008b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e02:	f7ff f933 	bl	800906c <xTaskResumeAll>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <prvProcessTimerOrBlockTask+0x98>)
 8009e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	f3bf 8f6f 	isb	sy
}
 8009e1c:	e001      	b.n	8009e22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e1e:	f7ff f925 	bl	800906c <xTaskResumeAll>
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20003df0 	.word	0x20003df0
 8009e30:	20003df4 	.word	0x20003df4
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e40:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <prvGetNextExpireTime+0x44>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bf0c      	ite	eq
 8009e4a:	2301      	moveq	r3, #1
 8009e4c:	2300      	movne	r3, #0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e5e:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <prvGetNextExpireTime+0x44>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e001      	b.n	8009e6e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20003dec 	.word	0x20003dec

08009e80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_INITIALIZED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e88:	f7ff f98e 	bl	80091a8 <xTaskGetTickCount>
 8009e8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <prvSampleTimeNow+0x3c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d205      	bcs.n	8009ea4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e98:	f000 f8ea 	bl	800a070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	e002      	b.n	8009eaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009eaa:	4a04      	ldr	r2, [pc, #16]	; (8009ebc <prvSampleTimeNow+0x3c>)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20003dfc 	.word	0x20003dfc

08009ec0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d812      	bhi.n	8009f0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	1ad2      	subs	r2, r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d302      	bcc.n	8009efa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e01b      	b.n	8009f32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009efa:	4b10      	ldr	r3, [pc, #64]	; (8009f3c <prvInsertTimerInActiveList+0x7c>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f7fd fd04 	bl	8007912 <vListInsert>
 8009f0a:	e012      	b.n	8009f32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d206      	bcs.n	8009f22 <prvInsertTimerInActiveList+0x62>
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d302      	bcc.n	8009f22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	e007      	b.n	8009f32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <prvInsertTimerInActiveList+0x80>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7fd fcf0 	bl	8007912 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f32:	697b      	ldr	r3, [r7, #20]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20003df0 	.word	0x20003df0
 8009f40:	20003dec 	.word	0x20003dec

08009f44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08c      	sub	sp, #48	; 0x30
 8009f48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f4a:	e07e      	b.n	800a04a <prvProcessReceivedCommands+0x106>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	db7b      	blt.n	800a04a <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fd fd0e 	bl	8007984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f68:	1d3b      	adds	r3, r7, #4
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff ff88 	bl	8009e80 <prvSampleTimeNow>
 8009f70:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d867      	bhi.n	800a048 <prvProcessReceivedCommands+0x104>
 8009f78:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <prvProcessReceivedCommands+0x3c>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009fa9 	.word	0x08009fa9
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fa9 	.word	0x08009fa9
 8009f8c:	0800a04b 	.word	0x0800a04b
 8009f90:	0800a007 	.word	0x0800a007
 8009f94:	0800a041 	.word	0x0800a041
 8009f98:	08009fa9 	.word	0x08009fa9
 8009f9c:	08009fa9 	.word	0x08009fa9
 8009fa0:	0800a04b 	.word	0x0800a04b
 8009fa4:	0800a007 	.word	0x0800a007
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	18d1      	adds	r1, r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fb6:	f7ff ff83 	bl	8009ec0 <prvInsertTimerInActiveList>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d044      	beq.n	800a04a <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d13c      	bne.n	800a04a <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	441a      	add	r2, r3
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fe2:	f7ff fe39 	bl	8009c58 <xTimerGenericCommand>
 8009fe6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d12d      	bne.n	800a04a <prvProcessReceivedCommands+0x106>
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	b672      	cpsid	i
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	b662      	cpsie	i
 800a002:	61bb      	str	r3, [r7, #24]
 800a004:	e7fe      	b.n	800a004 <prvProcessReceivedCommands+0xc0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <prvProcessReceivedCommands+0xe8>
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	b672      	cpsid	i
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	b662      	cpsie	i
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	e7fe      	b.n	800a02a <prvProcessReceivedCommands+0xe6>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	699a      	ldr	r2, [r3, #24]
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	18d1      	adds	r1, r2, r3
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a03a:	f7ff ff41 	bl	8009ec0 <prvInsertTimerInActiveList>
					break;
 800a03e:	e004      	b.n	800a04a <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800a040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a042:	f7fd ff93 	bl	8007f6c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a046:	e000      	b.n	800a04a <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
 800a048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a04a:	4b08      	ldr	r3, [pc, #32]	; (800a06c <prvProcessReceivedCommands+0x128>)
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	f107 0108 	add.w	r1, r7, #8
 800a052:	2300      	movs	r3, #0
 800a054:	2200      	movs	r2, #0
 800a056:	f7fe fb35 	bl	80086c4 <xQueueGenericReceive>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f47f af75 	bne.w	8009f4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a062:	bf00      	nop
 800a064:	3728      	adds	r7, #40	; 0x28
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20003df4 	.word	0x20003df4

0800a070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a076:	e046      	b.n	800a106 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a078:	4b2c      	ldr	r3, [pc, #176]	; (800a12c <prvSwitchTimerLists+0xbc>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a082:	4b2a      	ldr	r3, [pc, #168]	; (800a12c <prvSwitchTimerLists+0xbc>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3304      	adds	r3, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd fc77 	bl	8007984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	6938      	ldr	r0, [r7, #16]
 800a09c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d12f      	bne.n	800a106 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d90e      	bls.n	800a0d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0c4:	4b19      	ldr	r3, [pc, #100]	; (800a12c <prvSwitchTimerLists+0xbc>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fd fc1f 	bl	8007912 <vListInsert>
 800a0d4:	e017      	b.n	800a106 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	2100      	movs	r1, #0
 800a0e0:	6938      	ldr	r0, [r7, #16]
 800a0e2:	f7ff fdb9 	bl	8009c58 <xTimerGenericCommand>
 800a0e6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10b      	bne.n	800a106 <prvSwitchTimerLists+0x96>
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	b672      	cpsid	i
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	b662      	cpsie	i
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	e7fe      	b.n	800a104 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a106:	4b09      	ldr	r3, [pc, #36]	; (800a12c <prvSwitchTimerLists+0xbc>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1b3      	bne.n	800a078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <prvSwitchTimerLists+0xbc>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800a116:	4b06      	ldr	r3, [pc, #24]	; (800a130 <prvSwitchTimerLists+0xc0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a04      	ldr	r2, [pc, #16]	; (800a12c <prvSwitchTimerLists+0xbc>)
 800a11c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a11e:	4a04      	ldr	r2, [pc, #16]	; (800a130 <prvSwitchTimerLists+0xc0>)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6013      	str	r3, [r2, #0]
}
 800a124:	bf00      	nop
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20003dec 	.word	0x20003dec
 800a130:	20003df0 	.word	0x20003df0

0800a134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a138:	f7fd fd36 	bl	8007ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a13c:	4b12      	ldr	r3, [pc, #72]	; (800a188 <prvCheckForValidListAndQueue+0x54>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d11d      	bne.n	800a180 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a144:	4811      	ldr	r0, [pc, #68]	; (800a18c <prvCheckForValidListAndQueue+0x58>)
 800a146:	f7fd fb93 	bl	8007870 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a14a:	4811      	ldr	r0, [pc, #68]	; (800a190 <prvCheckForValidListAndQueue+0x5c>)
 800a14c:	f7fd fb90 	bl	8007870 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a150:	4b10      	ldr	r3, [pc, #64]	; (800a194 <prvCheckForValidListAndQueue+0x60>)
 800a152:	4a0e      	ldr	r2, [pc, #56]	; (800a18c <prvCheckForValidListAndQueue+0x58>)
 800a154:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a156:	4b10      	ldr	r3, [pc, #64]	; (800a198 <prvCheckForValidListAndQueue+0x64>)
 800a158:	4a0d      	ldr	r2, [pc, #52]	; (800a190 <prvCheckForValidListAndQueue+0x5c>)
 800a15a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a15c:	2200      	movs	r2, #0
 800a15e:	210c      	movs	r1, #12
 800a160:	200a      	movs	r0, #10
 800a162:	f7fe f885 	bl	8008270 <xQueueGenericCreate>
 800a166:	4602      	mov	r2, r0
 800a168:	4b07      	ldr	r3, [pc, #28]	; (800a188 <prvCheckForValidListAndQueue+0x54>)
 800a16a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <prvCheckForValidListAndQueue+0x54>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <prvCheckForValidListAndQueue+0x54>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4908      	ldr	r1, [pc, #32]	; (800a19c <prvCheckForValidListAndQueue+0x68>)
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fcca 	bl	8008b14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a180:	f7fd fd44 	bl	8007c0c <vPortExitCritical>
}
 800a184:	bf00      	nop
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20003df4 	.word	0x20003df4
 800a18c:	20003dc4 	.word	0x20003dc4
 800a190:	20003dd8 	.word	0x20003dd8
 800a194:	20003dec 	.word	0x20003dec
 800a198:	20003df0 	.word	0x20003df0
 800a19c:	0800e160 	.word	0x0800e160

0800a1a0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <xTimerIsTimerActive+0x2a>
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	b672      	cpsid	i
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	b662      	cpsie	i
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	e7fe      	b.n	800a1c8 <xTimerIsTimerActive+0x28>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a1ca:	f7fd fced 	bl	8007ba8 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	2300      	moveq	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a1de:	f7fd fd15 	bl	8007c0c <vPortExitCritical>

	return xTimerIsInActiveList;
 800a1e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800a1ec:	b590      	push	{r4, r7, lr}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	71fb      	strb	r3, [r7, #7]
 800a1fe:	4603      	mov	r3, r0
 800a200:	71bb      	strb	r3, [r7, #6]
 800a202:	460b      	mov	r3, r1
 800a204:	80bb      	strh	r3, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d902      	bls.n	800a216 <socket+0x2a>
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e0df      	b.n	800a3d6 <socket+0x1ea>
	switch(protocol)
 800a216:	79bb      	ldrb	r3, [r7, #6]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d004      	beq.n	800a226 <socket+0x3a>
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	db0f      	blt.n	800a240 <socket+0x54>
 800a220:	2b04      	cmp	r3, #4
 800a222:	dc0d      	bgt.n	800a240 <socket+0x54>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800a224:	e00f      	b.n	800a246 <socket+0x5a>
            getSIPR((uint8_t*)&taddr);
 800a226:	f107 030c 	add.w	r3, r7, #12
 800a22a:	2204      	movs	r2, #4
 800a22c:	4619      	mov	r1, r3
 800a22e:	200f      	movs	r0, #15
 800a230:	f000 fd4e 	bl	800acd0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d105      	bne.n	800a246 <socket+0x5a>
 800a23a:	f06f 0302 	mvn.w	r3, #2
 800a23e:	e0ca      	b.n	800a3d6 <socket+0x1ea>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800a240:	f06f 0304 	mvn.w	r3, #4
 800a244:	e0c7      	b.n	800a3d6 <socket+0x1ea>
         break;
 800a246:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800a248:	78fb      	ldrb	r3, [r7, #3]
 800a24a:	f003 0304 	and.w	r3, r3, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <socket+0x6c>
 800a252:	f06f 0305 	mvn.w	r3, #5
 800a256:	e0be      	b.n	800a3d6 <socket+0x1ea>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	f003 0310 	and.w	r3, r3, #16
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <socket+0x7c>
 800a262:	f06f 0305 	mvn.w	r3, #5
 800a266:	e0b6      	b.n	800a3d6 <socket+0x1ea>
#endif
	   
	if(flag != 0)
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01c      	beq.n	800a2a8 <socket+0xbc>
	{
   	switch(protocol)
 800a26e:	79bb      	ldrb	r3, [r7, #6]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d002      	beq.n	800a27a <socket+0x8e>
 800a274:	2b02      	cmp	r3, #2
 800a276:	d008      	beq.n	800a28a <socket+0x9e>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800a278:	e016      	b.n	800a2a8 <socket+0xbc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10e      	bne.n	800a2a2 <socket+0xb6>
 800a284:	f06f 0305 	mvn.w	r3, #5
 800a288:	e0a5      	b.n	800a3d6 <socket+0x1ea>
   	      if(flag & SF_IGMP_VER2)
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	f003 0320 	and.w	r3, r3, #32
 800a290:	2b00      	cmp	r3, #0
 800a292:	d008      	beq.n	800a2a6 <socket+0xba>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800a294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	db04      	blt.n	800a2a6 <socket+0xba>
 800a29c:	f06f 0305 	mvn.w	r3, #5
 800a2a0:	e099      	b.n	800a3d6 <socket+0x1ea>
   	      break;
 800a2a2:	bf00      	nop
 800a2a4:	e000      	b.n	800a2a8 <socket+0xbc>
   	      break;
 800a2a6:	bf00      	nop
   	}
   }
	close(sn);
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f8a2 	bl	800a3f4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	3340      	adds	r3, #64	; 0x40
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2bc:	f023 030f 	bic.w	r3, r3, #15
 800a2c0:	b25a      	sxtb	r2, r3
 800a2c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f000 fc4f 	bl	800ab70 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800a2d2:	88bb      	ldrh	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d110      	bne.n	800a2fa <socket+0x10e>
	{
	   port = sock_any_port++;
 800a2d8:	4b41      	ldr	r3, [pc, #260]	; (800a3e0 <socket+0x1f4>)
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	b291      	uxth	r1, r2
 800a2e0:	4a3f      	ldr	r2, [pc, #252]	; (800a3e0 <socket+0x1f4>)
 800a2e2:	8011      	strh	r1, [r2, #0]
 800a2e4:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800a2e6:	4b3e      	ldr	r3, [pc, #248]	; (800a3e0 <socket+0x1f4>)
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d103      	bne.n	800a2fa <socket+0x10e>
 800a2f2:	4b3b      	ldr	r3, [pc, #236]	; (800a3e0 <socket+0x1f4>)
 800a2f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a2f8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	3340      	adds	r3, #64	; 0x40
 800a2fe:	021b      	lsls	r3, r3, #8
 800a300:	3304      	adds	r3, #4
 800a302:	461a      	mov	r2, r3
 800a304:	88bb      	ldrh	r3, [r7, #4]
 800a306:	0a1b      	lsrs	r3, r3, #8
 800a308:	b29b      	uxth	r3, r3
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	f000 fc2e 	bl	800ab70 <WIZCHIP_WRITE>
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	3340      	adds	r3, #64	; 0x40
 800a318:	021b      	lsls	r3, r3, #8
 800a31a:	3305      	adds	r3, #5
 800a31c:	461a      	mov	r2, r3
 800a31e:	88bb      	ldrh	r3, [r7, #4]
 800a320:	b2db      	uxtb	r3, r3
 800a322:	4619      	mov	r1, r3
 800a324:	4610      	mov	r0, r2
 800a326:	f000 fc23 	bl	800ab70 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	3340      	adds	r3, #64	; 0x40
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	3301      	adds	r3, #1
 800a332:	2101      	movs	r1, #1
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fc1b 	bl	800ab70 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800a33a:	bf00      	nop
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	3340      	adds	r3, #64	; 0x40
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	3301      	adds	r3, #1
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fc45 	bl	800abd4 <WIZCHIP_READ>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1f5      	bne.n	800a33c <socket+0x150>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2201      	movs	r2, #1
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	b21b      	sxth	r3, r3
 800a35a:	43db      	mvns	r3, r3
 800a35c:	b21a      	sxth	r2, r3
 800a35e:	4b21      	ldr	r3, [pc, #132]	; (800a3e4 <socket+0x1f8>)
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	b21b      	sxth	r3, r3
 800a364:	4013      	ands	r3, r2
 800a366:	b21b      	sxth	r3, r3
 800a368:	b29a      	uxth	r2, r3
 800a36a:	4b1e      	ldr	r3, [pc, #120]	; (800a3e4 <socket+0x1f8>)
 800a36c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f003 0201 	and.w	r2, r3, #1
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	fa02 f303 	lsl.w	r3, r2, r3
 800a37a:	b21a      	sxth	r2, r3
 800a37c:	4b19      	ldr	r3, [pc, #100]	; (800a3e4 <socket+0x1f8>)
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b21b      	sxth	r3, r3
 800a382:	4313      	orrs	r3, r2
 800a384:	b21b      	sxth	r3, r3
 800a386:	b29a      	uxth	r2, r3
 800a388:	4b16      	ldr	r3, [pc, #88]	; (800a3e4 <socket+0x1f8>)
 800a38a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2201      	movs	r2, #1
 800a390:	fa02 f303 	lsl.w	r3, r2, r3
 800a394:	b21b      	sxth	r3, r3
 800a396:	43db      	mvns	r3, r3
 800a398:	b21a      	sxth	r2, r3
 800a39a:	4b13      	ldr	r3, [pc, #76]	; (800a3e8 <socket+0x1fc>)
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	b21b      	sxth	r3, r3
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	b21b      	sxth	r3, r3
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	4b10      	ldr	r3, [pc, #64]	; (800a3e8 <socket+0x1fc>)
 800a3a8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	4a0f      	ldr	r2, [pc, #60]	; (800a3ec <socket+0x200>)
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	4a0e      	ldr	r2, [pc, #56]	; (800a3f0 <socket+0x204>)
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800a3bc:	bf00      	nop
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	3340      	adds	r3, #64	; 0x40
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	3303      	adds	r3, #3
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fc04 	bl	800abd4 <WIZCHIP_READ>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d0f5      	beq.n	800a3be <socket+0x1d2>
   return (int8_t)sn;
 800a3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd90      	pop	{r4, r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	2000000c 	.word	0x2000000c
 800a3e4:	20003e00 	.word	0x20003e00
 800a3e8:	20003e02 	.word	0x20003e02
 800a3ec:	20003e04 	.word	0x20003e04
 800a3f0:	20003e14 	.word	0x20003e14

0800a3f4 <close>:

int8_t close(uint8_t sn)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	2b08      	cmp	r3, #8
 800a402:	d902      	bls.n	800a40a <close+0x16>
 800a404:	f04f 33ff 	mov.w	r3, #4294967295
 800a408:	e04d      	b.n	800a4a6 <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	3340      	adds	r3, #64	; 0x40
 800a40e:	021b      	lsls	r3, r3, #8
 800a410:	3301      	adds	r3, #1
 800a412:	2110      	movs	r1, #16
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fbab 	bl	800ab70 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800a41a:	bf00      	nop
 800a41c:	79fb      	ldrb	r3, [r7, #7]
 800a41e:	3340      	adds	r3, #64	; 0x40
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	3301      	adds	r3, #1
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fbd5 	bl	800abd4 <WIZCHIP_READ>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1f5      	bne.n	800a41c <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	3340      	adds	r3, #64	; 0x40
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	3302      	adds	r3, #2
 800a438:	21ff      	movs	r1, #255	; 0xff
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 fb98 	bl	800ab70 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	2201      	movs	r2, #1
 800a444:	fa02 f303 	lsl.w	r3, r2, r3
 800a448:	b21b      	sxth	r3, r3
 800a44a:	43db      	mvns	r3, r3
 800a44c:	b21a      	sxth	r2, r3
 800a44e:	4b18      	ldr	r3, [pc, #96]	; (800a4b0 <close+0xbc>)
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	b21b      	sxth	r3, r3
 800a454:	4013      	ands	r3, r2
 800a456:	b21b      	sxth	r3, r3
 800a458:	b29a      	uxth	r2, r3
 800a45a:	4b15      	ldr	r3, [pc, #84]	; (800a4b0 <close+0xbc>)
 800a45c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	2201      	movs	r2, #1
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	b21b      	sxth	r3, r3
 800a468:	43db      	mvns	r3, r3
 800a46a:	b21a      	sxth	r2, r3
 800a46c:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <close+0xc0>)
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b21b      	sxth	r3, r3
 800a472:	4013      	ands	r3, r2
 800a474:	b21b      	sxth	r3, r3
 800a476:	b29a      	uxth	r2, r3
 800a478:	4b0e      	ldr	r3, [pc, #56]	; (800a4b4 <close+0xc0>)
 800a47a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	4a0e      	ldr	r2, [pc, #56]	; (800a4b8 <close+0xc4>)
 800a480:	2100      	movs	r1, #0
 800a482:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800a486:	79fb      	ldrb	r3, [r7, #7]
 800a488:	4a0c      	ldr	r2, [pc, #48]	; (800a4bc <close+0xc8>)
 800a48a:	2100      	movs	r1, #0
 800a48c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800a48e:	bf00      	nop
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	3340      	adds	r3, #64	; 0x40
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	3303      	adds	r3, #3
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fb9b 	bl	800abd4 <WIZCHIP_READ>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f5      	bne.n	800a490 <close+0x9c>
	return SOCK_OK;
 800a4a4:	2301      	movs	r3, #1
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20003e00 	.word	0x20003e00
 800a4b4:	20003e02 	.word	0x20003e02
 800a4b8:	20003e04 	.word	0x20003e04
 800a4bc:	20003e14 	.word	0x20003e14

0800a4c0 <listen>:

int8_t listen(uint8_t sn)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d902      	bls.n	800a4d6 <listen+0x16>
 800a4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d4:	e040      	b.n	800a558 <listen+0x98>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	3340      	adds	r3, #64	; 0x40
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fb79 	bl	800abd4 <WIZCHIP_READ>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d002      	beq.n	800a4f2 <listen+0x32>
 800a4ec:	f06f 0304 	mvn.w	r3, #4
 800a4f0:	e032      	b.n	800a558 <listen+0x98>
	CHECK_SOCKINIT();
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	3340      	adds	r3, #64	; 0x40
 800a4f6:	021b      	lsls	r3, r3, #8
 800a4f8:	3303      	adds	r3, #3
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fb6a 	bl	800abd4 <WIZCHIP_READ>
 800a500:	4603      	mov	r3, r0
 800a502:	2b13      	cmp	r3, #19
 800a504:	d002      	beq.n	800a50c <listen+0x4c>
 800a506:	f06f 0302 	mvn.w	r3, #2
 800a50a:	e025      	b.n	800a558 <listen+0x98>
	setSn_CR(sn,Sn_CR_LISTEN);
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	3340      	adds	r3, #64	; 0x40
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	3301      	adds	r3, #1
 800a514:	2102      	movs	r1, #2
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fb2a 	bl	800ab70 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800a51c:	bf00      	nop
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	3340      	adds	r3, #64	; 0x40
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	3301      	adds	r3, #1
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fb54 	bl	800abd4 <WIZCHIP_READ>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1f5      	bne.n	800a51e <listen+0x5e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800a532:	e006      	b.n	800a542 <listen+0x82>
   {
         close(sn);
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff ff5c 	bl	800a3f4 <close>
         return SOCKERR_SOCKCLOSED;
 800a53c:	f06f 0303 	mvn.w	r3, #3
 800a540:	e00a      	b.n	800a558 <listen+0x98>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	3340      	adds	r3, #64	; 0x40
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	3303      	adds	r3, #3
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fb42 	bl	800abd4 <WIZCHIP_READ>
 800a550:	4603      	mov	r3, r0
 800a552:	2b14      	cmp	r3, #20
 800a554:	d1ee      	bne.n	800a534 <listen+0x74>
   }
   return SOCK_OK;
 800a556:	2301      	movs	r3, #1
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	d902      	bls.n	800a576 <disconnect+0x16>
 800a570:	f04f 33ff 	mov.w	r3, #4294967295
 800a574:	e059      	b.n	800a62a <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	3340      	adds	r3, #64	; 0x40
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fb29 	bl	800abd4 <WIZCHIP_READ>
 800a582:	4603      	mov	r3, r0
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d002      	beq.n	800a592 <disconnect+0x32>
 800a58c:	f06f 0304 	mvn.w	r3, #4
 800a590:	e04b      	b.n	800a62a <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	3340      	adds	r3, #64	; 0x40
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	3301      	adds	r3, #1
 800a59a:	2108      	movs	r1, #8
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fae7 	bl	800ab70 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800a5a2:	bf00      	nop
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	3340      	adds	r3, #64	; 0x40
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fb11 	bl	800abd4 <WIZCHIP_READ>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1f5      	bne.n	800a5a4 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c0:	b21b      	sxth	r3, r3
 800a5c2:	43db      	mvns	r3, r3
 800a5c4:	b21a      	sxth	r2, r3
 800a5c6:	4b1b      	ldr	r3, [pc, #108]	; (800a634 <disconnect+0xd4>)
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b21b      	sxth	r3, r3
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	b21b      	sxth	r3, r3
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	4b18      	ldr	r3, [pc, #96]	; (800a634 <disconnect+0xd4>)
 800a5d4:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800a5d6:	4b18      	ldr	r3, [pc, #96]	; (800a638 <disconnect+0xd8>)
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	fa42 f303 	asr.w	r3, r2, r3
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d014      	beq.n	800a614 <disconnect+0xb4>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e01d      	b.n	800a62a <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	3340      	adds	r3, #64	; 0x40
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 faec 	bl	800abd4 <WIZCHIP_READ>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f003 0308 	and.w	r3, r3, #8
 800a602:	2b00      	cmp	r3, #0
 800a604:	d006      	beq.n	800a614 <disconnect+0xb4>
	   {
	      close(sn);
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fef3 	bl	800a3f4 <close>
	      return SOCKERR_TIMEOUT;
 800a60e:	f06f 030c 	mvn.w	r3, #12
 800a612:	e00a      	b.n	800a62a <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	3340      	adds	r3, #64	; 0x40
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	3303      	adds	r3, #3
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fad9 	bl	800abd4 <WIZCHIP_READ>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e2      	bne.n	800a5ee <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 800a628:	2301      	movs	r3, #1
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20003e02 	.word	0x20003e02
 800a638:	20003e00 	.word	0x20003e00

0800a63c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800a63c:	b5b0      	push	{r4, r5, r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	71fb      	strb	r3, [r7, #7]
 800a648:	4613      	mov	r3, r2
 800a64a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800a650:	2300      	movs	r3, #0
 800a652:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	2b08      	cmp	r3, #8
 800a658:	d902      	bls.n	800a660 <send+0x24>
 800a65a:	f04f 33ff 	mov.w	r3, #4294967295
 800a65e:	e117      	b.n	800a890 <send+0x254>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	3340      	adds	r3, #64	; 0x40
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fab4 	bl	800abd4 <WIZCHIP_READ>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	2b01      	cmp	r3, #1
 800a674:	d002      	beq.n	800a67c <send+0x40>
 800a676:	f06f 0304 	mvn.w	r3, #4
 800a67a:	e109      	b.n	800a890 <send+0x254>
   CHECK_SOCKDATA();
 800a67c:	88bb      	ldrh	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d102      	bne.n	800a688 <send+0x4c>
 800a682:	f06f 030d 	mvn.w	r3, #13
 800a686:	e103      	b.n	800a890 <send+0x254>
   tmp = getSn_SR(sn);
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	3340      	adds	r3, #64	; 0x40
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	3303      	adds	r3, #3
 800a690:	4618      	mov	r0, r3
 800a692:	f000 fa9f 	bl	800abd4 <WIZCHIP_READ>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b17      	cmp	r3, #23
 800a69e:	d005      	beq.n	800a6ac <send+0x70>
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
 800a6a2:	2b1c      	cmp	r3, #28
 800a6a4:	d002      	beq.n	800a6ac <send+0x70>
 800a6a6:	f06f 0306 	mvn.w	r3, #6
 800a6aa:	e0f1      	b.n	800a890 <send+0x254>
   if( sock_is_sending & (1<<sn) )
 800a6ac:	4b7a      	ldr	r3, [pc, #488]	; (800a898 <send+0x25c>)
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	fa42 f303 	asr.w	r3, r2, r3
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d060      	beq.n	800a782 <send+0x146>
   {
      tmp = getSn_IR(sn);
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	3340      	adds	r3, #64	; 0x40
 800a6c4:	021b      	lsls	r3, r3, #8
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fa83 	bl	800abd4 <WIZCHIP_READ>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	f003 0310 	and.w	r3, r3, #16
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d044      	beq.n	800a766 <send+0x12a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	3340      	adds	r3, #64	; 0x40
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	3302      	adds	r3, #2
 800a6e4:	2110      	movs	r1, #16
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fa42 	bl	800ab70 <WIZCHIP_WRITE>
         //M20150401 : Typing Error
         //#if _WZICHIP_ == 5200
         #if _WIZCHIP_ == 5200
            if(getSn_TX_RD(sn) != sock_next_rd[sn])
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	3340      	adds	r3, #64	; 0x40
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	3322      	adds	r3, #34	; 0x22
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fa6d 	bl	800abd4 <WIZCHIP_READ>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	021c      	lsls	r4, r3, #8
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	3340      	adds	r3, #64	; 0x40
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	3323      	adds	r3, #35	; 0x23
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fa64 	bl	800abd4 <WIZCHIP_READ>
 800a70c:	4603      	mov	r3, r0
 800a70e:	4423      	add	r3, r4
 800a710:	79fa      	ldrb	r2, [r7, #7]
 800a712:	4962      	ldr	r1, [pc, #392]	; (800a89c <send+0x260>)
 800a714:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800a718:	4293      	cmp	r3, r2
 800a71a:	d014      	beq.n	800a746 <send+0x10a>
            {
               setSn_CR(sn,Sn_CR_SEND);
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	3340      	adds	r3, #64	; 0x40
 800a720:	021b      	lsls	r3, r3, #8
 800a722:	3301      	adds	r3, #1
 800a724:	2120      	movs	r1, #32
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fa22 	bl	800ab70 <WIZCHIP_WRITE>
               while(getSn_CR(sn));
 800a72c:	bf00      	nop
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	3340      	adds	r3, #64	; 0x40
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	3301      	adds	r3, #1
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fa4c 	bl	800abd4 <WIZCHIP_READ>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f5      	bne.n	800a72e <send+0xf2>
               return SOCK_BUSY;
 800a742:	2300      	movs	r3, #0
 800a744:	e0a4      	b.n	800a890 <send+0x254>
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2201      	movs	r2, #1
 800a74a:	fa02 f303 	lsl.w	r3, r2, r3
 800a74e:	b21b      	sxth	r3, r3
 800a750:	43db      	mvns	r3, r3
 800a752:	b21a      	sxth	r2, r3
 800a754:	4b50      	ldr	r3, [pc, #320]	; (800a898 <send+0x25c>)
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b21b      	sxth	r3, r3
 800a75a:	4013      	ands	r3, r2
 800a75c:	b21b      	sxth	r3, r3
 800a75e:	b29a      	uxth	r2, r3
 800a760:	4b4d      	ldr	r3, [pc, #308]	; (800a898 <send+0x25c>)
 800a762:	801a      	strh	r2, [r3, #0]
 800a764:	e00d      	b.n	800a782 <send+0x146>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	f003 0308 	and.w	r3, r3, #8
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d006      	beq.n	800a77e <send+0x142>
      {
         close(sn);
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff fe3e 	bl	800a3f4 <close>
         return SOCKERR_TIMEOUT;
 800a778:	f06f 030c 	mvn.w	r3, #12
 800a77c:	e088      	b.n	800a890 <send+0x254>
      }
      else return SOCK_BUSY;
 800a77e:	2300      	movs	r3, #0
 800a780:	e086      	b.n	800a890 <send+0x254>
   }
   freesize = getSn_TxMAX(sn);
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	3340      	adds	r3, #64	; 0x40
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	331f      	adds	r3, #31
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fa22 	bl	800abd4 <WIZCHIP_READ>
 800a790:	4603      	mov	r3, r0
 800a792:	b29b      	uxth	r3, r3
 800a794:	029b      	lsls	r3, r3, #10
 800a796:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800a798:	88ba      	ldrh	r2, [r7, #4]
 800a79a:	89bb      	ldrh	r3, [r7, #12]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d901      	bls.n	800a7a4 <send+0x168>
 800a7a0:	89bb      	ldrh	r3, [r7, #12]
 800a7a2:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fadc 	bl	800ad64 <getSn_TX_FSR>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	3340      	adds	r3, #64	; 0x40
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	3303      	adds	r3, #3
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fa0b 	bl	800abd4 <WIZCHIP_READ>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
 800a7c4:	2b17      	cmp	r3, #23
 800a7c6:	d009      	beq.n	800a7dc <send+0x1a0>
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ca:	2b1c      	cmp	r3, #28
 800a7cc:	d006      	beq.n	800a7dc <send+0x1a0>
      {
         close(sn);
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff fe0f 	bl	800a3f4 <close>
         return SOCKERR_SOCKSTATUS;
 800a7d6:	f06f 0306 	mvn.w	r3, #6
 800a7da:	e059      	b.n	800a890 <send+0x254>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800a7dc:	4b30      	ldr	r3, [pc, #192]	; (800a8a0 <send+0x264>)
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	fa42 f303 	asr.w	r3, r2, r3
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <send+0x1c0>
 800a7f0:	88ba      	ldrh	r2, [r7, #4]
 800a7f2:	89bb      	ldrh	r3, [r7, #12]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d901      	bls.n	800a7fc <send+0x1c0>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e049      	b.n	800a890 <send+0x254>
      if(len <= freesize) break;
 800a7fc:	88ba      	ldrh	r2, [r7, #4]
 800a7fe:	89bb      	ldrh	r3, [r7, #12]
 800a800:	429a      	cmp	r2, r3
 800a802:	d900      	bls.n	800a806 <send+0x1ca>
      freesize = getSn_TX_FSR(sn);
 800a804:	e7ce      	b.n	800a7a4 <send+0x168>
      if(len <= freesize) break;
 800a806:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800a808:	88ba      	ldrh	r2, [r7, #4]
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fb80 	bl	800af14 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
 800a814:	79fc      	ldrb	r4, [r7, #7]
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	3340      	adds	r3, #64	; 0x40
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	3322      	adds	r3, #34	; 0x22
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 f9d8 	bl	800abd4 <WIZCHIP_READ>
 800a824:	4603      	mov	r3, r0
 800a826:	b29b      	uxth	r3, r3
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	b29d      	uxth	r5, r3
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	3340      	adds	r3, #64	; 0x40
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	3323      	adds	r3, #35	; 0x23
 800a834:	4618      	mov	r0, r3
 800a836:	f000 f9cd 	bl	800abd4 <WIZCHIP_READ>
 800a83a:	4603      	mov	r3, r0
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	442b      	add	r3, r5
 800a840:	b29a      	uxth	r2, r3
 800a842:	88bb      	ldrh	r3, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	b29a      	uxth	r2, r3
 800a848:	4b14      	ldr	r3, [pc, #80]	; (800a89c <send+0x260>)
 800a84a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	3340      	adds	r3, #64	; 0x40
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	3301      	adds	r3, #1
 800a856:	2120      	movs	r1, #32
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 f989 	bl	800ab70 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800a85e:	bf00      	nop
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	3340      	adds	r3, #64	; 0x40
 800a864:	021b      	lsls	r3, r3, #8
 800a866:	3301      	adds	r3, #1
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 f9b3 	bl	800abd4 <WIZCHIP_READ>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1f5      	bne.n	800a860 <send+0x224>
   sock_is_sending |= (1 << sn);
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	2201      	movs	r2, #1
 800a878:	fa02 f303 	lsl.w	r3, r2, r3
 800a87c:	b21a      	sxth	r2, r3
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <send+0x25c>)
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	b21b      	sxth	r3, r3
 800a884:	4313      	orrs	r3, r2
 800a886:	b21b      	sxth	r3, r3
 800a888:	b29a      	uxth	r2, r3
 800a88a:	4b03      	ldr	r3, [pc, #12]	; (800a898 <send+0x25c>)
 800a88c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800a88e:	88bb      	ldrh	r3, [r7, #4]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bdb0      	pop	{r4, r5, r7, pc}
 800a898:	20003e02 	.word	0x20003e02
 800a89c:	20003e1c 	.word	0x20003e1c
 800a8a0:	20003e00 	.word	0x20003e00

0800a8a4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	6039      	str	r1, [r7, #0]
 800a8ae:	71fb      	strb	r3, [r7, #7]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d902      	bls.n	800a8c8 <recv+0x24>
 800a8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c6:	e091      	b.n	800a9ec <recv+0x148>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	3340      	adds	r3, #64	; 0x40
 800a8cc:	021b      	lsls	r3, r3, #8
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f980 	bl	800abd4 <WIZCHIP_READ>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f003 030f 	and.w	r3, r3, #15
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d002      	beq.n	800a8e4 <recv+0x40>
 800a8de:	f06f 0304 	mvn.w	r3, #4
 800a8e2:	e083      	b.n	800a9ec <recv+0x148>
   CHECK_SOCKDATA();
 800a8e4:	88bb      	ldrh	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d102      	bne.n	800a8f0 <recv+0x4c>
 800a8ea:	f06f 030d 	mvn.w	r3, #13
 800a8ee:	e07d      	b.n	800a9ec <recv+0x148>
   
   recvsize = getSn_RxMAX(sn);
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	3340      	adds	r3, #64	; 0x40
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	331e      	adds	r3, #30
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 f96b 	bl	800abd4 <WIZCHIP_READ>
 800a8fe:	4603      	mov	r3, r0
 800a900:	b29b      	uxth	r3, r3
 800a902:	029b      	lsls	r3, r3, #10
 800a904:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800a906:	89ba      	ldrh	r2, [r7, #12]
 800a908:	88bb      	ldrh	r3, [r7, #4]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d201      	bcs.n	800a912 <recv+0x6e>
 800a90e:	89bb      	ldrh	r3, [r7, #12]
 800a910:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fa68 	bl	800adea <getSn_RX_RSR>
 800a91a:	4603      	mov	r3, r0
 800a91c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	3340      	adds	r3, #64	; 0x40
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	3303      	adds	r3, #3
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f954 	bl	800abd4 <WIZCHIP_READ>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	2b17      	cmp	r3, #23
 800a934:	d024      	beq.n	800a980 <recv+0xdc>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	2b1c      	cmp	r3, #28
 800a93a:	d11a      	bne.n	800a972 <recv+0xce>
            {
               if(recvsize != 0) break;
 800a93c:	89bb      	ldrh	r3, [r7, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d131      	bne.n	800a9a6 <recv+0x102>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fa0d 	bl	800ad64 <getSn_TX_FSR>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461c      	mov	r4, r3
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	3340      	adds	r3, #64	; 0x40
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	331f      	adds	r3, #31
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f93c 	bl	800abd4 <WIZCHIP_READ>
 800a95c:	4603      	mov	r3, r0
 800a95e:	029b      	lsls	r3, r3, #10
 800a960:	429c      	cmp	r4, r3
 800a962:	d10d      	bne.n	800a980 <recv+0xdc>
               {
                  close(sn);
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff fd44 	bl	800a3f4 <close>
                  return SOCKERR_SOCKSTATUS;
 800a96c:	f06f 0306 	mvn.w	r3, #6
 800a970:	e03c      	b.n	800a9ec <recv+0x148>
               }
            }
            else
            {
               close(sn);
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff fd3d 	bl	800a3f4 <close>
               return SOCKERR_SOCKSTATUS;
 800a97a:	f06f 0306 	mvn.w	r3, #6
 800a97e:	e035      	b.n	800a9ec <recv+0x148>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800a980:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <recv+0x150>)
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	fa42 f303 	asr.w	r3, r2, r3
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <recv+0xfa>
 800a994:	89bb      	ldrh	r3, [r7, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <recv+0xfa>
 800a99a:	2300      	movs	r3, #0
 800a99c:	e026      	b.n	800a9ec <recv+0x148>
         if(recvsize != 0) break;
 800a99e:	89bb      	ldrh	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <recv+0x106>
         recvsize = getSn_RX_RSR(sn);
 800a9a4:	e7b5      	b.n	800a912 <recv+0x6e>
               if(recvsize != 0) break;
 800a9a6:	bf00      	nop
 800a9a8:	e000      	b.n	800a9ac <recv+0x108>
         if(recvsize != 0) break;
 800a9aa:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800a9ac:	89ba      	ldrh	r2, [r7, #12]
 800a9ae:	88bb      	ldrh	r3, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d201      	bcs.n	800a9b8 <recv+0x114>
 800a9b4:	89bb      	ldrh	r3, [r7, #12]
 800a9b6:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800a9b8:	88ba      	ldrh	r2, [r7, #4]
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fb3c 	bl	800b03c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	3340      	adds	r3, #64	; 0x40
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	2140      	movs	r1, #64	; 0x40
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f8ce 	bl	800ab70 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800a9d4:	bf00      	nop
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	3340      	adds	r3, #64	; 0x40
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	3301      	adds	r3, #1
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 f8f8 	bl	800abd4 <WIZCHIP_READ>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1f5      	bne.n	800a9d6 <recv+0x132>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800a9ea:	88bb      	ldrh	r3, [r7, #4]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd90      	pop	{r4, r7, pc}
 800a9f4:	20003e00 	.word	0x20003e00

0800a9f8 <setsockopt>:
   }
   return SOCK_OK;
}

int8_t  setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	603a      	str	r2, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
 800aa04:	460b      	mov	r3, r1
 800aa06:	71bb      	strb	r3, [r7, #6]
 // M20131220 : Remove warning
 //uint8_t tmp;
   CHECK_SOCKNUM();
 800aa08:	79fb      	ldrb	r3, [r7, #7]
 800aa0a:	2b08      	cmp	r3, #8
 800aa0c:	d902      	bls.n	800aa14 <setsockopt+0x1c>
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa12:	e0a8      	b.n	800ab66 <setsockopt+0x16e>
   switch(sotype)
 800aa14:	79bb      	ldrb	r3, [r7, #6]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	2b05      	cmp	r3, #5
 800aa1a:	f200 80a0 	bhi.w	800ab5e <setsockopt+0x166>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <setsockopt+0x2c>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa3d 	.word	0x0800aa3d
 800aa28:	0800aa55 	.word	0x0800aa55
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aaa3 	.word	0x0800aaa3
 800aa34:	0800aab7 	.word	0x0800aab7
 800aa38:	0800aaed 	.word	0x0800aaed
   {
      case SO_TTL:
         setSn_TTL(sn,*(uint8_t*)arg);
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	3340      	adds	r3, #64	; 0x40
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	3316      	adds	r3, #22
 800aa44:	461a      	mov	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	f000 f88f 	bl	800ab70 <WIZCHIP_WRITE>
         break;
 800aa52:	e087      	b.n	800ab64 <setsockopt+0x16c>
      case SO_TOS:
         setSn_TOS(sn,*(uint8_t*)arg);
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	3340      	adds	r3, #64	; 0x40
 800aa58:	021b      	lsls	r3, r3, #8
 800aa5a:	3315      	adds	r3, #21
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f000 f883 	bl	800ab70 <WIZCHIP_WRITE>
         break;
 800aa6a:	e07b      	b.n	800ab64 <setsockopt+0x16c>
      case SO_MSS:
         setSn_MSSR(sn,*(uint16_t*)arg);
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	3340      	adds	r3, #64	; 0x40
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	3312      	adds	r3, #18
 800aa74:	461a      	mov	r2, r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	0a1b      	lsrs	r3, r3, #8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f000 f874 	bl	800ab70 <WIZCHIP_WRITE>
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	3340      	adds	r3, #64	; 0x40
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	3313      	adds	r3, #19
 800aa90:	461a      	mov	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	881b      	ldrh	r3, [r3, #0]
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f000 f868 	bl	800ab70 <WIZCHIP_WRITE>
         break;
 800aaa0:	e060      	b.n	800ab64 <setsockopt+0x16c>
      case SO_DESTIP:
         setSn_DIPR(sn, (uint8_t*)arg);
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	3340      	adds	r3, #64	; 0x40
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	330c      	adds	r3, #12
 800aaaa:	2204      	movs	r2, #4
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f8c2 	bl	800ac38 <WIZCHIP_WRITE_BUF>
         break;
 800aab4:	e056      	b.n	800ab64 <setsockopt+0x16c>
      case SO_DESTPORT:
         setSn_DPORT(sn, *(uint16_t*)arg);
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	3340      	adds	r3, #64	; 0x40
 800aaba:	021b      	lsls	r3, r3, #8
 800aabc:	3310      	adds	r3, #16
 800aabe:	461a      	mov	r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	0a1b      	lsrs	r3, r3, #8
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f000 f84f 	bl	800ab70 <WIZCHIP_WRITE>
 800aad2:	79fb      	ldrb	r3, [r7, #7]
 800aad4:	3340      	adds	r3, #64	; 0x40
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	3311      	adds	r3, #17
 800aada:	461a      	mov	r2, r3
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f000 f843 	bl	800ab70 <WIZCHIP_WRITE>
         break;
 800aaea:	e03b      	b.n	800ab64 <setsockopt+0x16c>
#if _WIZCHIP_ != 5100
      case SO_KEEPALIVESEND:
         CHECK_SOCKMODE(Sn_MR_TCP);
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	3340      	adds	r3, #64	; 0x40
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 f86e 	bl	800abd4 <WIZCHIP_READ>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	f003 030f 	and.w	r3, r3, #15
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d002      	beq.n	800ab08 <setsockopt+0x110>
 800ab02:	f06f 0304 	mvn.w	r3, #4
 800ab06:	e02e      	b.n	800ab66 <setsockopt+0x16e>
         #if _WIZCHIP_ > 5200
            if(getSn_KPALVTR(sn) != 0) return SOCKERR_SOCKOPT;
         #endif
            setSn_CR(sn,Sn_CR_SEND_KEEP);
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	3340      	adds	r3, #64	; 0x40
 800ab0c:	021b      	lsls	r3, r3, #8
 800ab0e:	3301      	adds	r3, #1
 800ab10:	2122      	movs	r1, #34	; 0x22
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f82c 	bl	800ab70 <WIZCHIP_WRITE>
            while(getSn_CR(sn) != 0)
 800ab18:	e016      	b.n	800ab48 <setsockopt+0x150>
            {
               // M20131220
         		//if ((tmp = getSn_IR(sn)) & Sn_IR_TIMEOUT)
               if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	3340      	adds	r3, #64	; 0x40
 800ab1e:	021b      	lsls	r3, r3, #8
 800ab20:	3302      	adds	r3, #2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 f856 	bl	800abd4 <WIZCHIP_READ>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <setsockopt+0x150>
         		{
         			setSn_IR(sn, Sn_IR_TIMEOUT);
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	3340      	adds	r3, #64	; 0x40
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	3302      	adds	r3, #2
 800ab3a:	2108      	movs	r1, #8
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f817 	bl	800ab70 <WIZCHIP_WRITE>
                  return SOCKERR_TIMEOUT;
 800ab42:	f06f 030c 	mvn.w	r3, #12
 800ab46:	e00e      	b.n	800ab66 <setsockopt+0x16e>
            while(getSn_CR(sn) != 0)
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	3340      	adds	r3, #64	; 0x40
 800ab4c:	021b      	lsls	r3, r3, #8
 800ab4e:	3301      	adds	r3, #1
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 f83f 	bl	800abd4 <WIZCHIP_READ>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1de      	bne.n	800ab1a <setsockopt+0x122>
         		}
            }
         break;
 800ab5c:	e002      	b.n	800ab64 <setsockopt+0x16c>
         setSn_KPALVTR(sn,*(uint8_t*)arg);
         break;
   #endif      
#endif   
      default:
         return SOCKERR_ARG;
 800ab5e:	f06f 0309 	mvn.w	r3, #9
 800ab62:	e000      	b.n	800ab66 <setsockopt+0x16e>
   }   
   return SOCK_OK;
 800ab64:	2301      	movs	r3, #1
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop

0800ab70 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5200)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
	WIZCHIP_CRITICAL_ENTER();
 800ab7c:	4b14      	ldr	r3, [pc, #80]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	4798      	blx	r3
   WIZCHIP.CS._select();
 800ab82:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800ab88:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	0a12      	lsrs	r2, r2, #8
 800ab90:	b2d2      	uxtb	r2, r2
 800ab92:	4610      	mov	r0, r2
 800ab94:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800ab96:	4b0e      	ldr	r3, [pc, #56]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	b2d2      	uxtb	r2, r2
 800ab9e:	4610      	mov	r0, r2
 800aba0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(_W5200_SPI_WRITE_);  // Data write command and Write data length upper
 800aba2:	4b0b      	ldr	r3, [pc, #44]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	2080      	movs	r0, #128	; 0x80
 800aba8:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x01);  // Write data length lower
 800abaa:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	2001      	movs	r0, #1
 800abb0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 800abb2:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	78fa      	ldrb	r2, [r7, #3]
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!"
#endif

   WIZCHIP.CS._deselect();
 800abbc:	4b04      	ldr	r3, [pc, #16]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800abc2:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <WIZCHIP_WRITE+0x60>)
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	4798      	blx	r3
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000010 	.word	0x20000010

0800abd4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 800abdc:	4b15      	ldr	r3, [pc, #84]	; (800ac34 <WIZCHIP_READ+0x60>)
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	4798      	blx	r3
   WIZCHIP.CS._select();
 800abe2:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <WIZCHIP_READ+0x60>)
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800abe8:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <WIZCHIP_READ+0x60>)
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	0a12      	lsrs	r2, r2, #8
 800abf0:	b2d2      	uxtb	r2, r2
 800abf2:	4610      	mov	r0, r2
 800abf4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800abf6:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <WIZCHIP_READ+0x60>)
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	b2d2      	uxtb	r2, r2
 800abfe:	4610      	mov	r0, r2
 800ac00:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(_W5200_SPI_READ_);                             // Read data length upper    
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <WIZCHIP_READ+0x60>)
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	2000      	movs	r0, #0
 800ac08:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x01);                             // Data length lower  
 800ac0a:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <WIZCHIP_READ+0x60>)
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800ac12:	4b08      	ldr	r3, [pc, #32]	; (800ac34 <WIZCHIP_READ+0x60>)
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	4798      	blx	r3
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]
   	
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!"   
#endif

   WIZCHIP.CS._deselect();
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <WIZCHIP_READ+0x60>)
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800ac22:	4b04      	ldr	r3, [pc, #16]	; (800ac34 <WIZCHIP_READ+0x60>)
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	4798      	blx	r3
   return ret;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000010 	.word	0x20000010

0800ac38 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 800ac4a:	4b20      	ldr	r3, [pc, #128]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	4798      	blx	r3
   WIZCHIP.CS._select();
 800ac50:	4b1e      	ldr	r3, [pc, #120]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800ac56:	4b1d      	ldr	r3, [pc, #116]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	0a12      	lsrs	r2, r2, #8
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800ac64:	4b19      	ldr	r3, [pc, #100]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte(_W5200_SPI_WRITE_ | ((len & 0x7F00) >> 8));         // Write data op code and length upper    
 800ac70:	4b16      	ldr	r3, [pc, #88]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	88fa      	ldrh	r2, [r7, #6]
 800ac76:	0a12      	lsrs	r2, r2, #8
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	b2d2      	uxtb	r2, r2
 800ac7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	4610      	mov	r0, r2
 800ac84:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((len & 0x00FF) >> 0);         // length lower
 800ac86:	4b11      	ldr	r3, [pc, #68]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	88fa      	ldrh	r2, [r7, #6]
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
  for(i = 0; i < len; i++)
 800ac92:	2300      	movs	r3, #0
 800ac94:	82fb      	strh	r3, [r7, #22]
 800ac96:	e00a      	b.n	800acae <WIZCHIP_WRITE_BUF+0x76>
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800ac98:	4b0c      	ldr	r3, [pc, #48]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	8afa      	ldrh	r2, [r7, #22]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	440a      	add	r2, r1
 800aca2:	7812      	ldrb	r2, [r2, #0]
 800aca4:	4610      	mov	r0, r2
 800aca6:	4798      	blx	r3
  for(i = 0; i < len; i++)
 800aca8:	8afb      	ldrh	r3, [r7, #22]
 800acaa:	3301      	adds	r3, #1
 800acac:	82fb      	strh	r3, [r7, #22]
 800acae:	8afa      	ldrh	r2, [r7, #22]
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d3f0      	bcc.n	800ac98 <WIZCHIP_WRITE_BUF+0x60>
   WIZCHIP_WRITE(MR, WIZCHIP_READ(MR) & ~MR_AI);   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!!"
#endif

   WIZCHIP.CS._deselect();
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800acbc:	4b03      	ldr	r3, [pc, #12]	; (800accc <WIZCHIP_WRITE_BUF+0x94>)
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	4798      	blx	r3
}
 800acc2:	bf00      	nop
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20000010 	.word	0x20000010

0800acd0 <WIZCHIP_READ_BUF>:

/**
@brief  This function reads into W5200 memory(Buffer)
*/ 
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 800ace2:	4b1f      	ldr	r3, [pc, #124]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	4798      	blx	r3
   WIZCHIP.CS._select();
 800ace8:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800acee:	4b1c      	ldr	r3, [pc, #112]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	0a12      	lsrs	r2, r2, #8
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800acfc:	4b18      	ldr	r3, [pc, #96]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	b2d2      	uxtb	r2, r2
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte( _W5200_SPI_READ_ | ((len & 0x7F00) >> 8));         // Write data op code and length upper    
 800ad08:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	88fa      	ldrh	r2, [r7, #6]
 800ad0e:	1212      	asrs	r2, r2, #8
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((len & 0x00FF) >> 0);         // length lower
 800ad1c:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	88fa      	ldrh	r2, [r7, #6]
 800ad22:	b2d2      	uxtb	r2, r2
 800ad24:	4610      	mov	r0, r2
 800ad26:	4798      	blx	r3
  for(i = 0; i < len; i++)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	82fb      	strh	r3, [r7, #22]
 800ad2c:	e00a      	b.n	800ad44 <WIZCHIP_READ_BUF+0x74>
    pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800ad2e:	8afb      	ldrh	r3, [r7, #22]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	18d4      	adds	r4, r2, r3
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	4798      	blx	r3
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	7023      	strb	r3, [r4, #0]
  for(i = 0; i < len; i++)
 800ad3e:	8afb      	ldrh	r3, [r7, #22]
 800ad40:	3301      	adds	r3, #1
 800ad42:	82fb      	strh	r3, [r7, #22]
 800ad44:	8afa      	ldrh	r2, [r7, #22]
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d3f0      	bcc.n	800ad2e <WIZCHIP_READ_BUF+0x5e>
   setMR(getMR() & ~MR_AI); 
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!!"
#endif

   WIZCHIP.CS._deselect();
 800ad4c:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800ad52:	4b03      	ldr	r3, [pc, #12]	; (800ad60 <WIZCHIP_READ_BUF+0x90>)
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	4798      	blx	r3
}
 800ad58:	bf00      	nop
 800ad5a:	371c      	adds	r7, #28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd90      	pop	{r4, r7, pc}
 800ad60:	20000010 	.word	0x20000010

0800ad64 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	81fb      	strh	r3, [r7, #14]
 800ad72:	2300      	movs	r3, #0
 800ad74:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800ad76:	79fb      	ldrb	r3, [r7, #7]
 800ad78:	3340      	adds	r3, #64	; 0x40
 800ad7a:	021b      	lsls	r3, r3, #8
 800ad7c:	3320      	adds	r3, #32
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff ff28 	bl	800abd4 <WIZCHIP_READ>
 800ad84:	4603      	mov	r3, r0
 800ad86:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800ad88:	89bb      	ldrh	r3, [r7, #12]
 800ad8a:	021b      	lsls	r3, r3, #8
 800ad8c:	b29c      	uxth	r4, r3
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	3340      	adds	r3, #64	; 0x40
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	3321      	adds	r3, #33	; 0x21
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff ff1c 	bl	800abd4 <WIZCHIP_READ>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	4423      	add	r3, r4
 800ada2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800ada4:	89bb      	ldrh	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d016      	beq.n	800add8 <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	3340      	adds	r3, #64	; 0x40
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	3320      	adds	r3, #32
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff ff0e 	bl	800abd4 <WIZCHIP_READ>
 800adb8:	4603      	mov	r3, r0
 800adba:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800adbc:	89fb      	ldrh	r3, [r7, #14]
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	b29c      	uxth	r4, r3
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	3340      	adds	r3, #64	; 0x40
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	3321      	adds	r3, #33	; 0x21
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff ff02 	bl	800abd4 <WIZCHIP_READ>
 800add0:	4603      	mov	r3, r0
 800add2:	b29b      	uxth	r3, r3
 800add4:	4423      	add	r3, r4
 800add6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800add8:	89fa      	ldrh	r2, [r7, #14]
 800adda:	89bb      	ldrh	r3, [r7, #12]
 800addc:	429a      	cmp	r2, r3
 800adde:	d1ca      	bne.n	800ad76 <getSn_TX_FSR+0x12>
   return val;
 800ade0:	89fb      	ldrh	r3, [r7, #14]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd90      	pop	{r4, r7, pc}

0800adea <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800adea:	b590      	push	{r4, r7, lr}
 800adec:	b085      	sub	sp, #20
 800adee:	af00      	add	r7, sp, #0
 800adf0:	4603      	mov	r3, r0
 800adf2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	81fb      	strh	r3, [r7, #14]
 800adf8:	2300      	movs	r3, #0
 800adfa:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	3340      	adds	r3, #64	; 0x40
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	3326      	adds	r3, #38	; 0x26
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff fee5 	bl	800abd4 <WIZCHIP_READ>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800ae0e:	89bb      	ldrh	r3, [r7, #12]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	b29c      	uxth	r4, r3
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	3340      	adds	r3, #64	; 0x40
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	3327      	adds	r3, #39	; 0x27
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff fed9 	bl	800abd4 <WIZCHIP_READ>
 800ae22:	4603      	mov	r3, r0
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4423      	add	r3, r4
 800ae28:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800ae2a:	89bb      	ldrh	r3, [r7, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d016      	beq.n	800ae5e <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	3340      	adds	r3, #64	; 0x40
 800ae34:	021b      	lsls	r3, r3, #8
 800ae36:	3326      	adds	r3, #38	; 0x26
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff fecb 	bl	800abd4 <WIZCHIP_READ>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800ae42:	89fb      	ldrh	r3, [r7, #14]
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	b29c      	uxth	r4, r3
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	3340      	adds	r3, #64	; 0x40
 800ae4c:	021b      	lsls	r3, r3, #8
 800ae4e:	3327      	adds	r3, #39	; 0x27
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff febf 	bl	800abd4 <WIZCHIP_READ>
 800ae56:	4603      	mov	r3, r0
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	4423      	add	r3, r4
 800ae5c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800ae5e:	89fa      	ldrh	r2, [r7, #14]
 800ae60:	89bb      	ldrh	r3, [r7, #12]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d1ca      	bne.n	800adfc <getSn_RX_RSR+0x12>
   return val;
 800ae66:	89fb      	ldrh	r3, [r7, #14]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd90      	pop	{r4, r7, pc}

0800ae70 <getSn_RxBASE>:
/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////

uint16_t getSn_RxBASE(uint8_t sn)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
   uint16_t rxbase = _WIZCHIP_IO_RXBUF_;
 800ae7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ae7e:	81bb      	strh	r3, [r7, #12]
   for(i = 0; i < sn; i++)
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]
 800ae84:	e013      	b.n	800aeae <getSn_RxBASE+0x3e>
      rxbase += getSn_RxMAX(i);
 800ae86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae8a:	3340      	adds	r3, #64	; 0x40
 800ae8c:	021b      	lsls	r3, r3, #8
 800ae8e:	331e      	adds	r3, #30
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff fe9f 	bl	800abd4 <WIZCHIP_READ>
 800ae96:	4603      	mov	r3, r0
 800ae98:	029b      	lsls	r3, r3, #10
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	89bb      	ldrh	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	81bb      	strh	r3, [r7, #12]
   for(i = 0; i < sn; i++)
 800aea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	3301      	adds	r3, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	73fb      	strb	r3, [r7, #15]
 800aeae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	dbe6      	blt.n	800ae86 <getSn_RxBASE+0x16>
   return rxbase;
 800aeb8:	89bb      	ldrh	r3, [r7, #12]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <getSn_TxBASE>:

uint16_t getSn_TxBASE(uint8_t sn)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	4603      	mov	r3, r0
 800aeca:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
   uint16_t txbase = _WIZCHIP_IO_TXBUF_;
 800aecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed0:	81bb      	strh	r3, [r7, #12]
   for(i = 0; i < sn; i++)
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
 800aed6:	e013      	b.n	800af00 <getSn_TxBASE+0x3e>
      txbase += getSn_TxMAX(i);
 800aed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aedc:	3340      	adds	r3, #64	; 0x40
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	331f      	adds	r3, #31
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7ff fe76 	bl	800abd4 <WIZCHIP_READ>
 800aee8:	4603      	mov	r3, r0
 800aeea:	029b      	lsls	r3, r3, #10
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	89bb      	ldrh	r3, [r7, #12]
 800aef0:	4413      	add	r3, r2
 800aef2:	81bb      	strh	r3, [r7, #12]
   for(i = 0; i < sn; i++)
 800aef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	3301      	adds	r3, #1
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	73fb      	strb	r3, [r7, #15]
 800af00:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	429a      	cmp	r2, r3
 800af08:	dbe6      	blt.n	800aed8 <getSn_TxBASE+0x16>
   return txbase;
 800af0a:	89bb      	ldrh	r3, [r7, #12]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <wiz_send_data>:
the Tx memory uper-bound of socket.

*/
                                        
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800af14:	b590      	push	{r4, r7, lr}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	4613      	mov	r3, r2
 800af22:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint8_t * dst_ptr;

  ptr = getSn_TX_WR(sn);
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	3340      	adds	r3, #64	; 0x40
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	3324      	adds	r3, #36	; 0x24
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff fe51 	bl	800abd4 <WIZCHIP_READ>
 800af32:	4603      	mov	r3, r0
 800af34:	b29b      	uxth	r3, r3
 800af36:	021b      	lsls	r3, r3, #8
 800af38:	b29c      	uxth	r4, r3
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	3340      	adds	r3, #64	; 0x40
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	3325      	adds	r3, #37	; 0x25
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fe46 	bl	800abd4 <WIZCHIP_READ>
 800af48:	4603      	mov	r3, r0
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	4423      	add	r3, r4
 800af4e:	82fb      	strh	r3, [r7, #22]


  dst_mask = (uint32_t)ptr & getSn_TxMASK(sn);
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	3340      	adds	r3, #64	; 0x40
 800af54:	021b      	lsls	r3, r3, #8
 800af56:	331f      	adds	r3, #31
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fe3b 	bl	800abd4 <WIZCHIP_READ>
 800af5e:	4603      	mov	r3, r0
 800af60:	b29b      	uxth	r3, r3
 800af62:	029b      	lsls	r3, r3, #10
 800af64:	b29b      	uxth	r3, r3
 800af66:	3b01      	subs	r3, #1
 800af68:	b29a      	uxth	r2, r3
 800af6a:	8afb      	ldrh	r3, [r7, #22]
 800af6c:	4013      	ands	r3, r2
 800af6e:	82bb      	strh	r3, [r7, #20]
  dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn) + dst_mask);
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	4618      	mov	r0, r3
 800af74:	f7ff ffa5 	bl	800aec2 <getSn_TxBASE>
 800af78:	4603      	mov	r3, r0
 800af7a:	461a      	mov	r2, r3
 800af7c:	8abb      	ldrh	r3, [r7, #20]
 800af7e:	4413      	add	r3, r2
 800af80:	613b      	str	r3, [r7, #16]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 800af82:	8aba      	ldrh	r2, [r7, #20]
 800af84:	88bb      	ldrh	r3, [r7, #4]
 800af86:	18d4      	adds	r4, r2, r3
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	3340      	adds	r3, #64	; 0x40
 800af8c:	021b      	lsls	r3, r3, #8
 800af8e:	331f      	adds	r3, #31
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fe1f 	bl	800abd4 <WIZCHIP_READ>
 800af96:	4603      	mov	r3, r0
 800af98:	029b      	lsls	r3, r3, #10
 800af9a:	429c      	cmp	r4, r3
 800af9c:	dd28      	ble.n	800aff0 <wiz_send_data+0xdc>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	3340      	adds	r3, #64	; 0x40
 800afa2:	021b      	lsls	r3, r3, #8
 800afa4:	331f      	adds	r3, #31
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fe14 	bl	800abd4 <WIZCHIP_READ>
 800afac:	4603      	mov	r3, r0
 800afae:	b29b      	uxth	r3, r3
 800afb0:	029b      	lsls	r3, r3, #10
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	8abb      	ldrh	r3, [r7, #20]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	81fb      	strh	r3, [r7, #14]
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	89fa      	ldrh	r2, [r7, #14]
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff fe39 	bl	800ac38 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 800afc6:	89fb      	ldrh	r3, [r7, #14]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	4413      	add	r3, r2
 800afcc:	603b      	str	r3, [r7, #0]
    size = len - size;
 800afce:	88ba      	ldrh	r2, [r7, #4]
 800afd0:	89fb      	ldrh	r3, [r7, #14]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	81fb      	strh	r3, [r7, #14]
    dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn));
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff ff72 	bl	800aec2 <getSn_TxBASE>
 800afde:	4603      	mov	r3, r0
 800afe0:	613b      	str	r3, [r7, #16]
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	89fa      	ldrh	r2, [r7, #14]
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff fe25 	bl	800ac38 <WIZCHIP_WRITE_BUF>
 800afee:	e005      	b.n	800affc <wiz_send_data+0xe8>
  } 
  else
  {
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, len);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	88ba      	ldrh	r2, [r7, #4]
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fe1e 	bl	800ac38 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 800affc:	8afa      	ldrh	r2, [r7, #22]
 800affe:	88bb      	ldrh	r3, [r7, #4]
 800b000:	4413      	add	r3, r2
 800b002:	82fb      	strh	r3, [r7, #22]

  setSn_TX_WR(sn, ptr);  
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	3340      	adds	r3, #64	; 0x40
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	3324      	adds	r3, #36	; 0x24
 800b00c:	461a      	mov	r2, r3
 800b00e:	8afb      	ldrh	r3, [r7, #22]
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	b29b      	uxth	r3, r3
 800b014:	b2db      	uxtb	r3, r3
 800b016:	4619      	mov	r1, r3
 800b018:	4610      	mov	r0, r2
 800b01a:	f7ff fda9 	bl	800ab70 <WIZCHIP_WRITE>
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	3340      	adds	r3, #64	; 0x40
 800b022:	021b      	lsls	r3, r3, #8
 800b024:	3325      	adds	r3, #37	; 0x25
 800b026:	461a      	mov	r2, r3
 800b028:	8afb      	ldrh	r3, [r7, #22]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f7ff fd9e 	bl	800ab70 <WIZCHIP_WRITE>
}
 800b034:	bf00      	nop
 800b036:	371c      	adds	r7, #28
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd90      	pop	{r4, r7, pc}

0800b03c <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	6039      	str	r1, [r7, #0]
 800b046:	71fb      	strb	r3, [r7, #7]
 800b048:	4613      	mov	r3, r2
 800b04a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint8_t * src_ptr;

  ptr = getSn_RX_RD(sn);
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	3340      	adds	r3, #64	; 0x40
 800b050:	021b      	lsls	r3, r3, #8
 800b052:	3328      	adds	r3, #40	; 0x28
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff fdbd 	bl	800abd4 <WIZCHIP_READ>
 800b05a:	4603      	mov	r3, r0
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	021b      	lsls	r3, r3, #8
 800b060:	b29c      	uxth	r4, r3
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	3340      	adds	r3, #64	; 0x40
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	3329      	adds	r3, #41	; 0x29
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fdb2 	bl	800abd4 <WIZCHIP_READ>
 800b070:	4603      	mov	r3, r0
 800b072:	b29b      	uxth	r3, r3
 800b074:	4423      	add	r3, r4
 800b076:	82fb      	strh	r3, [r7, #22]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800b078:	79fb      	ldrb	r3, [r7, #7]
 800b07a:	3340      	adds	r3, #64	; 0x40
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	331e      	adds	r3, #30
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fda7 	bl	800abd4 <WIZCHIP_READ>
 800b086:	4603      	mov	r3, r0
 800b088:	b29b      	uxth	r3, r3
 800b08a:	029b      	lsls	r3, r3, #10
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	3b01      	subs	r3, #1
 800b090:	b29a      	uxth	r2, r3
 800b092:	8afb      	ldrh	r3, [r7, #22]
 800b094:	4013      	ands	r3, r2
 800b096:	82bb      	strh	r3, [r7, #20]
  src_ptr = (uint8_t *)((uint32_t)getSn_RxBASE(sn) + src_mask);
 800b098:	79fb      	ldrb	r3, [r7, #7]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff fee8 	bl	800ae70 <getSn_RxBASE>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	8abb      	ldrh	r3, [r7, #20]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]
  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 800b0aa:	8aba      	ldrh	r2, [r7, #20]
 800b0ac:	88bb      	ldrh	r3, [r7, #4]
 800b0ae:	18d4      	adds	r4, r2, r3
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	3340      	adds	r3, #64	; 0x40
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	331e      	adds	r3, #30
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fd8b 	bl	800abd4 <WIZCHIP_READ>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	029b      	lsls	r3, r3, #10
 800b0c2:	429c      	cmp	r4, r3
 800b0c4:	dd28      	ble.n	800b118 <wiz_recv_data+0xdc>
  {
    size = getSn_RxMAX(sn) - src_mask;
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	3340      	adds	r3, #64	; 0x40
 800b0ca:	021b      	lsls	r3, r3, #8
 800b0cc:	331e      	adds	r3, #30
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff fd80 	bl	800abd4 <WIZCHIP_READ>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	029b      	lsls	r3, r3, #10
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	8abb      	ldrh	r3, [r7, #20]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	81fb      	strh	r3, [r7, #14]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	89fa      	ldrh	r2, [r7, #14]
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff fdf1 	bl	800acd0 <WIZCHIP_READ_BUF>
    wizdata += size;
 800b0ee:	89fb      	ldrh	r3, [r7, #14]
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	603b      	str	r3, [r7, #0]
    size = len - size;
 800b0f6:	88ba      	ldrh	r2, [r7, #4]
 800b0f8:	89fb      	ldrh	r3, [r7, #14]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	81fb      	strh	r3, [r7, #14]
    src_ptr = (uint8_t*)((uint32_t)getSn_RxBASE(sn));
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff feb5 	bl	800ae70 <getSn_RxBASE>
 800b106:	4603      	mov	r3, r0
 800b108:	613b      	str	r3, [r7, #16]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	89fa      	ldrh	r2, [r7, #14]
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff fddd 	bl	800acd0 <WIZCHIP_READ_BUF>
 800b116:	e005      	b.n	800b124 <wiz_recv_data+0xe8>
  } 
  else
  {
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, len);
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	88ba      	ldrh	r2, [r7, #4]
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fdd6 	bl	800acd0 <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 800b124:	8afa      	ldrh	r2, [r7, #22]
 800b126:	88bb      	ldrh	r3, [r7, #4]
 800b128:	4413      	add	r3, r2
 800b12a:	82fb      	strh	r3, [r7, #22]
  
  setSn_RX_RD(sn, ptr);
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	3340      	adds	r3, #64	; 0x40
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	3328      	adds	r3, #40	; 0x28
 800b134:	461a      	mov	r2, r3
 800b136:	8afb      	ldrh	r3, [r7, #22]
 800b138:	0a1b      	lsrs	r3, r3, #8
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7ff fd15 	bl	800ab70 <WIZCHIP_WRITE>
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	3340      	adds	r3, #64	; 0x40
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	3329      	adds	r3, #41	; 0x29
 800b14e:	461a      	mov	r2, r3
 800b150:	8afb      	ldrh	r3, [r7, #22]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7ff fd0a 	bl	800ab70 <WIZCHIP_WRITE>
}
 800b15c:	bf00      	nop
 800b15e:	371c      	adds	r7, #28
 800b160:	46bd      	mov	sp, r7
 800b162:	bd90      	pop	{r4, r7, pc}

0800b164 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800b164:	b480      	push	{r7}
 800b166:	af00      	add	r7, sp, #0
 800b168:	bf00      	nop
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800b172:	b480      	push	{r7}
 800b174:	af00      	add	r7, sp, #0
 800b176:	bf00      	nop
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
	PIN_nCS1(RESET);
 800b184:	2200      	movs	r2, #0
 800b186:	2140      	movs	r1, #64	; 0x40
 800b188:	4802      	ldr	r0, [pc, #8]	; (800b194 <wizchip_cs_select+0x14>)
 800b18a:	f7f7 fa83 	bl	8002694 <HAL_GPIO_WritePin>
}
 800b18e:	bf00      	nop
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	58020400 	.word	0x58020400

0800b198 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
	PIN_nCS1(SET);
 800b19c:	2201      	movs	r2, #1
 800b19e:	2140      	movs	r1, #64	; 0x40
 800b1a0:	4802      	ldr	r0, [pc, #8]	; (800b1ac <wizchip_cs_deselect+0x14>)
 800b1a2:	f7f7 fa77 	bl	8002694 <HAL_GPIO_WritePin>
}
 800b1a6:	bf00      	nop
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	58020400 	.word	0x58020400

0800b1b0 <wizchip_spi_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
	uint8_t buf;
	HAL_SPI_Receive(&hspi3,&buf,1,20);
 800b1b6:	1df9      	adds	r1, r7, #7
 800b1b8:	2314      	movs	r3, #20
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4803      	ldr	r0, [pc, #12]	; (800b1cc <wizchip_spi_readbyte+0x1c>)
 800b1be:	f7f9 ffb1 	bl	8005124 <HAL_SPI_Receive>
	return buf;
 800b1c2:	79fb      	ldrb	r3, [r7, #7]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20003ec4 	.word	0x20003ec4

0800b1d0 <wizchip_spi_writebyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &wb, 1, 20);
 800b1da:	1df9      	adds	r1, r7, #7
 800b1dc:	2314      	movs	r3, #20
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4803      	ldr	r0, [pc, #12]	; (800b1f0 <wizchip_spi_writebyte+0x20>)
 800b1e2:	f7f9 fdab 	bl	8004d3c <HAL_SPI_Transmit>
}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20003ec4 	.word	0x20003ec4

0800b1f4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2206      	movs	r2, #6
 800b200:	4619      	mov	r1, r3
 800b202:	2009      	movs	r0, #9
 800b204:	f7ff fd18 	bl	800ac38 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	330e      	adds	r3, #14
 800b20c:	2204      	movs	r2, #4
 800b20e:	4619      	mov	r1, r3
 800b210:	2001      	movs	r0, #1
 800b212:	f7ff fd11 	bl	800ac38 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	330a      	adds	r3, #10
 800b21a:	2204      	movs	r2, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	2005      	movs	r0, #5
 800b220:	f7ff fd0a 	bl	800ac38 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3306      	adds	r3, #6
 800b228:	2204      	movs	r2, #4
 800b22a:	4619      	mov	r1, r3
 800b22c:	200f      	movs	r0, #15
 800b22e:	f7ff fd03 	bl	800ac38 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7c9a      	ldrb	r2, [r3, #18]
 800b236:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <wizchip_setnetinfo+0x70>)
 800b238:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	7cda      	ldrb	r2, [r3, #19]
 800b23e:	4b09      	ldr	r3, [pc, #36]	; (800b264 <wizchip_setnetinfo+0x70>)
 800b240:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	7d1a      	ldrb	r2, [r3, #20]
 800b246:	4b07      	ldr	r3, [pc, #28]	; (800b264 <wizchip_setnetinfo+0x70>)
 800b248:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7d5a      	ldrb	r2, [r3, #21]
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <wizchip_setnetinfo+0x70>)
 800b250:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	7d9a      	ldrb	r2, [r3, #22]
 800b256:	4b04      	ldr	r3, [pc, #16]	; (800b268 <wizchip_setnetinfo+0x74>)
 800b258:	701a      	strb	r2, [r3, #0]
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20003e2c 	.word	0x20003e2c
 800b268:	20003e30 	.word	0x20003e30

0800b26c <EthernetTask_func>:
QueueHandle_t xQueue_Scanning_start = NULL;

SemaphoreHandle_t Mutex_Eth = NULL;

void EthernetTask_func(void const * argument)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b0de      	sub	sp, #376	; 0x178
 800b270:	af02      	add	r7, sp, #8
 800b272:	1d3b      	adds	r3, r7, #4
 800b274:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  PIN_PWDN(RESET);
 800b276:	2200      	movs	r2, #0
 800b278:	2104      	movs	r1, #4
 800b27a:	48c8      	ldr	r0, [pc, #800]	; (800b59c <EthernetTask_func+0x330>)
 800b27c:	f7f7 fa0a 	bl	8002694 <HAL_GPIO_WritePin>
  PIN_nRESET(SET);
 800b280:	2201      	movs	r2, #1
 800b282:	2110      	movs	r1, #16
 800b284:	48c5      	ldr	r0, [pc, #788]	; (800b59c <EthernetTask_func+0x330>)
 800b286:	f7f7 fa05 	bl	8002694 <HAL_GPIO_WritePin>
  PIN_nCS1(SET);
 800b28a:	2201      	movs	r2, #1
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	48c4      	ldr	r0, [pc, #784]	; (800b5a0 <EthernetTask_func+0x334>)
 800b290:	f7f7 fa00 	bl	8002694 <HAL_GPIO_WritePin>

  Mutex_Eth = xSemaphoreCreateMutex();
 800b294:	2001      	movs	r0, #1
 800b296:	f7fd f85f 	bl	8008358 <xQueueCreateMutex>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4bc1      	ldr	r3, [pc, #772]	; (800b5a4 <EthernetTask_func+0x338>)
 800b29e:	601a      	str	r2, [r3, #0]
  if(Mutex_Eth == NULL)
 800b2a0:	4bc0      	ldr	r3, [pc, #768]	; (800b5a4 <EthernetTask_func+0x338>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <EthernetTask_func+0x40>
    Error_Handler();
 800b2a8:	f002 fcdc 	bl	800dc64 <Error_Handler>

  xQueue_Scanning_start = xQueueCreate(1, sizeof(uint8_t));
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	f7fc ffdd 	bl	8008270 <xQueueGenericCreate>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4bbb      	ldr	r3, [pc, #748]	; (800b5a8 <EthernetTask_func+0x33c>)
 800b2ba:	601a      	str	r2, [r3, #0]
  if(xQueue_Scanning_start == NULL)
 800b2bc:	4bba      	ldr	r3, [pc, #744]	; (800b5a8 <EthernetTask_func+0x33c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <EthernetTask_func+0x5c>
    Error_Handler();
 800b2c4:	f002 fcce 	bl	800dc64 <Error_Handler>

	vTaskDelay(300);
 800b2c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b2cc:	f7fd fe3a 	bl	8008f44 <vTaskDelay>

	wiz_NetData.dhcp = 2;
 800b2d0:	4bb6      	ldr	r3, [pc, #728]	; (800b5ac <EthernetTask_func+0x340>)
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	759a      	strb	r2, [r3, #22]
	memcpy(wiz_NetData.sn, subnet_mask_adr, 4);
 800b2d6:	4bb6      	ldr	r3, [pc, #728]	; (800b5b0 <EthernetTask_func+0x344>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4ab4      	ldr	r2, [pc, #720]	; (800b5ac <EthernetTask_func+0x340>)
 800b2dc:	f8c2 300a 	str.w	r3, [r2, #10]
	memcpy(wiz_NetData.ip, ip_source_adr, 4);
 800b2e0:	4bb4      	ldr	r3, [pc, #720]	; (800b5b4 <EthernetTask_func+0x348>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4ab1      	ldr	r2, [pc, #708]	; (800b5ac <EthernetTask_func+0x340>)
 800b2e6:	f8c2 3006 	str.w	r3, [r2, #6]
	memcpy(wiz_NetData.mac, source_hardware_adr,6);
 800b2ea:	4bb0      	ldr	r3, [pc, #704]	; (800b5ac <EthernetTask_func+0x340>)
 800b2ec:	4ab2      	ldr	r2, [pc, #712]	; (800b5b8 <EthernetTask_func+0x34c>)
 800b2ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2f2:	6018      	str	r0, [r3, #0]
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	8019      	strh	r1, [r3, #0]
	wizchip_setnetinfo(&wiz_NetData);
 800b2f8:	48ac      	ldr	r0, [pc, #688]	; (800b5ac <EthernetTask_func+0x340>)
 800b2fa:	f7ff ff7b 	bl	800b1f4 <wizchip_setnetinfo>

	setsockopt(SOCKET0, SO_DESTPORT, &socket_port);
 800b2fe:	4aaf      	ldr	r2, [pc, #700]	; (800b5bc <EthernetTask_func+0x350>)
 800b300:	2105      	movs	r1, #5
 800b302:	2000      	movs	r0, #0
 800b304:	f7ff fb78 	bl	800a9f8 <setsockopt>
	//setsockopt(SOCKET0, SO_DESTIP, ip_destination_adr);
	setRTR(timeout_period);
 800b308:	4bad      	ldr	r3, [pc, #692]	; (800b5c0 <EthernetTask_func+0x354>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	0a1b      	lsrs	r3, r3, #8
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	4619      	mov	r1, r3
 800b312:	2017      	movs	r0, #23
 800b314:	f7ff fc2c 	bl	800ab70 <WIZCHIP_WRITE>
 800b318:	4ba9      	ldr	r3, [pc, #676]	; (800b5c0 <EthernetTask_func+0x354>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	4619      	mov	r1, r3
 800b320:	2018      	movs	r0, #24
 800b322:	f7ff fc25 	bl	800ab70 <WIZCHIP_WRITE>
	taskENTER_CRITICAL();
	DHCP_init(SOCKET5, dhcp_buf);
	taskEXIT_CRITICAL();
	//DHCP===*/
	TimerHandle_t xTimer_period_reset;
	xTimer_period_reset = xTimerCreate("Period timer", 200, pdTRUE, (void*)0, vTimerCallback);
 800b326:	4ba7      	ldr	r3, [pc, #668]	; (800b5c4 <EthernetTask_func+0x358>)
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	2300      	movs	r3, #0
 800b32c:	2201      	movs	r2, #1
 800b32e:	21c8      	movs	r1, #200	; 0xc8
 800b330:	48a5      	ldr	r0, [pc, #660]	; (800b5c8 <EthernetTask_func+0x35c>)
 800b332:	f7fe fc41 	bl	8009bb8 <xTimerCreate>
 800b336:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
	xTimerStart(xTimer_period_reset, 0);
 800b33a:	f7fd ff35 	bl	80091a8 <xTaskGetTickCount>
 800b33e:	4602      	mov	r2, r0
 800b340:	2300      	movs	r3, #0
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	2300      	movs	r3, #0
 800b346:	2101      	movs	r1, #1
 800b348:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800b34c:	f7fe fc84 	bl	8009c58 <xTimerGenericCommand>
	  {
	      uint8_t nmt_msg[2] = {0x81, 1};
 800b350:	4b9e      	ldr	r3, [pc, #632]	; (800b5cc <EthernetTask_func+0x360>)
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
	      can_tx_func(&hfdcan2, 0, 2, nmt_msg);
 800b358:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800b35c:	2202      	movs	r2, #2
 800b35e:	2100      	movs	r1, #0
 800b360:	489b      	ldr	r0, [pc, #620]	; (800b5d0 <EthernetTask_func+0x364>)
 800b362:	f001 f911 	bl	800c588 <can_tx_func>
	  }
	extern IWDG_HandleTypeDef hiwdg1;
	{
	  uint8_t can_data_rx1[8] = {0};
 800b366:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	605a      	str	r2, [r3, #4]
	  HAL_IWDG_Refresh(&hiwdg1);
	  }*/

	  {
	    canopen_u canopen_rcv;
	    uint8_t can_data_tx[4] = {6,0,0,0};
 800b370:	2306      	movs	r3, #6
 800b372:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 800b376:	2300      	movs	r3, #0
 800b378:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 800b37c:	2300      	movs	r3, #0
 800b37e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 800b382:	2300      	movs	r3, #0
 800b384:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		canopen_req_resp_sdo(0x600+1, 0x2B,0x6040,0,can_data_tx, &canopen_rcv);
		uint8_t can_open_tx[8] = {0x2B,0x40,0x60,0,0x06,0,0,0};
	    }*/
	  }//*/
	}
	DIG_OUT4(SET);
 800b388:	2201      	movs	r2, #1
 800b38a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b38e:	4891      	ldr	r0, [pc, #580]	; (800b5d4 <EthernetTask_func+0x368>)
 800b390:	f7f7 f980 	bl	8002694 <HAL_GPIO_WritePin>
	LED_VD1(SET);
 800b394:	2201      	movs	r2, #1
 800b396:	2180      	movs	r1, #128	; 0x80
 800b398:	4881      	ldr	r0, [pc, #516]	; (800b5a0 <EthernetTask_func+0x334>)
 800b39a:	f7f7 f97b 	bl	8002694 <HAL_GPIO_WritePin>
	    LED_VD5(RESET);
	  taskEXIT_CRITICAL();
	  //DHCP===*/
      FDCAN_RxHeaderTypeDef rxHeader;
      uint8_t temp_data[8];
	  if(!PIN_nINT)
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	487e      	ldr	r0, [pc, #504]	; (800b59c <EthernetTask_func+0x330>)
 800b3a2:	f7f7 f95f 	bl	8002664 <HAL_GPIO_ReadPin>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d111      	bne.n	800b3d0 <EthernetTask_func+0x164>
	    {
	      LED_VD1(SET);
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	2180      	movs	r1, #128	; 0x80
 800b3b0:	487b      	ldr	r0, [pc, #492]	; (800b5a0 <EthernetTask_func+0x334>)
 800b3b2:	f7f7 f96f 	bl	8002694 <HAL_GPIO_WritePin>
	      disconnect(SOCKET0);
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	f7ff f8d2 	bl	800a560 <disconnect>
	      setSn_IR(SOCKET0, getSn_IR(SOCKET0));
 800b3bc:	f244 0002 	movw	r0, #16386	; 0x4002
 800b3c0:	f7ff fc08 	bl	800abd4 <WIZCHIP_READ>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	f244 0002 	movw	r0, #16386	; 0x4002
 800b3cc:	f7ff fbd0 	bl	800ab70 <WIZCHIP_WRITE>
	    }

	  switch (getSn_SR(SOCKET0)){
 800b3d0:	f244 0003 	movw	r0, #16387	; 0x4003
 800b3d4:	f7ff fbfe 	bl	800abd4 <WIZCHIP_READ>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b1c      	cmp	r3, #28
 800b3dc:	f200 80d2 	bhi.w	800b584 <EthernetTask_func+0x318>
 800b3e0:	a201      	add	r2, pc, #4	; (adr r2, 800b3e8 <EthernetTask_func+0x17c>)
 800b3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e6:	bf00      	nop
 800b3e8:	0800b51f 	.word	0x0800b51f
 800b3ec:	0800b585 	.word	0x0800b585
 800b3f0:	0800b585 	.word	0x0800b585
 800b3f4:	0800b585 	.word	0x0800b585
 800b3f8:	0800b585 	.word	0x0800b585
 800b3fc:	0800b585 	.word	0x0800b585
 800b400:	0800b585 	.word	0x0800b585
 800b404:	0800b585 	.word	0x0800b585
 800b408:	0800b585 	.word	0x0800b585
 800b40c:	0800b585 	.word	0x0800b585
 800b410:	0800b585 	.word	0x0800b585
 800b414:	0800b585 	.word	0x0800b585
 800b418:	0800b585 	.word	0x0800b585
 800b41c:	0800b585 	.word	0x0800b585
 800b420:	0800b585 	.word	0x0800b585
 800b424:	0800b585 	.word	0x0800b585
 800b428:	0800b585 	.word	0x0800b585
 800b42c:	0800b585 	.word	0x0800b585
 800b430:	0800b585 	.word	0x0800b585
 800b434:	0800b573 	.word	0x0800b573
 800b438:	0800b585 	.word	0x0800b585
 800b43c:	0800b585 	.word	0x0800b585
 800b440:	0800b585 	.word	0x0800b585
 800b444:	0800b45d 	.word	0x0800b45d
 800b448:	0800b585 	.word	0x0800b585
 800b44c:	0800b585 	.word	0x0800b585
 800b450:	0800b585 	.word	0x0800b585
 800b454:	0800b585 	.word	0x0800b585
 800b458:	0800b50d 	.word	0x0800b50d
	  case SOCK_ESTABLISHED:
	  {
	    if(xTimerIsTimerActive(xTimer_period_reset) != pdFALSE)
 800b45c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800b460:	f7fe fe9e 	bl	800a1a0 <xTimerIsTimerActive>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d008      	beq.n	800b47c <EthernetTask_func+0x210>
	    xTimerStop(xTimer_period_reset, 0);
 800b46a:	2300      	movs	r3, #0
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	2300      	movs	r3, #0
 800b470:	2200      	movs	r2, #0
 800b472:	2103      	movs	r1, #3
 800b474:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800b478:	f7fe fbee 	bl	8009c58 <xTimerGenericCommand>

	    /*if(xSemaphoreTake(Mutex_Eth,200) == pdTRUE){*/
		  LED_VD2(SET);
 800b47c:	2201      	movs	r2, #1
 800b47e:	2102      	movs	r1, #2
 800b480:	4846      	ldr	r0, [pc, #280]	; (800b59c <EthernetTask_func+0x330>)
 800b482:	f7f7 f907 	bl	8002694 <HAL_GPIO_WritePin>
		  LED_VD1(SET);
 800b486:	2201      	movs	r2, #1
 800b488:	2180      	movs	r1, #128	; 0x80
 800b48a:	4845      	ldr	r0, [pc, #276]	; (800b5a0 <EthernetTask_func+0x334>)
 800b48c:	f7f7 f902 	bl	8002694 <HAL_GPIO_WritePin>
		  uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 800b490:	4a51      	ldr	r2, [pc, #324]	; (800b5d8 <EthernetTask_func+0x36c>)
 800b492:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b49a:	e883 0003 	stmia.w	r3, {r0, r1}
		  can_tx_func(&hfdcan2, 0x622, 0, buf);
 800b49e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f240 6122 	movw	r1, #1570	; 0x622
 800b4a8:	4849      	ldr	r0, [pc, #292]	; (800b5d0 <EthernetTask_func+0x364>)
 800b4aa:	f001 f86d 	bl	800c588 <can_tx_func>
		  volatile fobos_protocol_buf_u fobos_eth_buf;
		  for(int i=0; i<10; i++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800b4b4:	e00c      	b.n	800b4d0 <EthernetTask_func+0x264>
		    fobos_eth_buf.fobos_protocol_buf_t.data[i] = 0;
 800b4b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b4ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b4be:	4413      	add	r3, r2
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<10; i++)
 800b4c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800b4d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	ddee      	ble.n	800b4b6 <EthernetTask_func+0x24a>
		  taskENTER_CRITICAL();
 800b4d8:	f7fc fb66 	bl	8007ba8 <vPortEnterCritical>
		  recv(SOCKET0,fobos_eth_buf.data_to_transmit, 258);
 800b4dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b4e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f7ff f9dc 	bl	800a8a4 <recv>
		  taskEXIT_CRITICAL();
 800b4ec:	f7fc fb8e 	bl	8007c0c <vPortExitCritical>
		  eth_cmds_analysis(&fobos_eth_buf);
 800b4f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f893 	bl	800b620 <eth_cmds_analysis>
		  LED_VD1(RESET);
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2180      	movs	r1, #128	; 0x80
 800b4fe:	4828      	ldr	r0, [pc, #160]	; (800b5a0 <EthernetTask_func+0x334>)
 800b500:	f7f7 f8c8 	bl	8002694 <HAL_GPIO_WritePin>
		  HAL_IWDG_Refresh(&hiwdg1);
 800b504:	4835      	ldr	r0, [pc, #212]	; (800b5dc <EthernetTask_func+0x370>)
 800b506:	f7f7 f947 	bl	8002798 <HAL_IWDG_Refresh>
	   /* }*/
	  }
		  break;
 800b50a:	e03b      	b.n	800b584 <EthernetTask_func+0x318>
	  case SOCK_CLOSE_WAIT:
		  //xTimerStart(xTimer_period_reset, 0);
		  disconnect(SOCKET0);
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7ff f827 	bl	800a560 <disconnect>
		  LED_VD2(RESET);
 800b512:	2200      	movs	r2, #0
 800b514:	2102      	movs	r1, #2
 800b516:	4821      	ldr	r0, [pc, #132]	; (800b59c <EthernetTask_func+0x330>)
 800b518:	f7f7 f8bc 	bl	8002694 <HAL_GPIO_WritePin>
		  break;
 800b51c:	e032      	b.n	800b584 <EthernetTask_func+0x318>
	  case SOCK_CLOSED:
	    /*if(xTimerIsTimerActive(xTimer_period_reset) == pdFALSE)
	    xTimerStart(xTimer_period_reset, 0);*/
	    {
	      static uint8_t a=0;
	      if(a == 0){
 800b51e:	4b30      	ldr	r3, [pc, #192]	; (800b5e0 <EthernetTask_func+0x374>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d113      	bne.n	800b54e <EthernetTask_func+0x2e2>
		  a++;
 800b526:	4b2e      	ldr	r3, [pc, #184]	; (800b5e0 <EthernetTask_func+0x374>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	3301      	adds	r3, #1
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	4b2c      	ldr	r3, [pc, #176]	; (800b5e0 <EthernetTask_func+0x374>)
 800b530:	701a      	strb	r2, [r3, #0]
		  uint8_t nmt_msg[2] = {0x81, 1};
 800b532:	4b26      	ldr	r3, [pc, #152]	; (800b5cc <EthernetTask_func+0x360>)
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
		  can_tx_func(&hfdcan2, 0, 2, nmt_msg);
 800b53a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b53e:	2202      	movs	r2, #2
 800b540:	2100      	movs	r1, #0
 800b542:	4823      	ldr	r0, [pc, #140]	; (800b5d0 <EthernetTask_func+0x364>)
 800b544:	f001 f820 	bl	800c588 <can_tx_func>
		  motor_state_indication = 0;
 800b548:	4b26      	ldr	r3, [pc, #152]	; (800b5e4 <EthernetTask_func+0x378>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
	      }
	    }
	    LED_VD1(SET);
 800b54e:	2201      	movs	r2, #1
 800b550:	2180      	movs	r1, #128	; 0x80
 800b552:	4813      	ldr	r0, [pc, #76]	; (800b5a0 <EthernetTask_func+0x334>)
 800b554:	f7f7 f89e 	bl	8002694 <HAL_GPIO_WritePin>
	    socket(SOCKET0,Sn_MR_TCP,socket_port,0x00);
 800b558:	4b18      	ldr	r3, [pc, #96]	; (800b5bc <EthernetTask_func+0x350>)
 800b55a:	881a      	ldrh	r2, [r3, #0]
 800b55c:	2300      	movs	r3, #0
 800b55e:	2101      	movs	r1, #1
 800b560:	2000      	movs	r0, #0
 800b562:	f7fe fe43 	bl	800a1ec <socket>
	    LED_VD2(RESET);
 800b566:	2200      	movs	r2, #0
 800b568:	2102      	movs	r1, #2
 800b56a:	480c      	ldr	r0, [pc, #48]	; (800b59c <EthernetTask_func+0x330>)
 800b56c:	f7f7 f892 	bl	8002694 <HAL_GPIO_WritePin>
		  break;
 800b570:	e008      	b.n	800b584 <EthernetTask_func+0x318>

	  case SOCK_INIT:
	    listen(SOCKET0);
 800b572:	2000      	movs	r0, #0
 800b574:	f7fe ffa4 	bl	800a4c0 <listen>
	    LED_VD2(RESET);
 800b578:	2200      	movs	r2, #0
 800b57a:	2102      	movs	r1, #2
 800b57c:	4807      	ldr	r0, [pc, #28]	; (800b59c <EthernetTask_func+0x330>)
 800b57e:	f7f7 f889 	bl	8002694 <HAL_GPIO_WritePin>
		  break;
 800b582:	bf00      	nop
	  }
	  vTaskDelay(80);
 800b584:	2050      	movs	r0, #80	; 0x50
 800b586:	f7fd fcdd 	bl	8008f44 <vTaskDelay>
	  can_protocol_data_analyzing(&hfdcan2, &rxHeader, temp_data);
 800b58a:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800b58e:	f107 030c 	add.w	r3, r7, #12
 800b592:	4619      	mov	r1, r3
 800b594:	480e      	ldr	r0, [pc, #56]	; (800b5d0 <EthernetTask_func+0x364>)
 800b596:	f001 fde7 	bl	800d168 <can_protocol_data_analyzing>
  {
 800b59a:	e700      	b.n	800b39e <EthernetTask_func+0x132>
 800b59c:	58020c00 	.word	0x58020c00
 800b5a0:	58020400 	.word	0x58020400
 800b5a4:	20003e50 	.word	0x20003e50
 800b5a8:	20003e4c 	.word	0x20003e4c
 800b5ac:	20003e34 	.word	0x20003e34
 800b5b0:	2000003c 	.word	0x2000003c
 800b5b4:	20000048 	.word	0x20000048
 800b5b8:	20000040 	.word	0x20000040
 800b5bc:	20000038 	.word	0x20000038
 800b5c0:	2000004c 	.word	0x2000004c
 800b5c4:	0800c641 	.word	0x0800c641
 800b5c8:	0800e168 	.word	0x0800e168
 800b5cc:	0800e178 	.word	0x0800e178
 800b5d0:	20004090 	.word	0x20004090
 800b5d4:	58021000 	.word	0x58021000
 800b5d8:	0800e17c 	.word	0x0800e17c
 800b5dc:	20003eb4 	.word	0x20003eb4
 800b5e0:	20003e66 	.word	0x20003e66
 800b5e4:	20003e4b 	.word	0x20003e4b

0800b5e8 <fobos_eth_protocol_send>:
  /* USER CODE END 5 */
}
}

void fobos_eth_protocol_send(uint8_t CMD, uint8_t bytes_in_packet_N, fobos_protocol_buf_u *fobos_eth_buf){
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	603a      	str	r2, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	71bb      	strb	r3, [r7, #6]
	fobos_eth_buf->fobos_protocol_buf_t.CMD = CMD;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	79fa      	ldrb	r2, [r7, #7]
 800b5fc:	701a      	strb	r2, [r3, #0]
	fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = bytes_in_packet_N;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	79ba      	ldrb	r2, [r7, #6]
 800b602:	705a      	strb	r2, [r3, #1]
	send(SOCKET0,fobos_eth_buf->data_to_transmit,bytes_in_packet_N+2);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	79bb      	ldrb	r3, [r7, #6]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	3302      	adds	r3, #2
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	461a      	mov	r2, r3
 800b610:	2000      	movs	r0, #0
 800b612:	f7ff f813 	bl	800a63c <send>
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <eth_cmds_analysis>:

static void position_mode_process_left();
static void position_mode_process_right();
static void position_mode_process_calibration();

void eth_cmds_analysis(volatile fobos_protocol_buf_u *fobos_eth_buf){
 800b620:	b5b0      	push	{r4, r5, r7, lr}
 800b622:	b0b4      	sub	sp, #208	; 0xd0
 800b624:	af02      	add	r7, sp, #8
 800b626:	6078      	str	r0, [r7, #4]
  extern FDCAN_HandleTypeDef hfdcan2;
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	2b0e      	cmp	r3, #14
 800b630:	f000 8472 	beq.w	800bf18 <eth_cmds_analysis+0x8f8>
 800b634:	2b0e      	cmp	r3, #14
 800b636:	dc2b      	bgt.n	800b690 <eth_cmds_analysis+0x70>
 800b638:	2b05      	cmp	r3, #5
 800b63a:	f000 8506 	beq.w	800c04a <eth_cmds_analysis+0xa2a>
 800b63e:	2b05      	cmp	r3, #5
 800b640:	dc13      	bgt.n	800b66a <eth_cmds_analysis+0x4a>
 800b642:	2b02      	cmp	r3, #2
 800b644:	f000 84bb 	beq.w	800bfbe <eth_cmds_analysis+0x99e>
 800b648:	2b02      	cmp	r3, #2
 800b64a:	dc06      	bgt.n	800b65a <eth_cmds_analysis+0x3a>
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d051      	beq.n	800b6f4 <eth_cmds_analysis+0xd4>
 800b650:	2b01      	cmp	r3, #1
 800b652:	f000 84a6 	beq.w	800bfa2 <eth_cmds_analysis+0x982>
 800b656:	f000 be3a 	b.w	800c2ce <eth_cmds_analysis+0xcae>
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	f000 84bd 	beq.w	800bfda <eth_cmds_analysis+0x9ba>
 800b660:	2b04      	cmp	r3, #4
 800b662:	f000 854b 	beq.w	800c0fc <eth_cmds_analysis+0xadc>
 800b666:	f000 be32 	b.w	800c2ce <eth_cmds_analysis+0xcae>
 800b66a:	2b0a      	cmp	r3, #10
 800b66c:	f000 8090 	beq.w	800b790 <eth_cmds_analysis+0x170>
 800b670:	2b0a      	cmp	r3, #10
 800b672:	dc06      	bgt.n	800b682 <eth_cmds_analysis+0x62>
 800b674:	2b06      	cmp	r3, #6
 800b676:	f000 8085 	beq.w	800b784 <eth_cmds_analysis+0x164>
 800b67a:	2b07      	cmp	r3, #7
 800b67c:	d047      	beq.n	800b70e <eth_cmds_analysis+0xee>
 800b67e:	f000 be26 	b.w	800c2ce <eth_cmds_analysis+0xcae>
 800b682:	2b0c      	cmp	r3, #12
 800b684:	f000 8152 	beq.w	800b92c <eth_cmds_analysis+0x30c>
 800b688:	2b0c      	cmp	r3, #12
 800b68a:	f300 81a5 	bgt.w	800b9d8 <eth_cmds_analysis+0x3b8>
 800b68e:	e0f7      	b.n	800b880 <eth_cmds_analysis+0x260>
 800b690:	2b19      	cmp	r3, #25
 800b692:	f000 83b2 	beq.w	800bdfa <eth_cmds_analysis+0x7da>
 800b696:	2b19      	cmp	r3, #25
 800b698:	dc14      	bgt.n	800b6c4 <eth_cmds_analysis+0xa4>
 800b69a:	2b16      	cmp	r3, #22
 800b69c:	f000 82a5 	beq.w	800bbea <eth_cmds_analysis+0x5ca>
 800b6a0:	2b16      	cmp	r3, #22
 800b6a2:	dc07      	bgt.n	800b6b4 <eth_cmds_analysis+0x94>
 800b6a4:	2b14      	cmp	r3, #20
 800b6a6:	f000 81b7 	beq.w	800ba18 <eth_cmds_analysis+0x3f8>
 800b6aa:	2b15      	cmp	r3, #21
 800b6ac:	f000 8236 	beq.w	800bb1c <eth_cmds_analysis+0x4fc>
 800b6b0:	f000 be0d 	b.w	800c2ce <eth_cmds_analysis+0xcae>
 800b6b4:	2b17      	cmp	r3, #23
 800b6b6:	f000 82bc 	beq.w	800bc32 <eth_cmds_analysis+0x612>
 800b6ba:	2b18      	cmp	r3, #24
 800b6bc:	f000 8336 	beq.w	800bd2c <eth_cmds_analysis+0x70c>
 800b6c0:	f000 be05 	b.w	800c2ce <eth_cmds_analysis+0xcae>
 800b6c4:	2bfb      	cmp	r3, #251	; 0xfb
 800b6c6:	f000 85e2 	beq.w	800c28e <eth_cmds_analysis+0xc6e>
 800b6ca:	2bfb      	cmp	r3, #251	; 0xfb
 800b6cc:	dc07      	bgt.n	800b6de <eth_cmds_analysis+0xbe>
 800b6ce:	2b1e      	cmp	r3, #30
 800b6d0:	f000 83ff 	beq.w	800bed2 <eth_cmds_analysis+0x8b2>
 800b6d4:	2bfa      	cmp	r3, #250	; 0xfa
 800b6d6:	f000 85a6 	beq.w	800c226 <eth_cmds_analysis+0xc06>
 800b6da:	f000 bdf8 	b.w	800c2ce <eth_cmds_analysis+0xcae>
 800b6de:	2bfd      	cmp	r3, #253	; 0xfd
 800b6e0:	f000 853a 	beq.w	800c158 <eth_cmds_analysis+0xb38>
 800b6e4:	2bfd      	cmp	r3, #253	; 0xfd
 800b6e6:	f2c0 8559 	blt.w	800c19c <eth_cmds_analysis+0xb7c>
 800b6ea:	2bfe      	cmp	r3, #254	; 0xfe
 800b6ec:	f000 84e6 	beq.w	800c0bc <eth_cmds_analysis+0xa9c>
 800b6f0:	f000 bded 	b.w	800c2ce <eth_cmds_analysis+0xcae>
	{
	  static uint8_t basing_point = 0;
	case FOBOS_ETH_ECHO:
		send(SOCKET0,
			fobos_eth_buf->data_to_transmit,
 800b6f4:	6879      	ldr	r1, [r7, #4]
			fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	785b      	ldrb	r3, [r3, #1]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	b29b      	uxth	r3, r3
		send(SOCKET0,
 800b6fe:	3302      	adds	r3, #2
 800b700:	b29b      	uxth	r3, r3
 800b702:	461a      	mov	r2, r3
 800b704:	2000      	movs	r0, #0
 800b706:	f7fe ff99 	bl	800a63c <send>
		break;
 800b70a:	f000 bdf6 	b.w	800c2fa <eth_cmds_analysis+0xcda>
	case  FOBOS_ETH_GET_MAC:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	785b      	ldrb	r3, [r3, #1]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d128      	bne.n	800b76a <eth_cmds_analysis+0x14a>
	  {
	    uint8_t mac_adr[6] = {0};
 800b718:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	809a      	strh	r2, [r3, #4]
	    getSHAR(mac_adr);
 800b722:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b726:	2206      	movs	r2, #6
 800b728:	4619      	mov	r1, r3
 800b72a:	2009      	movs	r0, #9
 800b72c:	f7ff fad0 	bl	800acd0 <WIZCHIP_READ_BUF>
	    fobos_eth_buf->fobos_protocol_buf_t.CMD = FOBOS_ETH_GET_MAC;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2207      	movs	r2, #7
 800b734:	701a      	strb	r2, [r3, #0]
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	709a      	strb	r2, [r3, #2]
	    memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, mac_adr, 6);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	3302      	adds	r3, #2
 800b740:	3301      	adds	r3, #1
 800b742:	461a      	mov	r2, r3
 800b744:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	6010      	str	r0, [r2, #0]
 800b74c:	889b      	ldrh	r3, [r3, #4]
 800b74e:	8093      	strh	r3, [r2, #4]
	    fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 6+1;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2207      	movs	r2, #7
 800b754:	705a      	strb	r2, [r3, #1]
	    fobos_eth_protocol_send(FOBOS_ETH_GET_MAC, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	785b      	ldrb	r3, [r3, #1]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	4619      	mov	r1, r3
 800b760:	2007      	movs	r0, #7
 800b762:	f7ff ff41 	bl	800b5e8 <fobos_eth_protocol_send>
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
		fobos_eth_protocol_send(FOBOS_ETH_GET_MAC, 2, fobos_eth_buf);
	      }
	  break;
 800b766:	f000 bdc8 	b.w	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	70da      	strb	r2, [r3, #3]
		fobos_eth_protocol_send(FOBOS_ETH_GET_MAC, 2, fobos_eth_buf);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	2102      	movs	r1, #2
 800b77a:	2007      	movs	r0, #7
 800b77c:	f7ff ff34 	bl	800b5e8 <fobos_eth_protocol_send>
	  break;
 800b780:	f000 bdbb 	b.w	800c2fa <eth_cmds_analysis+0xcda>

	case  FOBOS_ETH_RST:
		fobos_eth_protocol_send(FOBOS_ETH_RST, 1, fobos_eth_buf);
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	2101      	movs	r1, #1
 800b788:	2006      	movs	r0, #6
 800b78a:	f7ff ff2d 	bl	800b5e8 <fobos_eth_protocol_send>
		while(1);
 800b78e:	e7fe      	b.n	800b78e <eth_cmds_analysis+0x16e>
		break;

	case FOBOS_SENSORS_STATE:
#define SENSOR_STATE
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d165      	bne.n	800b866 <eth_cmds_analysis+0x246>
		{
			volatile FDCAN_RxHeaderTypeDef RxHeader;
			RxHeader.Identifier = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
			fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	709a      	strb	r2, [r3, #2]
			fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	70da      	strb	r2, [r3, #3]
			fobos_eth_buf->fobos_protocol_buf_t.data[2] = 0;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	711a      	strb	r2, [r3, #4]
			uint8_t sensors_state = 0, temp_lim_switches = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			uint8_t can_rx_data[8] = {0};
 800b7bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	605a      	str	r2, [r3, #4]

			fobos_eth_buf->fobos_protocol_buf_t.data[1] = terminals_statements & 0xC3;//S1,S2 ... S4,S3 в соответствии с единицами в байте.
 800b7c6:	4bc0      	ldr	r3, [pc, #768]	; (800bac8 <eth_cmds_analysis+0x4a8>)
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	70da      	strb	r2, [r3, #3]
			if(TABLE_LOCK_SENSOR_LEFT)
 800b7d6:	2110      	movs	r1, #16
 800b7d8:	48bc      	ldr	r0, [pc, #752]	; (800bacc <eth_cmds_analysis+0x4ac>)
 800b7da:	f7f6 ff43 	bl	8002664 <HAL_GPIO_ReadPin>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <eth_cmds_analysis+0x1d0>
				sensors_state |= 0x01;
 800b7e4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800b7e8:	f043 0301 	orr.w	r3, r3, #1
 800b7ec:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			if(EMERGENCY_LIMIT_SW1)
 800b7f0:	2140      	movs	r1, #64	; 0x40
 800b7f2:	48b7      	ldr	r0, [pc, #732]	; (800bad0 <eth_cmds_analysis+0x4b0>)
 800b7f4:	f7f6 ff36 	bl	8002664 <HAL_GPIO_ReadPin>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <eth_cmds_analysis+0x1ea>
				sensors_state |= 0x02;
 800b7fe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800b802:	f043 0302 	orr.w	r3, r3, #2
 800b806:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			if(EMERGENCY_LIMIT_SW2)
 800b80a:	2180      	movs	r1, #128	; 0x80
 800b80c:	48b0      	ldr	r0, [pc, #704]	; (800bad0 <eth_cmds_analysis+0x4b0>)
 800b80e:	f7f6 ff29 	bl	8002664 <HAL_GPIO_ReadPin>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <eth_cmds_analysis+0x204>
				sensors_state |= 0x04;
 800b818:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800b81c:	f043 0304 	orr.w	r3, r3, #4
 800b820:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			if(TABLE_LOCK_SENSOR_RIGHT)
 800b824:	2120      	movs	r1, #32
 800b826:	48a9      	ldr	r0, [pc, #676]	; (800bacc <eth_cmds_analysis+0x4ac>)
 800b828:	f7f6 ff1c 	bl	8002664 <HAL_GPIO_ReadPin>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d005      	beq.n	800b83e <eth_cmds_analysis+0x21e>
				sensors_state |= 0x08;
 800b832:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800b836:	f043 0308 	orr.w	r3, r3, #8
 800b83a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

			if(motor_emergency == 0x0F)
 800b83e:	4ba5      	ldr	r3, [pc, #660]	; (800bad4 <eth_cmds_analysis+0x4b4>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b0f      	cmp	r3, #15
 800b846:	d107      	bne.n	800b858 <eth_cmds_analysis+0x238>
			fobos_eth_buf->fobos_protocol_buf_t.data[2] |= 0b00000110;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	791b      	ldrb	r3, [r3, #4]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	f043 0306 	orr.w	r3, r3, #6
 800b852:	b2da      	uxtb	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	711a      	strb	r2, [r3, #4]

			fobos_eth_protocol_send(FOBOS_SENSORS_STATE, 3, fobos_eth_buf);
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	2103      	movs	r1, #3
 800b85c:	200a      	movs	r0, #10
 800b85e:	f7ff fec3 	bl	800b5e8 <fobos_eth_protocol_send>
		else{
		      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		      fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
		      fobos_eth_protocol_send(FOBOS_SENSORS_STATE, 1, fobos_eth_buf);
		    }
		break;
 800b862:	f000 bd4a 	b.w	800c2fa <eth_cmds_analysis+0xcda>
		      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2204      	movs	r2, #4
 800b86a:	709a      	strb	r2, [r3, #2]
		      fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	70da      	strb	r2, [r3, #3]
		      fobos_eth_protocol_send(FOBOS_SENSORS_STATE, 1, fobos_eth_buf);
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	2101      	movs	r1, #1
 800b876:	200a      	movs	r0, #10
 800b878:	f7ff feb6 	bl	800b5e8 <fobos_eth_protocol_send>
		break;
 800b87c:	f000 bd3d 	b.w	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_GENERATOR_STATE:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d143      	bne.n	800b912 <eth_cmds_analysis+0x2f2>
	  {
	    uint8_t can_data_buf[8];
	    FDCAN_RxHeaderTypeDef RxHeader;
	    can_tx_func(&hfdcan2, 0x620+2, 0, can_data_buf);
 800b88a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b88e:	2200      	movs	r2, #0
 800b890:	f240 6122 	movw	r1, #1570	; 0x622
 800b894:	4890      	ldr	r0, [pc, #576]	; (800bad8 <eth_cmds_analysis+0x4b8>)
 800b896:	f000 fe77 	bl	800c588 <can_tx_func>
	    uint8_t interlock_generator_state = 0, interlock_door_and_generator_state = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	709a      	strb	r2, [r3, #2]
	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	70da      	strb	r2, [r3, #3]

	    if(DIG_IN8)
 800b8b2:	2104      	movs	r1, #4
 800b8b4:	4889      	ldr	r0, [pc, #548]	; (800badc <eth_cmds_analysis+0x4bc>)
 800b8b6:	f7f6 fed5 	bl	8002664 <HAL_GPIO_ReadPin>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <eth_cmds_analysis+0x2b8>
	      interlock_door_and_generator_state = 0xFF;
 800b8c0:	23ff      	movs	r3, #255	; 0xff
 800b8c2:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5

	    while(RxHeader.Identifier != 0x722)
 800b8c6:	e007      	b.n	800b8d8 <eth_cmds_analysis+0x2b8>
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 800b8c8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800b8cc:	f107 030c 	add.w	r3, r7, #12
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4881      	ldr	r0, [pc, #516]	; (800bad8 <eth_cmds_analysis+0x4b8>)
 800b8d4:	f001 fc48 	bl	800d168 <can_protocol_data_analyzing>
	    while(RxHeader.Identifier != 0x722)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f240 7222 	movw	r2, #1826	; 0x722
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d1f2      	bne.n	800b8c8 <eth_cmds_analysis+0x2a8>
	    if(can_data_buf[1] & 0x04)
 800b8e2:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800b8e6:	f003 0304 	and.w	r3, r3, #4
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <eth_cmds_analysis+0x2d4>
	      interlock_generator_state = 0xFF;
 800b8ee:	23ff      	movs	r3, #255	; 0xff
 800b8f0:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6

	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = interlock_generator_state & interlock_door_and_generator_state;
 800b8f4:	f897 20c6 	ldrb.w	r2, [r7, #198]	; 0xc6
 800b8f8:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	70da      	strb	r2, [r3, #3]

	    fobos_eth_protocol_send(FOBOS_GENERATOR_STATE, 2, fobos_eth_buf);
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	2102      	movs	r1, #2
 800b908:	200b      	movs	r0, #11
 800b90a:	f7ff fe6d 	bl	800b5e8 <fobos_eth_protocol_send>
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
		fobos_eth_protocol_send(FOBOS_GENERATOR_STATE, 2, fobos_eth_buf);
	      }
		break;
 800b90e:	f000 bcf4 	b.w	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2204      	movs	r2, #4
 800b916:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	70da      	strb	r2, [r3, #3]
		fobos_eth_protocol_send(FOBOS_GENERATOR_STATE, 2, fobos_eth_buf);
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	2102      	movs	r1, #2
 800b922:	200b      	movs	r0, #11
 800b924:	f7ff fe60 	bl	800b5e8 <fobos_eth_protocol_send>
		break;
 800b928:	f000 bce7 	b.w	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_SERVOMOTOR_PLACEMENT:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0 /*&& motor_state_indication*/)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d143      	bne.n	800b9be <eth_cmds_analysis+0x39e>
	  {
	    canopen_u canopen_rcv = {0};
 800b936:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	605a      	str	r2, [r3, #4]
 800b940:	609a      	str	r2, [r3, #8]
	    uint8_t can_data_tx[8] = {0}, temp_lim_switches = 0;
 800b942:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b946:	2200      	movs	r2, #0
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	605a      	str	r2, [r3, #4]
 800b94c:	2300      	movs	r3, #0
 800b94e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	    fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 5;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2205      	movs	r2, #5
 800b956:	705a      	strb	r2, [r3, #1]
	    if(motor_state_indication){
 800b958:	4b61      	ldr	r3, [pc, #388]	; (800bae0 <eth_cmds_analysis+0x4c0>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d021      	beq.n	800b9a4 <eth_cmds_analysis+0x384>
	    canopen_req_resp_sdo(0x600+1, SDO_REQUEST, 0x6064, 0, can_data_tx, &canopen_rcv);
 800b960:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	2300      	movs	r3, #0
 800b96e:	f246 0264 	movw	r2, #24676	; 0x6064
 800b972:	2140      	movs	r1, #64	; 0x40
 800b974:	f240 6001 	movw	r0, #1537	; 0x601
 800b978:	f000 fddc 	bl	800c534 <canopen_req_resp_sdo>

	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	709a      	strb	r2, [r3, #2]

	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = canopen_rcv.values_t.data[3];
 800b982:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	70da      	strb	r2, [r3, #3]
	    fobos_eth_buf->fobos_protocol_buf_t.data[2] = canopen_rcv.values_t.data[2];
 800b98a:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	711a      	strb	r2, [r3, #4]
	    fobos_eth_buf->fobos_protocol_buf_t.data[3] = canopen_rcv.values_t.data[1];
 800b992:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	715a      	strb	r2, [r3, #5]
	    fobos_eth_buf->fobos_protocol_buf_t.data[4] = canopen_rcv.values_t.data[0];
 800b99a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	719a      	strb	r2, [r3, #6]
 800b9a2:	e002      	b.n	800b9aa <eth_cmds_analysis+0x38a>
	    }
	    else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = 0;//FOBOS_ETH_ERR_NR;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	709a      	strb	r2, [r3, #2]
	    /*encoder_val = (fobos_eth_buf->fobos_protocol_buf_t.data[1]<<24) | (fobos_eth_buf->fobos_protocol_buf_t.data[2]<<16)
			| (fobos_eth_buf->fobos_protocol_buf_t.data[3]<<8) | fobos_eth_buf->fobos_protocol_buf_t.data[4];

	    fobos_eth_buf->fobos_protocol_buf_t.data[5] = basing_point;*/

	    fobos_eth_protocol_send(FOBOS_SERVOMOTOR_PLACEMENT,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	200c      	movs	r0, #12
 800b9b6:	f7ff fe17 	bl	800b5e8 <fobos_eth_protocol_send>
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
		fobos_eth_protocol_send(FOBOS_SERVOMOTOR_PLACEMENT, 2, fobos_eth_buf);
	      }
		break;
 800b9ba:	f000 bc9e 	b.w	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2204      	movs	r2, #4
 800b9c2:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	70da      	strb	r2, [r3, #3]
		fobos_eth_protocol_send(FOBOS_SERVOMOTOR_PLACEMENT, 2, fobos_eth_buf);
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	2102      	movs	r1, #2
 800b9ce:	200c      	movs	r0, #12
 800b9d0:	f7ff fe0a 	bl	800b5e8 <fobos_eth_protocol_send>
		break;
 800b9d4:	f000 bc91 	b.w	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_STATEMENT:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10d      	bne.n	800b9fe <eth_cmds_analysis+0x3de>
	    {
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	709a      	strb	r2, [r3, #2]
	      fobos_eth_buf->fobos_protocol_buf_t.data[1] = motor_state_indication;			//не готово устройство
 800b9e8:	4b3d      	ldr	r3, [pc, #244]	; (800bae0 <eth_cmds_analysis+0x4c0>)
 800b9ea:	781a      	ldrb	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	70da      	strb	r2, [r3, #3]
	      fobos_eth_protocol_send(FOBOS_STATEMENT, 2, fobos_eth_buf);
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	200d      	movs	r0, #13
 800b9f6:	f7ff fdf7 	bl	800b5e8 <fobos_eth_protocol_send>
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
		fobos_eth_protocol_send(FOBOS_STATEMENT, 2, fobos_eth_buf);
	      }
		break;
 800b9fa:	f000 bc7e 	b.w	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2204      	movs	r2, #4
 800ba02:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	70da      	strb	r2, [r3, #3]
		fobos_eth_protocol_send(FOBOS_STATEMENT, 2, fobos_eth_buf);
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	2102      	movs	r1, #2
 800ba0e:	200d      	movs	r0, #13
 800ba10:	f7ff fdea 	bl	800b5e8 <fobos_eth_protocol_send>
		break;
 800ba14:	f000 bc71 	b.w	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_CMD_BASING://homing process
#define CMD_HOMING
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0 && motor_state_indication)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	785b      	ldrb	r3, [r3, #1]
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d172      	bne.n	800bb08 <eth_cmds_analysis+0x4e8>
 800ba22:	4b2f      	ldr	r3, [pc, #188]	; (800bae0 <eth_cmds_analysis+0x4c0>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d06e      	beq.n	800bb08 <eth_cmds_analysis+0x4e8>
	  {
	    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    //запрос к линейному приводу о положении
	      vTaskDelay(50);
 800ba2a:	2032      	movs	r0, #50	; 0x32
 800ba2c:	f7fd fa8a 	bl	8008f44 <vTaskDelay>
	      uint8_t can_data_buf[8] = {0x10,0};
 800ba30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ba34:	2200      	movs	r2, #0
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	605a      	str	r2, [r3, #4]
 800ba3a:	2310      	movs	r3, #16
 800ba3c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	      can_tx_func(&hfdcan2, 0x620+2, 2, can_data_buf);
 800ba40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ba44:	2202      	movs	r2, #2
 800ba46:	f240 6122 	movw	r1, #1570	; 0x622
 800ba4a:	4823      	ldr	r0, [pc, #140]	; (800bad8 <eth_cmds_analysis+0x4b8>)
 800ba4c:	f000 fd9c 	bl	800c588 <can_tx_func>
	      vTaskDelay(100);
 800ba50:	2064      	movs	r0, #100	; 0x64
 800ba52:	f7fd fa77 	bl	8008f44 <vTaskDelay>
	      if(basing_point == 0)
 800ba56:	4b23      	ldr	r3, [pc, #140]	; (800bae4 <eth_cmds_analysis+0x4c4>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d119      	bne.n	800ba92 <eth_cmds_analysis+0x472>
	      {
	      if(xHoming == NULL)
 800ba5e:	4b22      	ldr	r3, [pc, #136]	; (800bae8 <eth_cmds_analysis+0x4c8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10c      	bne.n	800ba80 <eth_cmds_analysis+0x460>
	    xHoming = xTaskCreate(homing_process, "homing", 128, (void*)0, tskIDLE_PRIORITY, &xHoming_Handle);
 800ba66:	4b21      	ldr	r3, [pc, #132]	; (800baec <eth_cmds_analysis+0x4cc>)
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	2280      	movs	r2, #128	; 0x80
 800ba72:	491f      	ldr	r1, [pc, #124]	; (800baf0 <eth_cmds_analysis+0x4d0>)
 800ba74:	481f      	ldr	r0, [pc, #124]	; (800baf4 <eth_cmds_analysis+0x4d4>)
 800ba76:	f7fd f8a9 	bl	8008bcc <xTaskCreate>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	4b1a      	ldr	r3, [pc, #104]	; (800bae8 <eth_cmds_analysis+0x4c8>)
 800ba7e:	601a      	str	r2, [r3, #0]
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	709a      	strb	r2, [r3, #2]
	      fobos_eth_protocol_send(FOBOS_CMD_BASING, 1, fobos_eth_buf);
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	2101      	movs	r1, #1
 800ba8a:	2014      	movs	r0, #20
 800ba8c:	f7ff fdac 	bl	800b5e8 <fobos_eth_protocol_send>
	  {
 800ba90:	e043      	b.n	800bb1a <eth_cmds_analysis+0x4fa>
	  }
	      else{
		  if(xPosition_func == NULL)
 800ba92:	4b19      	ldr	r3, [pc, #100]	; (800baf8 <eth_cmds_analysis+0x4d8>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10c      	bne.n	800bab4 <eth_cmds_analysis+0x494>
      xPosition_func = xTaskCreate(position_mode_process_right, "MotorRIGHT", 128,(void*)0, 0, &xPosition_Handle);
 800ba9a:	4b18      	ldr	r3, [pc, #96]	; (800bafc <eth_cmds_analysis+0x4dc>)
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	2300      	movs	r3, #0
 800baa4:	2280      	movs	r2, #128	; 0x80
 800baa6:	4916      	ldr	r1, [pc, #88]	; (800bb00 <eth_cmds_analysis+0x4e0>)
 800baa8:	4816      	ldr	r0, [pc, #88]	; (800bb04 <eth_cmds_analysis+0x4e4>)
 800baaa:	f7fd f88f 	bl	8008bcc <xTaskCreate>
 800baae:	4602      	mov	r2, r0
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <eth_cmds_analysis+0x4d8>)
 800bab2:	601a      	str	r2, [r3, #0]
		  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	709a      	strb	r2, [r3, #2]
		  fobos_eth_protocol_send(FOBOS_CMD_BASING, 1, fobos_eth_buf);
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	2101      	movs	r1, #1
 800babe:	2014      	movs	r0, #20
 800bac0:	f7ff fd92 	bl	800b5e8 <fobos_eth_protocol_send>
	  {
 800bac4:	e029      	b.n	800bb1a <eth_cmds_analysis+0x4fa>
 800bac6:	bf00      	nop
 800bac8:	20003e65 	.word	0x20003e65
 800bacc:	58020800 	.word	0x58020800
 800bad0:	58020000 	.word	0x58020000
 800bad4:	20003e64 	.word	0x20003e64
 800bad8:	20004090 	.word	0x20004090
 800badc:	58020400 	.word	0x58020400
 800bae0:	20003e4b 	.word	0x20003e4b
 800bae4:	20003e67 	.word	0x20003e67
 800bae8:	20003e54 	.word	0x20003e54
 800baec:	20003e5c 	.word	0x20003e5c
 800baf0:	0800e184 	.word	0x0800e184
 800baf4:	0800ce5d 	.word	0x0800ce5d
 800baf8:	20003e58 	.word	0x20003e58
 800bafc:	20003e60 	.word	0x20003e60
 800bb00:	0800e18c 	.word	0x0800e18c
 800bb04:	0800c915 	.word	0x0800c915
	      }
	  }
	  else{
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	709a      	strb	r2, [r3, #2]
	      fobos_eth_protocol_send(FOBOS_CMD_BASING, 1, fobos_eth_buf);
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	2101      	movs	r1, #1
 800bb12:	2014      	movs	r0, #20
 800bb14:	f7ff fd68 	bl	800b5e8 <fobos_eth_protocol_send>
	  }

		break;
 800bb18:	e3ef      	b.n	800c2fa <eth_cmds_analysis+0xcda>
 800bb1a:	e3ee      	b.n	800c2fa <eth_cmds_analysis+0xcda>

	case FOBOS_CMD_WORK://21 rotation
	#define CMD_WORK
		  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 1)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d156      	bne.n	800bbd4 <eth_cmds_analysis+0x5b4>
		  {
		    uint8_t temp_lim_switches = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
		    FDCAN_RxHeaderTypeDef RxHeader;
		    if(fobos_eth_buf->fobos_protocol_buf_t.data[0] && fobos_eth_buf->fobos_protocol_buf_t.data[0] <= 2)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	789b      	ldrb	r3, [r3, #2]
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d045      	beq.n	800bbc2 <eth_cmds_analysis+0x5a2>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	789b      	ldrb	r3, [r3, #2]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d840      	bhi.n	800bbc2 <eth_cmds_analysis+0x5a2>
		      {
			vTaskDelay(100);
 800bb40:	2064      	movs	r0, #100	; 0x64
 800bb42:	f7fd f9ff 	bl	8008f44 <vTaskDelay>
			if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	789b      	ldrb	r3, [r3, #2]
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d119      	bne.n	800bb84 <eth_cmds_analysis+0x564>
			{
			    uint8_t data[2] = {0x10,0};
 800bb50:	2310      	movs	r3, #16
 800bb52:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800bb56:	2300      	movs	r3, #0
 800bb58:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			    can_tx_func(&hfdcan2, 0x620+2,2,data);
 800bb5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800bb60:	2202      	movs	r2, #2
 800bb62:	f240 6122 	movw	r1, #1570	; 0x622
 800bb66:	48b1      	ldr	r0, [pc, #708]	; (800be2c <eth_cmds_analysis+0x80c>)
 800bb68:	f000 fd0e 	bl	800c588 <can_tx_func>
			    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	709a      	strb	r2, [r3, #2]
		fobos_eth_protocol_send(FOBOS_CMD_WORK, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	785b      	ldrb	r3, [r3, #1]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	2015      	movs	r0, #21
 800bb7e:	f7ff fd33 	bl	800b5e8 <fobos_eth_protocol_send>
			if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1)
 800bb82:	e030      	b.n	800bbe6 <eth_cmds_analysis+0x5c6>
			}
			else if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 2)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	789b      	ldrb	r3, [r3, #2]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d12b      	bne.n	800bbe6 <eth_cmds_analysis+0x5c6>
			  {
			    uint8_t data[2] = {0x20,0};
 800bb8e:	2320      	movs	r3, #32
 800bb90:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 800bb94:	2300      	movs	r3, #0
 800bb96:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			    can_tx_func(&hfdcan2, 0x620+2,2,data);
 800bb9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bb9e:	2202      	movs	r2, #2
 800bba0:	f240 6122 	movw	r1, #1570	; 0x622
 800bba4:	48a1      	ldr	r0, [pc, #644]	; (800be2c <eth_cmds_analysis+0x80c>)
 800bba6:	f000 fcef 	bl	800c588 <can_tx_func>
			    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	709a      	strb	r2, [r3, #2]
			    fobos_eth_protocol_send(FOBOS_CMD_WORK, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	785b      	ldrb	r3, [r3, #1]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	2015      	movs	r0, #21
 800bbbc:	f7ff fd14 	bl	800b5e8 <fobos_eth_protocol_send>
			if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1)
 800bbc0:	e011      	b.n	800bbe6 <eth_cmds_analysis+0x5c6>
			  }
		    }
		    else{
		      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2204      	movs	r2, #4
 800bbc6:	709a      	strb	r2, [r3, #2]
		      fobos_eth_protocol_send(FOBOS_CMD_WORK, 1, fobos_eth_buf);
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	2101      	movs	r1, #1
 800bbcc:	2015      	movs	r0, #21
 800bbce:	f7ff fd0b 	bl	800b5e8 <fobos_eth_protocol_send>
		  }
		  else{
			  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
			  fobos_eth_protocol_send(FOBOS_CMD_WORK, 1, fobos_eth_buf);
		      }
			break;
 800bbd2:	e392      	b.n	800c2fa <eth_cmds_analysis+0xcda>
			  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2204      	movs	r2, #4
 800bbd8:	709a      	strb	r2, [r3, #2]
			  fobos_eth_protocol_send(FOBOS_CMD_WORK, 1, fobos_eth_buf);
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	2101      	movs	r1, #1
 800bbde:	2015      	movs	r0, #21
 800bbe0:	f7ff fd02 	bl	800b5e8 <fobos_eth_protocol_send>
			break;
 800bbe4:	e389      	b.n	800c2fa <eth_cmds_analysis+0xcda>
			if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1)
 800bbe6:	bf00      	nop
			break;
 800bbe8:	e387      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_CMD_LAMP://22 cmd
		  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 1){
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d115      	bne.n	800bc20 <eth_cmds_analysis+0x600>
		    if(fobos_eth_buf->fobos_protocol_buf_t.data[0])
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	789b      	ldrb	r3, [r3, #2]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d006      	beq.n	800bc0c <eth_cmds_analysis+0x5ec>
		      {
			XRAY_GEN_START(SET);
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc04:	488a      	ldr	r0, [pc, #552]	; (800be30 <eth_cmds_analysis+0x810>)
 800bc06:	f7f6 fd45 	bl	8002694 <HAL_GPIO_WritePin>
 800bc0a:	e005      	b.n	800bc18 <eth_cmds_analysis+0x5f8>
		      }
		    else
		      {
			XRAY_GEN_START(RESET);
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc12:	4887      	ldr	r0, [pc, #540]	; (800be30 <eth_cmds_analysis+0x810>)
 800bc14:	f7f6 fd3e 	bl	8002694 <HAL_GPIO_WritePin>
		      }

		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	709a      	strb	r2, [r3, #2]
 800bc1e:	e002      	b.n	800bc26 <eth_cmds_analysis+0x606>

		  }
		  else{
		      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2204      	movs	r2, #4
 800bc24:	709a      	strb	r2, [r3, #2]
		  }
		  fobos_eth_protocol_send(FOBOS_CMD_LAMP, 1, fobos_eth_buf);
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	2101      	movs	r1, #1
 800bc2a:	2016      	movs	r0, #22
 800bc2c:	f7ff fcdc 	bl	800b5e8 <fobos_eth_protocol_send>
		  break;
 800bc30:	e363      	b.n	800c2fa <eth_cmds_analysis+0xcda>

	case FOBOS_CMD_BASING_STATEMENT://23
#define CMD_BASING_STATEMENT
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	785b      	ldrb	r3, [r3, #1]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d168      	bne.n	800bd0e <eth_cmds_analysis+0x6ee>
	  {
	      if(motor_state_indication)
 800bc3c:	4b7d      	ldr	r3, [pc, #500]	; (800be34 <eth_cmds_analysis+0x814>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d05d      	beq.n	800bd00 <eth_cmds_analysis+0x6e0>
		{
		    uint8_t can_data_tx[4] = {6,0,0,0};//can_data_tx[0] младший байт
 800bc44:	2306      	movs	r3, #6
 800bc46:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800bc50:	2300      	movs	r3, #0
 800bc52:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bc56:	2300      	movs	r3, #0
 800bc58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		    canopen_u canopen_rcv;
		    if(basing_point){
 800bc5c:	4b76      	ldr	r3, [pc, #472]	; (800be38 <eth_cmds_analysis+0x818>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <eth_cmds_analysis+0x654>
			fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	709a      	strb	r2, [r3, #2]
			fobos_eth_buf->fobos_protocol_buf_t.data[1] = basing_point;
 800bc6a:	4b73      	ldr	r3, [pc, #460]	; (800be38 <eth_cmds_analysis+0x818>)
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	70da      	strb	r2, [r3, #3]
 800bc72:	e052      	b.n	800bd1a <eth_cmds_analysis+0x6fa>
		    }
		    else
		    {
		      canopen_req_resp_sdo(0x600+1, 0x40,0x6061,0,can_data_tx, &canopen_rcv);
 800bc74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	2300      	movs	r3, #0
 800bc82:	f246 0261 	movw	r2, #24673	; 0x6061
 800bc86:	2140      	movs	r1, #64	; 0x40
 800bc88:	f240 6001 	movw	r0, #1537	; 0x601
 800bc8c:	f000 fc52 	bl	800c534 <canopen_req_resp_sdo>
		      if(canopen_rcv.values_t.data[0] == 6)
 800bc90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bc94:	2b06      	cmp	r3, #6
 800bc96:	d12b      	bne.n	800bcf0 <eth_cmds_analysis+0x6d0>
		      {
			  canopen_req_resp_sdo(0x600+1, 0x40,0x6041,0,can_data_tx, &canopen_rcv);
 800bc98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	2300      	movs	r3, #0
 800bca6:	f246 0241 	movw	r2, #24641	; 0x6041
 800bcaa:	2140      	movs	r1, #64	; 0x40
 800bcac:	f240 6001 	movw	r0, #1537	; 0x601
 800bcb0:	f000 fc40 	bl	800c534 <canopen_req_resp_sdo>
			  if((canopen_rcv.values_t.data[1]&0x16) == 0x16 && (canopen_rcv.values_t.data[0]&0xB7) == 0xB7)
 800bcb4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800bcb8:	f003 0316 	and.w	r3, r3, #22
 800bcbc:	2b16      	cmp	r3, #22
 800bcbe:	d110      	bne.n	800bce2 <eth_cmds_analysis+0x6c2>
 800bcc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bcc4:	f003 03b7 	and.w	r3, r3, #183	; 0xb7
 800bcc8:	2bb7      	cmp	r3, #183	; 0xb7
 800bcca:	d10a      	bne.n	800bce2 <eth_cmds_analysis+0x6c2>
			  {
			      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	709a      	strb	r2, [r3, #2]
			      basing_point = 0xFF;
 800bcd2:	4b59      	ldr	r3, [pc, #356]	; (800be38 <eth_cmds_analysis+0x818>)
 800bcd4:	22ff      	movs	r2, #255	; 0xff
 800bcd6:	701a      	strb	r2, [r3, #0]
			      fobos_eth_buf->fobos_protocol_buf_t.data[1] = basing_point;
 800bcd8:	4b57      	ldr	r3, [pc, #348]	; (800be38 <eth_cmds_analysis+0x818>)
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	70da      	strb	r2, [r3, #3]
 800bce0:	e01b      	b.n	800bd1a <eth_cmds_analysis+0x6fa>
			  }
			  else{
			      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	709a      	strb	r2, [r3, #2]
			      fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	70da      	strb	r2, [r3, #3]
 800bcee:	e014      	b.n	800bd1a <eth_cmds_analysis+0x6fa>
			  }
		      }
		      else
		      {
			fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	709a      	strb	r2, [r3, #2]
			fobos_eth_buf->fobos_protocol_buf_t.data[1] = basing_point;
 800bcf6:	4b50      	ldr	r3, [pc, #320]	; (800be38 <eth_cmds_analysis+0x818>)
 800bcf8:	781a      	ldrb	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	70da      	strb	r2, [r3, #3]
 800bcfe:	e00c      	b.n	800bd1a <eth_cmds_analysis+0x6fa>
		      }
		    }//else from if(basing_point)
	      }
	      else{
		  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	709a      	strb	r2, [r3, #2]
		  fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	70da      	strb	r2, [r3, #3]
 800bd0c:	e005      	b.n	800bd1a <eth_cmds_analysis+0x6fa>
	      }
	  }
	  else{
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2204      	movs	r2, #4
 800bd12:	709a      	strb	r2, [r3, #2]
	      fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	70da      	strb	r2, [r3, #3]
	  }
	  fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 2;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	705a      	strb	r2, [r3, #1]
	  fobos_eth_protocol_send(FOBOS_CMD_BASING_STATEMENT, 2, fobos_eth_buf);
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	2102      	movs	r1, #2
 800bd24:	2017      	movs	r0, #23
 800bd26:	f7ff fc5f 	bl	800b5e8 <fobos_eth_protocol_send>
	break;
 800bd2a:	e2e6      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_CMD_START://24, линейное перемещение мотора
#define CMD_START
	  /*if(xHoming == NULL)
	    xHoming = xTaskCreate(homing_process, "homing", 128, (void*)0, tskIDLE_PRIORITY, &xHoming_Handle);*/
	  {
	    if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 1 && motor_state_indication)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	785b      	ldrb	r3, [r3, #1]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d155      	bne.n	800bde2 <eth_cmds_analysis+0x7c2>
 800bd36:	4b3f      	ldr	r3, [pc, #252]	; (800be34 <eth_cmds_analysis+0x814>)
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d051      	beq.n	800bde2 <eth_cmds_analysis+0x7c2>
	      {
		if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1){
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	789b      	ldrb	r3, [r3, #2]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d114      	bne.n	800bd72 <eth_cmds_analysis+0x752>
		    if(xPosition_func == NULL)
 800bd48:	4b3c      	ldr	r3, [pc, #240]	; (800be3c <eth_cmds_analysis+0x81c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10c      	bne.n	800bd6a <eth_cmds_analysis+0x74a>
		      xPosition_func = xTaskCreate(position_mode_process_calibration, "CALIBRATION", 128,(void*)0, 0, &xPosition_Handle);
 800bd50:	4b3b      	ldr	r3, [pc, #236]	; (800be40 <eth_cmds_analysis+0x820>)
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2280      	movs	r2, #128	; 0x80
 800bd5c:	4939      	ldr	r1, [pc, #228]	; (800be44 <eth_cmds_analysis+0x824>)
 800bd5e:	483a      	ldr	r0, [pc, #232]	; (800be48 <eth_cmds_analysis+0x828>)
 800bd60:	f7fc ff34 	bl	8008bcc <xTaskCreate>
 800bd64:	4602      	mov	r2, r0
 800bd66:	4b35      	ldr	r3, [pc, #212]	; (800be3c <eth_cmds_analysis+0x81c>)
 800bd68:	601a      	str	r2, [r3, #0]
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	709a      	strb	r2, [r3, #2]
		if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1){
 800bd70:	e03a      	b.n	800bde8 <eth_cmds_analysis+0x7c8>
		}
	    else if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 2)//left position
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	789b      	ldrb	r3, [r3, #2]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d114      	bne.n	800bda6 <eth_cmds_analysis+0x786>
		  {
		    //position_mode_process_left();
		    if(xPosition_func == NULL)
 800bd7c:	4b2f      	ldr	r3, [pc, #188]	; (800be3c <eth_cmds_analysis+0x81c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10c      	bne.n	800bd9e <eth_cmds_analysis+0x77e>
		    xPosition_func = xTaskCreate(position_mode_process_left, "MotorLEFT", 128,(void*)0, 0, &xPosition_Handle);
 800bd84:	4b2e      	ldr	r3, [pc, #184]	; (800be40 <eth_cmds_analysis+0x820>)
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	2280      	movs	r2, #128	; 0x80
 800bd90:	492e      	ldr	r1, [pc, #184]	; (800be4c <eth_cmds_analysis+0x82c>)
 800bd92:	482f      	ldr	r0, [pc, #188]	; (800be50 <eth_cmds_analysis+0x830>)
 800bd94:	f7fc ff1a 	bl	8008bcc <xTaskCreate>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	4b28      	ldr	r3, [pc, #160]	; (800be3c <eth_cmds_analysis+0x81c>)
 800bd9c:	601a      	str	r2, [r3, #0]
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	709a      	strb	r2, [r3, #2]
		if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1){
 800bda4:	e020      	b.n	800bde8 <eth_cmds_analysis+0x7c8>
		  }
		else if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 3)//right position
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	789b      	ldrb	r3, [r3, #2]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	d114      	bne.n	800bdda <eth_cmds_analysis+0x7ba>
		  {
		    if(xPosition_func == NULL)
 800bdb0:	4b22      	ldr	r3, [pc, #136]	; (800be3c <eth_cmds_analysis+0x81c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10c      	bne.n	800bdd2 <eth_cmds_analysis+0x7b2>
		    xPosition_func = xTaskCreate(position_mode_process_right, "MotorRIGHT", 128,(void*)0, 0, &xPosition_Handle);
 800bdb8:	4b21      	ldr	r3, [pc, #132]	; (800be40 <eth_cmds_analysis+0x820>)
 800bdba:	9301      	str	r3, [sp, #4]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	2280      	movs	r2, #128	; 0x80
 800bdc4:	4923      	ldr	r1, [pc, #140]	; (800be54 <eth_cmds_analysis+0x834>)
 800bdc6:	4824      	ldr	r0, [pc, #144]	; (800be58 <eth_cmds_analysis+0x838>)
 800bdc8:	f7fc ff00 	bl	8008bcc <xTaskCreate>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <eth_cmds_analysis+0x81c>)
 800bdd0:	601a      	str	r2, [r3, #0]
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	709a      	strb	r2, [r3, #2]
		if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1){
 800bdd8:	e006      	b.n	800bde8 <eth_cmds_analysis+0x7c8>
		  }
		else
		  {
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NR;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2205      	movs	r2, #5
 800bdde:	709a      	strb	r2, [r3, #2]
		if(fobos_eth_buf->fobos_protocol_buf_t.data[0] == 1){
 800bde0:	e002      	b.n	800bde8 <eth_cmds_analysis+0x7c8>
		  }
	      }
	    else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2204      	movs	r2, #4
 800bde6:	709a      	strb	r2, [r3, #2]
	    }
	    fobos_eth_protocol_send(FOBOS_CMD_START, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	2018      	movs	r0, #24
 800bdf4:	f7ff fbf8 	bl	800b5e8 <fobos_eth_protocol_send>
	  }
	  break;
 800bdf8:	e27f      	b.n	800c2fa <eth_cmds_analysis+0xcda>

	case FOBOS_CMD_START_STATUS: //25 cmd
#define CMD_START_STATUS
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d15a      	bne.n	800beba <eth_cmds_analysis+0x89a>
	  {
	      fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 2;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	705a      	strb	r2, [r3, #1]
	      uint8_t can_data_tx[8] = {0};//can_data_tx[0] младший байт
 800be0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	605a      	str	r2, [r3, #4]
	         canopen_u canopen_rcv;

	         if(basing_point == 0 /*&& motor_state_indication == 0*/){
 800be14:	4b08      	ldr	r3, [pc, #32]	; (800be38 <eth_cmds_analysis+0x818>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d11f      	bne.n	800be5c <eth_cmds_analysis+0x83c>
	             fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	709a      	strb	r2, [r3, #2]
	             fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;//контроль достижения заданной точки
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	70da      	strb	r2, [r3, #3]
 800be28:	e04a      	b.n	800bec0 <eth_cmds_analysis+0x8a0>
 800be2a:	bf00      	nop
 800be2c:	20004090 	.word	0x20004090
 800be30:	58021000 	.word	0x58021000
 800be34:	20003e4b 	.word	0x20003e4b
 800be38:	20003e67 	.word	0x20003e67
 800be3c:	20003e58 	.word	0x20003e58
 800be40:	20003e60 	.word	0x20003e60
 800be44:	0800e198 	.word	0x0800e198
 800be48:	0800c671 	.word	0x0800c671
 800be4c:	0800e1a4 	.word	0x0800e1a4
 800be50:	0800cbb9 	.word	0x0800cbb9
 800be54:	0800e18c 	.word	0x0800e18c
 800be58:	0800c915 	.word	0x0800c915
	         }
	         else {
	             canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6061,0,can_data_tx, &canopen_rcv);//mode request: 1 - profile position mode
 800be5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800be60:	9301      	str	r3, [sp, #4]
 800be62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	2300      	movs	r3, #0
 800be6a:	f246 0261 	movw	r2, #24673	; 0x6061
 800be6e:	2140      	movs	r1, #64	; 0x40
 800be70:	f240 6001 	movw	r0, #1537	; 0x601
 800be74:	f000 fb5e 	bl	800c534 <canopen_req_resp_sdo>
	         if(canopen_rcv.values_t.data[0] != 0x01){
 800be78:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d003      	beq.n	800be88 <eth_cmds_analysis+0x868>
	        	fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	709a      	strb	r2, [r3, #2]
 800be86:	e01b      	b.n	800bec0 <eth_cmds_analysis+0x8a0>
	            }
	            else{
	        	canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800be88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	2300      	movs	r3, #0
 800be96:	f246 0241 	movw	r2, #24641	; 0x6041
 800be9a:	2140      	movs	r1, #64	; 0x40
 800be9c:	f240 6001 	movw	r0, #1537	; 0x601
 800bea0:	f000 fb48 	bl	800c534 <canopen_req_resp_sdo>
	        	fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;//контроль достижения заданной точки
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	70da      	strb	r2, [r3, #3]
	        	if(canopen_rcv.values_t.data[1] == 0x16)
 800beaa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800beae:	2b16      	cmp	r3, #22
 800beb0:	d106      	bne.n	800bec0 <eth_cmds_analysis+0x8a0>
	        	fobos_eth_buf->fobos_protocol_buf_t.data[1] = 1;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	70da      	strb	r2, [r3, #3]
 800beb8:	e002      	b.n	800bec0 <eth_cmds_analysis+0x8a0>
	            }
	         }
	  }
	  else
	    {
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2204      	movs	r2, #4
 800bebe:	709a      	strb	r2, [r3, #2]
	    }

	  fobos_eth_protocol_send(FOBOS_CMD_START_STATUS, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	785b      	ldrb	r3, [r3, #1]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	4619      	mov	r1, r3
 800beca:	2019      	movs	r0, #25
 800becc:	f7ff fb8c 	bl	800b5e8 <fobos_eth_protocol_send>
	  break;
 800bed0:	e213      	b.n	800c2fa <eth_cmds_analysis+0xcda>

	case FOBOS_CMD_STOP://30 cmd
	  {
	    uint8_t can_data_tx[4] = {0x06,0,0,0};//can_data_tx[0] младший байт
 800bed2:	2306      	movs	r3, #6
 800bed4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800bed8:	2300      	movs	r3, #0
 800beda:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800bede:	2300      	movs	r3, #0
 800bee0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800bee4:	2300      	movs	r3, #0
 800bee6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	    canopen_u canopen_rcv;
	    canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ,0x6040,0,can_data_tx, &canopen_rcv);
 800beea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	2300      	movs	r3, #0
 800bef8:	f246 0240 	movw	r2, #24640	; 0x6040
 800befc:	212b      	movs	r1, #43	; 0x2b
 800befe:	f240 6001 	movw	r0, #1537	; 0x601
 800bf02:	f000 fb17 	bl	800c534 <canopen_req_resp_sdo>
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	709a      	strb	r2, [r3, #2]
	    fobos_eth_protocol_send(FOBOS_CMD_STOP, 1, fobos_eth_buf);
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	2101      	movs	r1, #1
 800bf10:	201e      	movs	r0, #30
 800bf12:	f7ff fb69 	bl	800b5e8 <fobos_eth_protocol_send>
	  }
		break;
 800bf16:	e1f0      	b.n	800c2fa <eth_cmds_analysis+0xcda>

	case FOBOS_EMB_SOFT_VER:
	{
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0){
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	785b      	ldrb	r3, [r3, #1]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d136      	bne.n	800bf90 <eth_cmds_analysis+0x970>
		char string_data[] = {"Fobos embedded software version 15"};
 800bf22:	4bb6      	ldr	r3, [pc, #728]	; (800c1fc <eth_cmds_analysis+0xbdc>)
 800bf24:	f107 040c 	add.w	r4, r7, #12
 800bf28:	461d      	mov	r5, r3
 800bf2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	461a      	mov	r2, r3
 800bf36:	8022      	strh	r2, [r4, #0]
 800bf38:	3402      	adds	r4, #2
 800bf3a:	0c1b      	lsrs	r3, r3, #16
 800bf3c:	7023      	strb	r3, [r4, #0]
		int length = strlen(string_data)+1;
 800bf3e:	f107 030c 	add.w	r3, r7, #12
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7f4 f9cc 	bl	80002e0 <strlen>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		fobos_eth_buf->fobos_protocol_buf_t.CMD = FOBOS_EMB_SOFT_VER;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	220e      	movs	r2, #14
 800bf54:	701a      	strb	r2, [r3, #0]
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	709a      	strb	r2, [r3, #2]
		memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, string_data, length);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3302      	adds	r3, #2
 800bf60:	3301      	adds	r3, #1
 800bf62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bf66:	f107 010c 	add.w	r1, r7, #12
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f002 f8d0 	bl	800e110 <memcpy>
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = length;
 800bf70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	705a      	strb	r2, [r3, #1]
		send(SOCKET0,fobos_eth_buf->data_to_transmit,length+2);
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	3302      	adds	r3, #2
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	461a      	mov	r2, r3
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f7fe fb57 	bl	800a63c <send>
	  else{
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
	      fobos_eth_protocol_send(FOBOS_EMB_SOFT_VER, 1, fobos_eth_buf);
	  }
	}
		break;
 800bf8e:	e1b4      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2204      	movs	r2, #4
 800bf94:	709a      	strb	r2, [r3, #2]
	      fobos_eth_protocol_send(FOBOS_EMB_SOFT_VER, 1, fobos_eth_buf);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	2101      	movs	r1, #1
 800bf9a:	200e      	movs	r0, #14
 800bf9c:	f7ff fb24 	bl	800b5e8 <fobos_eth_protocol_send>
		break;
 800bfa0:	e1ab      	b.n	800c2fa <eth_cmds_analysis+0xcda>


		//Команды на изменение сетевых параметров устройства
	case FOBOS_ETH_CHANGE_IP:

		if(confirmation(fobos_eth_buf, ip_source_adr))
 800bfa2:	4997      	ldr	r1, [pc, #604]	; (800c200 <eth_cmds_analysis+0xbe0>)
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f9d7 	bl	800c358 <confirmation>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 819d 	beq.w	800c2ec <eth_cmds_analysis+0xccc>
			setSIPR(ip_source_adr);
 800bfb2:	2204      	movs	r2, #4
 800bfb4:	4992      	ldr	r1, [pc, #584]	; (800c200 <eth_cmds_analysis+0xbe0>)
 800bfb6:	200f      	movs	r0, #15
 800bfb8:	f7fe fe3e 	bl	800ac38 <WIZCHIP_WRITE_BUF>
		break;
 800bfbc:	e196      	b.n	800c2ec <eth_cmds_analysis+0xccc>
	case FOBOS_ETH_CHANGE_MASK:
		if(confirmation(fobos_eth_buf, subnet_mask_adr))
 800bfbe:	4991      	ldr	r1, [pc, #580]	; (800c204 <eth_cmds_analysis+0xbe4>)
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f9c9 	bl	800c358 <confirmation>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 8191 	beq.w	800c2f0 <eth_cmds_analysis+0xcd0>
			setSUBR(subnet_mask_adr);
 800bfce:	2204      	movs	r2, #4
 800bfd0:	498c      	ldr	r1, [pc, #560]	; (800c204 <eth_cmds_analysis+0xbe4>)
 800bfd2:	2005      	movs	r0, #5
 800bfd4:	f7fe fe30 	bl	800ac38 <WIZCHIP_WRITE_BUF>
		break;
 800bfd8:	e18a      	b.n	800c2f0 <eth_cmds_analysis+0xcd0>
	case FOBOS_ETH_CHANGE_PORT:
	      socket_port = (fobos_eth_buf->fobos_protocol_buf_t.data[1]<<8)|fobos_eth_buf->fobos_protocol_buf_t.data[2];
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	78db      	ldrb	r3, [r3, #3]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	021b      	lsls	r3, r3, #8
 800bfe2:	b21a      	sxth	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	791b      	ldrb	r3, [r3, #4]
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	b21b      	sxth	r3, r3
 800bfec:	4313      	orrs	r3, r2
 800bfee:	b21b      	sxth	r3, r3
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	4b85      	ldr	r3, [pc, #532]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800bff4:	801a      	strh	r2, [r3, #0]
		if(socket_port){
 800bff6:	4b84      	ldr	r3, [pc, #528]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d01a      	beq.n	800c034 <eth_cmds_analysis+0xa14>
		if(confirmation(fobos_eth_buf, &socket_port))
 800bffe:	4982      	ldr	r1, [pc, #520]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f9a9 	bl	800c358 <confirmation>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 8173 	beq.w	800c2f4 <eth_cmds_analysis+0xcd4>
		  setSn_PORT(SOCKET0, socket_port);
 800c00e:	4b7e      	ldr	r3, [pc, #504]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	0a1b      	lsrs	r3, r3, #8
 800c014:	b29b      	uxth	r3, r3
 800c016:	b2db      	uxtb	r3, r3
 800c018:	4619      	mov	r1, r3
 800c01a:	f244 0004 	movw	r0, #16388	; 0x4004
 800c01e:	f7fe fda7 	bl	800ab70 <WIZCHIP_WRITE>
 800c022:	4b79      	ldr	r3, [pc, #484]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	4619      	mov	r1, r3
 800c02a:	f244 0005 	movw	r0, #16389	; 0x4005
 800c02e:	f7fe fd9f 	bl	800ab70 <WIZCHIP_WRITE>
		  {
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		    fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
		    confirmation(fobos_eth_buf, &socket_port);
		}
		break;
 800c032:	e15f      	b.n	800c2f4 <eth_cmds_analysis+0xcd4>
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2204      	movs	r2, #4
 800c038:	709a      	strb	r2, [r3, #2]
		    fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	705a      	strb	r2, [r3, #1]
		    confirmation(fobos_eth_buf, &socket_port);
 800c040:	4971      	ldr	r1, [pc, #452]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f988 	bl	800c358 <confirmation>
		break;
 800c048:	e154      	b.n	800c2f4 <eth_cmds_analysis+0xcd4>
	case FOBOS_CHANGE_TIMEOUT:
	  timeout_period = (fobos_eth_buf->fobos_protocol_buf_t.data[1]<<8)|fobos_eth_buf->fobos_protocol_buf_t.data[2];
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	78db      	ldrb	r3, [r3, #3]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	021b      	lsls	r3, r3, #8
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	7912      	ldrb	r2, [r2, #4]
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	4313      	orrs	r3, r2
 800c05a:	461a      	mov	r2, r3
 800c05c:	4b6b      	ldr	r3, [pc, #428]	; (800c20c <eth_cmds_analysis+0xbec>)
 800c05e:	601a      	str	r2, [r3, #0]
	  timeout_period *= 10;
 800c060:	4b6a      	ldr	r3, [pc, #424]	; (800c20c <eth_cmds_analysis+0xbec>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	461a      	mov	r2, r3
 800c06e:	4b67      	ldr	r3, [pc, #412]	; (800c20c <eth_cmds_analysis+0xbec>)
 800c070:	601a      	str	r2, [r3, #0]
	  if(timeout_period > 800){
 800c072:	4b66      	ldr	r3, [pc, #408]	; (800c20c <eth_cmds_analysis+0xbec>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c07a:	d917      	bls.n	800c0ac <eth_cmds_analysis+0xa8c>
		if(confirmation(fobos_eth_buf, (void*)0))
 800c07c:	2100      	movs	r1, #0
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f96a 	bl	800c358 <confirmation>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 8136 	beq.w	800c2f8 <eth_cmds_analysis+0xcd8>
			setRTR(timeout_period);
 800c08c:	4b5f      	ldr	r3, [pc, #380]	; (800c20c <eth_cmds_analysis+0xbec>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	0a1b      	lsrs	r3, r3, #8
 800c092:	b2db      	uxtb	r3, r3
 800c094:	4619      	mov	r1, r3
 800c096:	2017      	movs	r0, #23
 800c098:	f7fe fd6a 	bl	800ab70 <WIZCHIP_WRITE>
 800c09c:	4b5b      	ldr	r3, [pc, #364]	; (800c20c <eth_cmds_analysis+0xbec>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	2018      	movs	r0, #24
 800c0a6:	f7fe fd63 	bl	800ab70 <WIZCHIP_WRITE>
	  else {
	      fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 0;
	      confirmation(fobos_eth_buf, (void*)0);
	  }

		break;
 800c0aa:	e125      	b.n	800c2f8 <eth_cmds_analysis+0xcd8>
	      fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 0;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	705a      	strb	r2, [r3, #1]
	      confirmation(fobos_eth_buf, (void*)0);
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f94f 	bl	800c358 <confirmation>
		break;
 800c0ba:	e11d      	b.n	800c2f8 <eth_cmds_analysis+0xcd8>

	//GET ethernet statements >>>>
	case FOBOS_ETH_GET_IP:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	785b      	ldrb	r3, [r3, #1]
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d111      	bne.n	800c0ea <eth_cmds_analysis+0xaca>
	  {
	    uint8_t ip[4];
	    getSIPR(ip);
 800c0c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c0ca:	2204      	movs	r2, #4
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	200f      	movs	r0, #15
 800c0d0:	f7fe fdfe 	bl	800acd0 <WIZCHIP_READ_BUF>
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	709a      	strb	r2, [r3, #2]
	    feedback_params(fobos_eth_buf, ip, 4+1);
 800c0da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c0de:	2205      	movs	r2, #5
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f918 	bl	800c318 <feedback_params>
	  }
	  else{
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
	      fobos_eth_protocol_send(FOBOS_ETH_GET_IP, 1, fobos_eth_buf);
	  }
	  break;
 800c0e8:	e107      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	709a      	strb	r2, [r3, #2]
	      fobos_eth_protocol_send(FOBOS_ETH_GET_IP, 1, fobos_eth_buf);
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	20fe      	movs	r0, #254	; 0xfe
 800c0f6:	f7ff fa77 	bl	800b5e8 <fobos_eth_protocol_send>
	  break;
 800c0fa:	e0fe      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_ETH_DHCP:
	  {
	    uint8_t dhcp_state = fobos_eth_buf->fobos_protocol_buf_t.data[1];
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	78db      	ldrb	r3, [r3, #3]
 800c100:	b2db      	uxtb	r3, r3
 800c102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	    wiz_NetData.dhcp = dhcp_state;
 800c106:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c10a:	4b41      	ldr	r3, [pc, #260]	; (800c210 <eth_cmds_analysis+0xbf0>)
 800c10c:	759a      	strb	r2, [r3, #22]
	    if(dhcp_state == 1 || dhcp_state == 2)//Не активная фича!
 800c10e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c112:	2b01      	cmp	r3, #1
 800c114:	d003      	beq.n	800c11e <eth_cmds_analysis+0xafe>
 800c116:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d10a      	bne.n	800c134 <eth_cmds_analysis+0xb14>
	    {
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	709a      	strb	r2, [r3, #2]
		feedback_params(fobos_eth_buf, &dhcp_state, 1+1);
 800c124:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800c128:	2202      	movs	r2, #2
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f8f3 	bl	800c318 <feedback_params>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
		send(SOCKET0,fobos_eth_buf->data_to_transmit,fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
	    }
	  }
	  break;
 800c132:	e0e2      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2204      	movs	r2, #4
 800c138:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	705a      	strb	r2, [r3, #1]
		send(SOCKET0,fobos_eth_buf->data_to_transmit,fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	785b      	ldrb	r3, [r3, #1]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3302      	adds	r3, #2
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	461a      	mov	r2, r3
 800c150:	2000      	movs	r0, #0
 800c152:	f7fe fa73 	bl	800a63c <send>
	  break;
 800c156:	e0d0      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_ETH_GET_MASK:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	785b      	ldrb	r3, [r3, #1]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d113      	bne.n	800c18a <eth_cmds_analysis+0xb6a>
	  {
	    uint8_t mask[4]={0};
 800c162:	2300      	movs	r3, #0
 800c164:	643b      	str	r3, [r7, #64]	; 0x40
	    getSUBR(mask);
 800c166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c16a:	2204      	movs	r2, #4
 800c16c:	4619      	mov	r1, r3
 800c16e:	2005      	movs	r0, #5
 800c170:	f7fe fdae 	bl	800acd0 <WIZCHIP_READ_BUF>
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	709a      	strb	r2, [r3, #2]
	    feedback_params(fobos_eth_buf, mask, 4+1);
 800c17a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c17e:	2205      	movs	r2, #5
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f8c8 	bl	800c318 <feedback_params>
	  }
	  else{
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
	      fobos_eth_protocol_send(FOBOS_ETH_GET_MASK, 1, fobos_eth_buf);
	      }
	  break;
 800c188:	e0b7      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	      fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2204      	movs	r2, #4
 800c18e:	709a      	strb	r2, [r3, #2]
	      fobos_eth_protocol_send(FOBOS_ETH_GET_MASK, 1, fobos_eth_buf);
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	2101      	movs	r1, #1
 800c194:	20fd      	movs	r0, #253	; 0xfd
 800c196:	f7ff fa27 	bl	800b5e8 <fobos_eth_protocol_send>
	  break;
 800c19a:	e0ae      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_ETH_GET_PORT:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d136      	bne.n	800c214 <eth_cmds_analysis+0xbf4>
		  {
		    uint8_t port[2]={0};
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		    socket_port = getSn_PORT(SOCKET0);
 800c1aa:	f244 0004 	movw	r0, #16388	; 0x4004
 800c1ae:	f7fe fd11 	bl	800abd4 <WIZCHIP_READ>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	021b      	lsls	r3, r3, #8
 800c1b8:	b29c      	uxth	r4, r3
 800c1ba:	f244 0005 	movw	r0, #16389	; 0x4005
 800c1be:	f7fe fd09 	bl	800abd4 <WIZCHIP_READ>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4423      	add	r3, r4
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c1cc:	801a      	strh	r2, [r3, #0]
		    port[0] = socket_port>>8;
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		    port[1] = socket_port;
 800c1dc:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <eth_cmds_analysis+0xbe8>)
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	709a      	strb	r2, [r3, #2]
		    feedback_params(fobos_eth_buf, port, 2+1);
 800c1ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f88f 	bl	800c318 <feedback_params>
		  }
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_protocol_send(FOBOS_ETH_GET_PORT, 1, fobos_eth_buf);
	      }
		  break;
 800c1fa:	e07e      	b.n	800c2fa <eth_cmds_analysis+0xcda>
 800c1fc:	0800e1b0 	.word	0x0800e1b0
 800c200:	20000048 	.word	0x20000048
 800c204:	2000003c 	.word	0x2000003c
 800c208:	20000038 	.word	0x20000038
 800c20c:	2000004c 	.word	0x2000004c
 800c210:	20003e34 	.word	0x20003e34
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2204      	movs	r2, #4
 800c218:	709a      	strb	r2, [r3, #2]
		fobos_eth_protocol_send(FOBOS_ETH_GET_PORT, 1, fobos_eth_buf);
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	2101      	movs	r1, #1
 800c21e:	20fc      	movs	r0, #252	; 0xfc
 800c220:	f7ff f9e2 	bl	800b5e8 <fobos_eth_protocol_send>
		  break;
 800c224:	e069      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_ETH_GET_TIMEOUT:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d125      	bne.n	800c27c <eth_cmds_analysis+0xc5c>
		  {
		    uint8_t timeout[2];
		    uint16_t timeout_temp1;
		    timeout_temp1 = getRTR();
 800c230:	2017      	movs	r0, #23
 800c232:	f7fe fccf 	bl	800abd4 <WIZCHIP_READ>
 800c236:	4603      	mov	r3, r0
 800c238:	b29b      	uxth	r3, r3
 800c23a:	021b      	lsls	r3, r3, #8
 800c23c:	b29c      	uxth	r4, r3
 800c23e:	2018      	movs	r0, #24
 800c240:	f7fe fcc8 	bl	800abd4 <WIZCHIP_READ>
 800c244:	4603      	mov	r3, r0
 800c246:	b29b      	uxth	r3, r3
 800c248:	4423      	add	r3, r4
 800c24a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
		    timeout[0] = timeout_temp1>>8;
 800c24e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800c252:	0a1b      	lsrs	r3, r3, #8
 800c254:	b29b      	uxth	r3, r3
 800c256:	b2db      	uxtb	r3, r3
 800c258:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		    timeout[1] = timeout_temp1;
 800c25c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	709a      	strb	r2, [r3, #2]
		    feedback_params(fobos_eth_buf, timeout, 2+1);
 800c26c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c270:	2203      	movs	r2, #3
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f84f 	bl	800c318 <feedback_params>
		  }
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_protocol_send(FOBOS_ETH_GET_TIMEOUT, 1, fobos_eth_buf);
	      }
		  break;
 800c27a:	e03e      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2204      	movs	r2, #4
 800c280:	709a      	strb	r2, [r3, #2]
		fobos_eth_protocol_send(FOBOS_ETH_GET_TIMEOUT, 1, fobos_eth_buf);
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	2101      	movs	r1, #1
 800c286:	20fa      	movs	r0, #250	; 0xfa
 800c288:	f7ff f9ae 	bl	800b5e8 <fobos_eth_protocol_send>
		  break;
 800c28c:	e035      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	case FOBOS_ETH_GET_DHCP_STATE:
	  if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 0)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d111      	bne.n	800c2bc <eth_cmds_analysis+0xc9c>
	  {
	    uint8_t dhcp_state = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	    dhcp_state = wiz_NetData.dhcp;
 800c29e:	4b1c      	ldr	r3, [pc, #112]	; (800c310 <eth_cmds_analysis+0xcf0>)
 800c2a0:	7d9b      	ldrb	r3, [r3, #22]
 800c2a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	709a      	strb	r2, [r3, #2]
	    feedback_params(fobos_eth_buf, &dhcp_state, 1+1);
 800c2ac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f82f 	bl	800c318 <feedback_params>
	  }
	  else{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
		fobos_eth_protocol_send(FOBOS_ETH_GET_DHCP_STATE, 1, fobos_eth_buf);
	    }
	  break;
 800c2ba:	e01e      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2204      	movs	r2, #4
 800c2c0:	709a      	strb	r2, [r3, #2]
		fobos_eth_protocol_send(FOBOS_ETH_GET_DHCP_STATE, 1, fobos_eth_buf);
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	20fb      	movs	r0, #251	; 0xfb
 800c2c8:	f7ff f98e 	bl	800b5e8 <fobos_eth_protocol_send>
	  break;
 800c2cc:	e015      	b.n	800c2fa <eth_cmds_analysis+0xcda>
	default:
	  fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	705a      	strb	r2, [r3, #1]
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_CMD;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2206      	movs	r2, #6
 800c2d8:	709a      	strb	r2, [r3, #2]
	  fobos_eth_protocol_send(fobos_eth_buf->fobos_protocol_buf_t.CMD, 1, fobos_eth_buf);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff f97f 	bl	800b5e8 <fobos_eth_protocol_send>
	  break;
 800c2ea:	e006      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		break;
 800c2ec:	bf00      	nop
 800c2ee:	e004      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		break;
 800c2f0:	bf00      	nop
 800c2f2:	e002      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		break;
 800c2f4:	bf00      	nop
 800c2f6:	e000      	b.n	800c2fa <eth_cmds_analysis+0xcda>
		break;
 800c2f8:	bf00      	nop
	}
	xSemaphoreGive(Mutex_Eth);
 800c2fa:	4b06      	ldr	r3, [pc, #24]	; (800c314 <eth_cmds_analysis+0xcf4>)
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	2300      	movs	r3, #0
 800c300:	2200      	movs	r2, #0
 800c302:	2100      	movs	r1, #0
 800c304:	f7fc f840 	bl	8008388 <xQueueGenericSend>
}
 800c308:	bf00      	nop
 800c30a:	37c8      	adds	r7, #200	; 0xc8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bdb0      	pop	{r4, r5, r7, pc}
 800c310:	20003e34 	.word	0x20003e34
 800c314:	20003e50 	.word	0x20003e50

0800c318 <feedback_params>:

void feedback_params(fobos_protocol_buf_u *fobos_eth_buf, uint8_t *data_for_copy, uint8_t tx_bytes){
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4613      	mov	r3, r2
 800c324:	71fb      	strb	r3, [r7, #7]
  fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = tx_bytes;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	79fa      	ldrb	r2, [r7, #7]
 800c32a:	705a      	strb	r2, [r3, #1]
  memcpy(&fobos_eth_buf->fobos_protocol_buf_t.data[1], data_for_copy, tx_bytes-1);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	1cd8      	adds	r0, r3, #3
 800c330:	79fb      	ldrb	r3, [r7, #7]
 800c332:	3b01      	subs	r3, #1
 800c334:	461a      	mov	r2, r3
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	f001 feea 	bl	800e110 <memcpy>
  send(SOCKET0,
      fobos_eth_buf->data_to_transmit,
 800c33c:	68f9      	ldr	r1, [r7, #12]
      fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	785b      	ldrb	r3, [r3, #1]
 800c342:	b29b      	uxth	r3, r3
  send(SOCKET0,
 800c344:	3302      	adds	r3, #2
 800c346:	b29b      	uxth	r3, r3
 800c348:	461a      	mov	r2, r3
 800c34a:	2000      	movs	r0, #0
 800c34c:	f7fe f976 	bl	800a63c <send>
}
 800c350:	bf00      	nop
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <confirmation>:

uint8_t confirmation(fobos_protocol_buf_u *fobos_eth_buf, uint8_t *data_for_copy){
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 4)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	2b04      	cmp	r3, #4
 800c368:	d119      	bne.n	800c39e <confirmation+0x46>
	{
		memcpy(data_for_copy,
		fobos_eth_buf->fobos_protocol_buf_t.data,
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	1c99      	adds	r1, r3, #2
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	785b      	ldrb	r3, [r3, #1]
		memcpy(data_for_copy,
 800c372:	461a      	mov	r2, r3
 800c374:	6838      	ldr	r0, [r7, #0]
 800c376:	f001 fecb 	bl	800e110 <memcpy>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	705a      	strb	r2, [r3, #1]

		send(SOCKET0,
			fobos_eth_buf->data_to_transmit,
 800c386:	6879      	ldr	r1, [r7, #4]
			fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	785b      	ldrb	r3, [r3, #1]
 800c38c:	b29b      	uxth	r3, r3
		send(SOCKET0,
 800c38e:	3302      	adds	r3, #2
 800c390:	b29b      	uxth	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	2000      	movs	r0, #0
 800c396:	f7fe f951 	bl	800a63c <send>
		return 1;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e037      	b.n	800c40e <confirmation+0xb6>
	}
	else if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 2
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d122      	bne.n	800c3ec <confirmation+0x94>
			&& (fobos_eth_buf->fobos_protocol_buf_t.CMD == FOBOS_ETH_CHANGE_PORT
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	2b03      	cmp	r3, #3
 800c3ac:	d003      	beq.n	800c3b6 <confirmation+0x5e>
					|| fobos_eth_buf->fobos_protocol_buf_t.CMD == FOBOS_CHANGE_TIMEOUT)){
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b05      	cmp	r3, #5
 800c3b4:	d11a      	bne.n	800c3ec <confirmation+0x94>
				*data_for_copy = fobos_eth_buf->fobos_protocol_buf_t.data[1];
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	78da      	ldrb	r2, [r3, #3]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	701a      	strb	r2, [r3, #0]
				*(data_for_copy + 1) = fobos_eth_buf->fobos_protocol_buf_t.data[0];
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	7892      	ldrb	r2, [r2, #2]
 800c3c6:	701a      	strb	r2, [r3, #0]

				fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	709a      	strb	r2, [r3, #2]
				fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	705a      	strb	r2, [r3, #1]

				send(SOCKET0,
					fobos_eth_buf->data_to_transmit,
 800c3d4:	6879      	ldr	r1, [r7, #4]
					fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	b29b      	uxth	r3, r3
				send(SOCKET0,
 800c3dc:	3302      	adds	r3, #2
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f7fe f92a 	bl	800a63c <send>
				return 1;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e010      	b.n	800c40e <confirmation+0xb6>
	}
	else
	{
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	705a      	strb	r2, [r3, #1]
		send(SOCKET0,
			fobos_eth_buf->data_to_transmit,
 800c3f8:	6879      	ldr	r1, [r7, #4]
			fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	b29b      	uxth	r3, r3
		send(SOCKET0,
 800c400:	3302      	adds	r3, #2
 800c402:	b29b      	uxth	r3, r3
 800c404:	461a      	mov	r2, r3
 800c406:	2000      	movs	r0, #0
 800c408:	f7fe f918 	bl	800a63c <send>
		return 0;
 800c40c:	2300      	movs	r3, #0
	}
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <canopen_transmit>:

uint8_t canopen_transmit(uint16_t COB_ID, uint8_t control_field, uint16_t index, uint8_t subindex, uint8_t *data){
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4604      	mov	r4, r0
 800c420:	4608      	mov	r0, r1
 800c422:	4611      	mov	r1, r2
 800c424:	461a      	mov	r2, r3
 800c426:	4623      	mov	r3, r4
 800c428:	80fb      	strh	r3, [r7, #6]
 800c42a:	4603      	mov	r3, r0
 800c42c:	717b      	strb	r3, [r7, #5]
 800c42e:	460b      	mov	r3, r1
 800c430:	807b      	strh	r3, [r7, #2]
 800c432:	4613      	mov	r3, r2
 800c434:	713b      	strb	r3, [r7, #4]
  uint8_t temp_buf[8] = {0};
 800c436:	f107 0308 	add.w	r3, r7, #8
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	605a      	str	r2, [r3, #4]
  temp_buf[0] = control_field;
 800c440:	797b      	ldrb	r3, [r7, #5]
 800c442:	723b      	strb	r3, [r7, #8]

  temp_buf[1] = (uint8_t)index;
 800c444:	887b      	ldrh	r3, [r7, #2]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	727b      	strb	r3, [r7, #9]
  temp_buf[2] = (uint8_t)(index>>8);
 800c44a:	887b      	ldrh	r3, [r7, #2]
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	b29b      	uxth	r3, r3
 800c450:	b2db      	uxtb	r3, r3
 800c452:	72bb      	strb	r3, [r7, #10]
  temp_buf[3] = subindex;
 800c454:	793b      	ldrb	r3, [r7, #4]
 800c456:	72fb      	strb	r3, [r7, #11]

  temp_buf[4] = *(data+0);	//low byte
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	733b      	strb	r3, [r7, #12]
  temp_buf[5] = *(data+1);
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	785b      	ldrb	r3, [r3, #1]
 800c462:	737b      	strb	r3, [r7, #13]
  temp_buf[6] = *(data+2);
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	789b      	ldrb	r3, [r3, #2]
 800c468:	73bb      	strb	r3, [r7, #14]
  temp_buf[7] = *(data+3);		//high byte
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	78db      	ldrb	r3, [r3, #3]
 800c46e:	73fb      	strb	r3, [r7, #15]
  return can_tx_func(&hfdcan2, COB_ID, 8, temp_buf);
 800c470:	88f9      	ldrh	r1, [r7, #6]
 800c472:	f107 0308 	add.w	r3, r7, #8
 800c476:	2208      	movs	r2, #8
 800c478:	4803      	ldr	r0, [pc, #12]	; (800c488 <canopen_transmit+0x70>)
 800c47a:	f000 f885 	bl	800c588 <can_tx_func>
 800c47e:	4603      	mov	r3, r0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	bd90      	pop	{r4, r7, pc}
 800c488:	20004090 	.word	0x20004090

0800c48c <canopen_receive>:

canopen_u* canopen_receive(canopen_u* canopen_rcv){
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b090      	sub	sp, #64	; 0x40
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t can_data_rcv[8] = {0};
 800c494:	f107 0308 	add.w	r3, r7, #8
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	605a      	str	r2, [r3, #4]
  uint16_t ID_temp = canopen_rcv->values_t.COB_ID-0x80;// special for SDO!
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	3b80      	subs	r3, #128	; 0x80
 800c4a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t index = canopen_rcv->values_t.index;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	889b      	ldrh	r3, [r3, #4]
 800c4aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint8_t subindex = canopen_rcv->values_t.subindex;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	799b      	ldrb	r3, [r3, #6]
 800c4b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while(RxHeader.Identifier != ID_temp
 800c4b4:	e007      	b.n	800c4c6 <canopen_receive+0x3a>
      && index != can_data_rcv[1]
      && (index>>8) != can_data_rcv[2]
      /*&& subindex != can_data_rcv[3]*/)
      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_rcv);
 800c4b6:	f107 0208 	add.w	r2, r7, #8
 800c4ba:	f107 0310 	add.w	r3, r7, #16
 800c4be:	4619      	mov	r1, r3
 800c4c0:	481b      	ldr	r0, [pc, #108]	; (800c530 <canopen_receive+0xa4>)
 800c4c2:	f000 fe51 	bl	800d168 <can_protocol_data_analyzing>
  while(RxHeader.Identifier != ID_temp
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d00b      	beq.n	800c4e6 <canopen_receive+0x5a>
      && index != can_data_rcv[1]
 800c4ce:	7a7b      	ldrb	r3, [r7, #9]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d006      	beq.n	800c4e6 <canopen_receive+0x5a>
      && (index>>8) != can_data_rcv[2]
 800c4d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	7abb      	ldrb	r3, [r7, #10]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d1e7      	bne.n	800c4b6 <canopen_receive+0x2a>
  canopen_rcv->values_t.COB_ID = RxHeader.Identifier;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	801a      	strh	r2, [r3, #0]
  canopen_rcv->values_t.control_field = can_data_rcv[0];
 800c4ee:	7a3a      	ldrb	r2, [r7, #8]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	709a      	strb	r2, [r3, #2]
  canopen_rcv->values_t.index = can_data_rcv[1] | (can_data_rcv[2]<<8);
 800c4f4:	7a7b      	ldrb	r3, [r7, #9]
 800c4f6:	b21a      	sxth	r2, r3
 800c4f8:	7abb      	ldrb	r3, [r7, #10]
 800c4fa:	021b      	lsls	r3, r3, #8
 800c4fc:	b21b      	sxth	r3, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	b21b      	sxth	r3, r3
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	809a      	strh	r2, [r3, #4]
  canopen_rcv->values_t.subindex = can_data_rcv[3];
 800c508:	7afa      	ldrb	r2, [r7, #11]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	719a      	strb	r2, [r3, #6]
  canopen_rcv->values_t.data[0] = can_data_rcv[4];
 800c50e:	7b3a      	ldrb	r2, [r7, #12]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	71da      	strb	r2, [r3, #7]
  canopen_rcv->values_t.data[1] = can_data_rcv[5];
 800c514:	7b7a      	ldrb	r2, [r7, #13]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	721a      	strb	r2, [r3, #8]
  canopen_rcv->values_t.data[2] = can_data_rcv[6];
 800c51a:	7bba      	ldrb	r2, [r7, #14]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	725a      	strb	r2, [r3, #9]
  canopen_rcv->values_t.data[3] = can_data_rcv[7];
 800c520:	7bfa      	ldrb	r2, [r7, #15]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	729a      	strb	r2, [r3, #10]
  return canopen_rcv;
 800c526:	687b      	ldr	r3, [r7, #4]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3740      	adds	r7, #64	; 0x40
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20004090 	.word	0x20004090

0800c534 <canopen_req_resp_sdo>:

canopen_u* canopen_req_resp_sdo(uint16_t COB_ID, uint8_t control_field, uint16_t index, uint8_t subindex, uint8_t *data,
				canopen_u *canopen_rcv){
 800c534:	b590      	push	{r4, r7, lr}
 800c536:	b085      	sub	sp, #20
 800c538:	af02      	add	r7, sp, #8
 800c53a:	4604      	mov	r4, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	4611      	mov	r1, r2
 800c540:	461a      	mov	r2, r3
 800c542:	4623      	mov	r3, r4
 800c544:	80fb      	strh	r3, [r7, #6]
 800c546:	4603      	mov	r3, r0
 800c548:	717b      	strb	r3, [r7, #5]
 800c54a:	460b      	mov	r3, r1
 800c54c:	807b      	strh	r3, [r7, #2]
 800c54e:	4613      	mov	r3, r2
 800c550:	713b      	strb	r3, [r7, #4]

 // while(canopen_rcv->values_t.COB_ID != (COB_ID - 0x80)
      /*|| index != canopen_rcv.values_t.index
      || subindex != canopen_rcv.values_t.subindex)*/
    {
      canopen_transmit(COB_ID, control_field, index, subindex, data);
 800c552:	793c      	ldrb	r4, [r7, #4]
 800c554:	887a      	ldrh	r2, [r7, #2]
 800c556:	7979      	ldrb	r1, [r7, #5]
 800c558:	88f8      	ldrh	r0, [r7, #6]
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	4623      	mov	r3, r4
 800c560:	f7ff ff5a 	bl	800c418 <canopen_transmit>
      canopen_rcv->values_t.COB_ID = COB_ID;
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	88fa      	ldrh	r2, [r7, #6]
 800c568:	801a      	strh	r2, [r3, #0]
      canopen_rcv->values_t.index = index;
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	887a      	ldrh	r2, [r7, #2]
 800c56e:	809a      	strh	r2, [r3, #4]
      canopen_rcv->values_t.subindex = subindex;
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	793a      	ldrb	r2, [r7, #4]
 800c574:	719a      	strb	r2, [r3, #6]
      canopen_receive(canopen_rcv);
 800c576:	69f8      	ldr	r0, [r7, #28]
 800c578:	f7ff ff88 	bl	800c48c <canopen_receive>
    }
  return canopen_rcv;
 800c57c:	69fb      	ldr	r3, [r7, #28]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	bd90      	pop	{r4, r7, pc}
	...

0800c588 <can_tx_func>:
		PIN_nCS1(SET);
		return data_rcv;
}

char can_tx_func(FDCAN_HandleTypeDef *hfdcan, unsigned int ID, uint32_t data_lenght, uint8_t *data)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08e      	sub	sp, #56	; 0x38
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
	/* Prepare Tx Header */
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = ID;
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	613b      	str	r3, [r7, #16]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
	TxHeader.DataLength = (data_lenght<<16);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	041b      	lsls	r3, r3, #16
 800c5a6:	61fb      	str	r3, [r7, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	623b      	str	r3, [r7, #32]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TxEventFifoControl = FDCAN_TX_EVENT;
 800c5b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.MessageMarker = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	633b      	str	r3, [r7, #48]	; 0x30

	static a=0;
	LED_VD6(a^=1);
 800c5be:	4b1d      	ldr	r3, [pc, #116]	; (800c634 <can_tx_func+0xac>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f083 0301 	eor.w	r3, r3, #1
 800c5c6:	4a1b      	ldr	r2, [pc, #108]	; (800c634 <can_tx_func+0xac>)
 800c5c8:	6013      	str	r3, [r2, #0]
 800c5ca:	4b1a      	ldr	r3, [pc, #104]	; (800c634 <can_tx_func+0xac>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c5d6:	4818      	ldr	r0, [pc, #96]	; (800c638 <can_tx_func+0xb0>)
 800c5d8:	f7f6 f85c 	bl	8002694 <HAL_GPIO_WritePin>
	uint32_t buf_num = FDCAN_TX_BUFFER1;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	637b      	str	r3, [r7, #52]	; 0x34
	while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, buf_num)){
 800c5e0:	e008      	b.n	800c5f4 <can_tx_func+0x6c>
	    if(buf_num == FDCAN_TX_BUFFER4)
 800c5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e4:	2b10      	cmp	r3, #16
 800c5e6:	d102      	bne.n	800c5ee <can_tx_func+0x66>
	      buf_num = FDCAN_TX_BUFFER1;
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ec:	e002      	b.n	800c5f4 <can_tx_func+0x6c>
	    else
	      buf_num = buf_num << 1;
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	637b      	str	r3, [r7, #52]	; 0x34
	while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, buf_num)){
 800c5f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5f6:	4811      	ldr	r0, [pc, #68]	; (800c63c <can_tx_func+0xb4>)
 800c5f8:	f7f5 fc46 	bl	8001e88 <HAL_FDCAN_IsTxBufferMessagePending>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1ef      	bne.n	800c5e2 <can_tx_func+0x5a>
	}
	if(HAL_FDCAN_AddMessageToTxBuffer(hfdcan, &TxHeader, data, buf_num) == HAL_OK)
 800c602:	f107 0110 	add.w	r1, r7, #16
 800c606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7f5 fa78 	bl	8001b00 <HAL_FDCAN_AddMessageToTxBuffer>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d108      	bne.n	800c628 <can_tx_func+0xa0>
	if(HAL_FDCAN_EnableTxBufferRequest(hfdcan, buf_num) == HAL_OK)
 800c616:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7f5 fad0 	bl	8001bbe <HAL_FDCAN_EnableTxBufferRequest>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d101      	bne.n	800c628 <can_tx_func+0xa0>
	  return 0xFF;
 800c624:	23ff      	movs	r3, #255	; 0xff
 800c626:	e000      	b.n	800c62a <can_tx_func+0xa2>

	return 0;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3738      	adds	r7, #56	; 0x38
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	20003e68 	.word	0x20003e68
 800c638:	58020800 	.word	0x58020800
 800c63c:	20004090 	.word	0x20004090

0800c640 <vTimerCallback>:
	data[4] = data_value;
	HAL_SPI_Transmit(hspi, data, 5, 10);
	PIN_nCS1(SET);
}

void vTimerCallback(TimerHandle_t Timer){
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

	HAL_IWDG_Refresh(&hiwdg1);
 800c648:	4807      	ldr	r0, [pc, #28]	; (800c668 <vTimerCallback+0x28>)
 800c64a:	f7f6 f8a5 	bl	8002798 <HAL_IWDG_Refresh>
	extern FDCAN_HandleTypeDef hfdcan2;
	//uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
	//can_tx_func(&hfdcan2, 0x80, 8, buf);
	uint8_t buf[8];
	can_tx_func(&hfdcan2, 0x622, 0, buf);
 800c64e:	f107 0308 	add.w	r3, r7, #8
 800c652:	2200      	movs	r2, #0
 800c654:	f240 6122 	movw	r1, #1570	; 0x622
 800c658:	4804      	ldr	r0, [pc, #16]	; (800c66c <vTimerCallback+0x2c>)
 800c65a:	f7ff ff95 	bl	800c588 <can_tx_func>
}
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20003eb4 	.word	0x20003eb4
 800c66c:	20004090 	.word	0x20004090

0800c670 <position_mode_process_calibration>:

static void position_mode_process_calibration(){
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af02      	add	r7, sp, #8
  uint8_t can_data_tx[4] = {0};//can_data_tx[0] младший байт
 800c676:	2300      	movs	r3, #0
 800c678:	60fb      	str	r3, [r7, #12]
   canopen_u canopen_rcv;
   HAL_IWDG_Refresh(&hiwdg1);
 800c67a:	48a3      	ldr	r0, [pc, #652]	; (800c908 <position_mode_process_calibration+0x298>)
 800c67c:	f7f6 f88c 	bl	8002798 <HAL_IWDG_Refresh>
   //111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999AAAAAAAAAABB //51 символ
   //AWD: move forward(hex): 	05 4B 08 00 03 AA 00 FB		05 4B 08 00 03 DE 00 C7	//990 max
   //AWD: move backward(hex): 	05 4B 08 00 83 AA 00 7B		05 4B 08 00 83 DE 00 47	//-990 max
   //AWD: stop(hex):				05 4B 08 00 00 00 00 A8

   canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6061,0,can_data_tx, &canopen_rcv);//mode request: 1 - profile position mode
 800c680:	463b      	mov	r3, r7
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	f107 030c 	add.w	r3, r7, #12
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	2300      	movs	r3, #0
 800c68c:	f246 0261 	movw	r2, #24673	; 0x6061
 800c690:	2140      	movs	r1, #64	; 0x40
 800c692:	f240 6001 	movw	r0, #1537	; 0x601
 800c696:	f7ff ff4d 	bl	800c534 <canopen_req_resp_sdo>
   if(canopen_rcv.values_t.data[0] != 0x01){
 800c69a:	79fb      	ldrb	r3, [r7, #7]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	f000 809f 	beq.w	800c7e0 <position_mode_process_calibration+0x170>
   can_data_tx[0] = 6;//shutdown
 800c6a2:	2306      	movs	r3, #6
 800c6a4:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800c6a6:	463b      	mov	r3, r7
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	f107 030c 	add.w	r3, r7, #12
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f246 0240 	movw	r2, #24640	; 0x6040
 800c6b6:	212b      	movs	r1, #43	; 0x2b
 800c6b8:	f240 6001 	movw	r0, #1537	; 0x601
 800c6bc:	f7ff ff3a 	bl	800c534 <canopen_req_resp_sdo>
   can_data_tx[0] = 1;//profile position mode
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_1BYTE_REQ,0x6060,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	f107 030c 	add.w	r3, r7, #12
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f246 0260 	movw	r2, #24672	; 0x6060
 800c6d4:	212f      	movs	r1, #47	; 0x2f
 800c6d6:	f240 6001 	movw	r0, #1537	; 0x601
 800c6da:	f7ff ff2b 	bl	800c534 <canopen_req_resp_sdo>
 800c6de:	488a      	ldr	r0, [pc, #552]	; (800c908 <position_mode_process_calibration+0x298>)
 800c6e0:	f7f6 f85a 	bl	8002798 <HAL_IWDG_Refresh>

   while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800c6e4:	e00f      	b.n	800c706 <position_mode_process_calibration+0x96>
       canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv); HAL_IWDG_Refresh(&hiwdg1);
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	f107 030c 	add.w	r3, r7, #12
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f246 0241 	movw	r2, #24641	; 0x6041
 800c6f6:	2140      	movs	r1, #64	; 0x40
 800c6f8:	f240 6001 	movw	r0, #1537	; 0x601
 800c6fc:	f7ff ff1a 	bl	800c534 <canopen_req_resp_sdo>
 800c700:	4881      	ldr	r0, [pc, #516]	; (800c908 <position_mode_process_calibration+0x298>)
 800c702:	f7f6 f849 	bl	8002798 <HAL_IWDG_Refresh>
   while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	f003 0307 	and.w	r3, r3, #7
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d1ea      	bne.n	800c6e6 <position_mode_process_calibration+0x76>
   }

   can_data_tx[0] = 0x07;//switch on
 800c710:	2307      	movs	r3, #7
 800c712:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c714:	463b      	mov	r3, r7
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	f107 030c 	add.w	r3, r7, #12
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	2300      	movs	r3, #0
 800c720:	f246 0240 	movw	r2, #24640	; 0x6040
 800c724:	212b      	movs	r1, #43	; 0x2b
 800c726:	f240 6001 	movw	r0, #1537	; 0x601
 800c72a:	f7ff ff03 	bl	800c534 <canopen_req_resp_sdo>
 800c72e:	4876      	ldr	r0, [pc, #472]	; (800c908 <position_mode_process_calibration+0x298>)
 800c730:	f7f6 f832 	bl	8002798 <HAL_IWDG_Refresh>
   canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c734:	463b      	mov	r3, r7
 800c736:	9301      	str	r3, [sp, #4]
 800c738:	f107 030c 	add.w	r3, r7, #12
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	2300      	movs	r3, #0
 800c740:	f246 0241 	movw	r2, #24641	; 0x6041
 800c744:	2140      	movs	r1, #64	; 0x40
 800c746:	f240 6001 	movw	r0, #1537	; 0x601
 800c74a:	f7ff fef3 	bl	800c534 <canopen_req_resp_sdo>
 800c74e:	486e      	ldr	r0, [pc, #440]	; (800c908 <position_mode_process_calibration+0x298>)
 800c750:	f7f6 f822 	bl	8002798 <HAL_IWDG_Refresh>
   HAL_IWDG_Refresh(&hiwdg1);
 800c754:	486c      	ldr	r0, [pc, #432]	; (800c908 <position_mode_process_calibration+0x298>)
 800c756:	f7f6 f81f 	bl	8002798 <HAL_IWDG_Refresh>
   while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800c75a:	e00c      	b.n	800c776 <position_mode_process_calibration+0x106>
       canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800c75c:	463b      	mov	r3, r7
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	f107 030c 	add.w	r3, r7, #12
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	2300      	movs	r3, #0
 800c768:	f246 0241 	movw	r2, #24641	; 0x6041
 800c76c:	2140      	movs	r1, #64	; 0x40
 800c76e:	f240 6001 	movw	r0, #1537	; 0x601
 800c772:	f7ff fedf 	bl	800c534 <canopen_req_resp_sdo>
   while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800c77c:	2b23      	cmp	r3, #35	; 0x23
 800c77e:	d1ed      	bne.n	800c75c <position_mode_process_calibration+0xec>

     can_data_tx[0] = 0x0F;//operation EN
 800c780:	230f      	movs	r3, #15
 800c782:	733b      	strb	r3, [r7, #12]
     canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800c784:	463b      	mov	r3, r7
 800c786:	9301      	str	r3, [sp, #4]
 800c788:	f107 030c 	add.w	r3, r7, #12
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	2300      	movs	r3, #0
 800c790:	f246 0240 	movw	r2, #24640	; 0x6040
 800c794:	212b      	movs	r1, #43	; 0x2b
 800c796:	f240 6001 	movw	r0, #1537	; 0x601
 800c79a:	f7ff fecb 	bl	800c534 <canopen_req_resp_sdo>
     canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800c79e:	463b      	mov	r3, r7
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f246 0241 	movw	r2, #24641	; 0x6041
 800c7ae:	2140      	movs	r1, #64	; 0x40
 800c7b0:	f240 6001 	movw	r0, #1537	; 0x601
 800c7b4:	f7ff febe 	bl	800c534 <canopen_req_resp_sdo>
     while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800c7b8:	e00c      	b.n	800c7d4 <position_mode_process_calibration+0x164>
 	      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	f107 030c 	add.w	r3, r7, #12
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f246 0241 	movw	r2, #24641	; 0x6041
 800c7ca:	2140      	movs	r1, #64	; 0x40
 800c7cc:	f240 6001 	movw	r0, #1537	; 0x601
 800c7d0:	f7ff feb0 	bl	800c534 <canopen_req_resp_sdo>
     while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800c7da:	2b27      	cmp	r3, #39	; 0x27
 800c7dc:	d1ed      	bne.n	800c7ba <position_mode_process_calibration+0x14a>
 800c7de:	e069      	b.n	800c8b4 <position_mode_process_calibration+0x244>
   }
   else{
 	can_data_tx[0] = 0x07;//switch on
 800c7e0:	2307      	movs	r3, #7
 800c7e2:	733b      	strb	r3, [r7, #12]
         canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c7e4:	463b      	mov	r3, r7
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	f107 030c 	add.w	r3, r7, #12
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f246 0240 	movw	r2, #24640	; 0x6040
 800c7f4:	212b      	movs	r1, #43	; 0x2b
 800c7f6:	f240 6001 	movw	r0, #1537	; 0x601
 800c7fa:	f7ff fe9b 	bl	800c534 <canopen_req_resp_sdo>
 800c7fe:	4842      	ldr	r0, [pc, #264]	; (800c908 <position_mode_process_calibration+0x298>)
 800c800:	f7f5 ffca 	bl	8002798 <HAL_IWDG_Refresh>
         canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800c804:	463b      	mov	r3, r7
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	f107 030c 	add.w	r3, r7, #12
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	2300      	movs	r3, #0
 800c810:	f246 0241 	movw	r2, #24641	; 0x6041
 800c814:	2140      	movs	r1, #64	; 0x40
 800c816:	f240 6001 	movw	r0, #1537	; 0x601
 800c81a:	f7ff fe8b 	bl	800c534 <canopen_req_resp_sdo>
 800c81e:	483a      	ldr	r0, [pc, #232]	; (800c908 <position_mode_process_calibration+0x298>)
 800c820:	f7f5 ffba 	bl	8002798 <HAL_IWDG_Refresh>

         while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800c824:	e00c      	b.n	800c840 <position_mode_process_calibration+0x1d0>
           canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800c826:	463b      	mov	r3, r7
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	2300      	movs	r3, #0
 800c832:	f246 0241 	movw	r2, #24641	; 0x6041
 800c836:	2140      	movs	r1, #64	; 0x40
 800c838:	f240 6001 	movw	r0, #1537	; 0x601
 800c83c:	f7ff fe7a 	bl	800c534 <canopen_req_resp_sdo>
         while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800c846:	2b23      	cmp	r3, #35	; 0x23
 800c848:	d1ed      	bne.n	800c826 <position_mode_process_calibration+0x1b6>

 	can_data_tx[0] = 0x0F;//operation EN
 800c84a:	230f      	movs	r3, #15
 800c84c:	733b      	strb	r3, [r7, #12]
 	canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c84e:	463b      	mov	r3, r7
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	f107 030c 	add.w	r3, r7, #12
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	2300      	movs	r3, #0
 800c85a:	f246 0240 	movw	r2, #24640	; 0x6040
 800c85e:	212b      	movs	r1, #43	; 0x2b
 800c860:	f240 6001 	movw	r0, #1537	; 0x601
 800c864:	f7ff fe66 	bl	800c534 <canopen_req_resp_sdo>
 800c868:	4827      	ldr	r0, [pc, #156]	; (800c908 <position_mode_process_calibration+0x298>)
 800c86a:	f7f5 ff95 	bl	8002798 <HAL_IWDG_Refresh>
 	canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800c86e:	463b      	mov	r3, r7
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	f107 030c 	add.w	r3, r7, #12
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	2300      	movs	r3, #0
 800c87a:	f246 0241 	movw	r2, #24641	; 0x6041
 800c87e:	2140      	movs	r1, #64	; 0x40
 800c880:	f240 6001 	movw	r0, #1537	; 0x601
 800c884:	f7ff fe56 	bl	800c534 <canopen_req_resp_sdo>
 800c888:	481f      	ldr	r0, [pc, #124]	; (800c908 <position_mode_process_calibration+0x298>)
 800c88a:	f7f5 ff85 	bl	8002798 <HAL_IWDG_Refresh>
 	while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800c88e:	e00c      	b.n	800c8aa <position_mode_process_calibration+0x23a>
 	  canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800c890:	463b      	mov	r3, r7
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	f107 030c 	add.w	r3, r7, #12
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	2300      	movs	r3, #0
 800c89c:	f246 0241 	movw	r2, #24641	; 0x6041
 800c8a0:	2140      	movs	r1, #64	; 0x40
 800c8a2:	f240 6001 	movw	r0, #1537	; 0x601
 800c8a6:	f7ff fe45 	bl	800c534 <canopen_req_resp_sdo>
 	while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800c8b0:	2b27      	cmp	r3, #39	; 0x27
 800c8b2:	d1ed      	bne.n	800c890 <position_mode_process_calibration+0x220>
   }

   	can_data_tx[0] = 0x01;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	733b      	strb	r3, [r7, #12]
   	canopen_req_resp_sdo(0x600+1, 0x2B,0x2080,0,can_data_tx, &canopen_rcv);
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	f107 030c 	add.w	r3, r7, #12
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	f44f 5202 	mov.w	r2, #8320	; 0x2080
 800c8c8:	212b      	movs	r1, #43	; 0x2b
 800c8ca:	f240 6001 	movw	r0, #1537	; 0x601
 800c8ce:	f7ff fe31 	bl	800c534 <canopen_req_resp_sdo>

   	can_data_tx[0] = 0x3F;
 800c8d2:	233f      	movs	r3, #63	; 0x3f
 800c8d4:	733b      	strb	r3, [r7, #12]
   	canopen_req_resp_sdo(0x600+1, 0x2B,0x6040,0,can_data_tx, &canopen_rcv);
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	f107 030c 	add.w	r3, r7, #12
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f246 0240 	movw	r2, #24640	; 0x6040
 800c8e6:	212b      	movs	r1, #43	; 0x2b
 800c8e8:	f240 6001 	movw	r0, #1537	; 0x601
 800c8ec:	f7ff fe22 	bl	800c534 <canopen_req_resp_sdo>
   	  xPosition_func = NULL;
 800c8f0:	4b06      	ldr	r3, [pc, #24]	; (800c90c <position_mode_process_calibration+0x29c>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
   	  vTaskDelete(xPosition_Handle);
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <position_mode_process_calibration+0x2a0>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fc fa92 	bl	8008e24 <vTaskDelete>
}
 800c900:	bf00      	nop
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	20003eb4 	.word	0x20003eb4
 800c90c:	20003e58 	.word	0x20003e58
 800c910:	20003e60 	.word	0x20003e60

0800c914 <position_mode_process_right>:

static void position_mode_process_right(){
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af02      	add	r7, sp, #8
  uint8_t can_data_tx[4] = {0};//can_data_tx[0] младший байт
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
   canopen_u canopen_rcv;
   HAL_IWDG_Refresh(&hiwdg1);
 800c91e:	48a3      	ldr	r0, [pc, #652]	; (800cbac <position_mode_process_right+0x298>)
 800c920:	f7f5 ff3a 	bl	8002798 <HAL_IWDG_Refresh>
   //111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999AAAAAAAAAABB //51 символ
   //AWD: move forward(hex): 	05 4B 08 00 03 AA 00 FB		05 4B 08 00 03 DE 00 C7	//990 max
   //AWD: move backward(hex): 	05 4B 08 00 83 AA 00 7B		05 4B 08 00 83 DE 00 47	//-990 max
   //AWD: stop(hex):				05 4B 08 00 00 00 00 A8

   canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6061,0,can_data_tx, &canopen_rcv);//mode request: 1 - profile position mode
 800c924:	463b      	mov	r3, r7
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	f107 030c 	add.w	r3, r7, #12
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	2300      	movs	r3, #0
 800c930:	f246 0261 	movw	r2, #24673	; 0x6061
 800c934:	2140      	movs	r1, #64	; 0x40
 800c936:	f240 6001 	movw	r0, #1537	; 0x601
 800c93a:	f7ff fdfb 	bl	800c534 <canopen_req_resp_sdo>
   if(canopen_rcv.values_t.data[0] != 0x01){
 800c93e:	79fb      	ldrb	r3, [r7, #7]
 800c940:	2b01      	cmp	r3, #1
 800c942:	f000 809f 	beq.w	800ca84 <position_mode_process_right+0x170>
   can_data_tx[0] = 6;//shutdown
 800c946:	2306      	movs	r3, #6
 800c948:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800c94a:	463b      	mov	r3, r7
 800c94c:	9301      	str	r3, [sp, #4]
 800c94e:	f107 030c 	add.w	r3, r7, #12
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	f246 0240 	movw	r2, #24640	; 0x6040
 800c95a:	212b      	movs	r1, #43	; 0x2b
 800c95c:	f240 6001 	movw	r0, #1537	; 0x601
 800c960:	f7ff fde8 	bl	800c534 <canopen_req_resp_sdo>
   can_data_tx[0] = 1;//profile position mode
 800c964:	2301      	movs	r3, #1
 800c966:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_1BYTE_REQ,0x6060,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c968:	463b      	mov	r3, r7
 800c96a:	9301      	str	r3, [sp, #4]
 800c96c:	f107 030c 	add.w	r3, r7, #12
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	2300      	movs	r3, #0
 800c974:	f246 0260 	movw	r2, #24672	; 0x6060
 800c978:	212f      	movs	r1, #47	; 0x2f
 800c97a:	f240 6001 	movw	r0, #1537	; 0x601
 800c97e:	f7ff fdd9 	bl	800c534 <canopen_req_resp_sdo>
 800c982:	488a      	ldr	r0, [pc, #552]	; (800cbac <position_mode_process_right+0x298>)
 800c984:	f7f5 ff08 	bl	8002798 <HAL_IWDG_Refresh>

   while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800c988:	e00f      	b.n	800c9aa <position_mode_process_right+0x96>
       canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv); HAL_IWDG_Refresh(&hiwdg1);
 800c98a:	463b      	mov	r3, r7
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	f107 030c 	add.w	r3, r7, #12
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	2300      	movs	r3, #0
 800c996:	f246 0241 	movw	r2, #24641	; 0x6041
 800c99a:	2140      	movs	r1, #64	; 0x40
 800c99c:	f240 6001 	movw	r0, #1537	; 0x601
 800c9a0:	f7ff fdc8 	bl	800c534 <canopen_req_resp_sdo>
 800c9a4:	4881      	ldr	r0, [pc, #516]	; (800cbac <position_mode_process_right+0x298>)
 800c9a6:	f7f5 fef7 	bl	8002798 <HAL_IWDG_Refresh>
   while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	f003 0307 	and.w	r3, r3, #7
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d1ea      	bne.n	800c98a <position_mode_process_right+0x76>
   }

   can_data_tx[0] = 0x07;//switch on
 800c9b4:	2307      	movs	r3, #7
 800c9b6:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c9b8:	463b      	mov	r3, r7
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	f107 030c 	add.w	r3, r7, #12
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f246 0240 	movw	r2, #24640	; 0x6040
 800c9c8:	212b      	movs	r1, #43	; 0x2b
 800c9ca:	f240 6001 	movw	r0, #1537	; 0x601
 800c9ce:	f7ff fdb1 	bl	800c534 <canopen_req_resp_sdo>
 800c9d2:	4876      	ldr	r0, [pc, #472]	; (800cbac <position_mode_process_right+0x298>)
 800c9d4:	f7f5 fee0 	bl	8002798 <HAL_IWDG_Refresh>
   canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800c9d8:	463b      	mov	r3, r7
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	f107 030c 	add.w	r3, r7, #12
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f246 0241 	movw	r2, #24641	; 0x6041
 800c9e8:	2140      	movs	r1, #64	; 0x40
 800c9ea:	f240 6001 	movw	r0, #1537	; 0x601
 800c9ee:	f7ff fda1 	bl	800c534 <canopen_req_resp_sdo>
 800c9f2:	486e      	ldr	r0, [pc, #440]	; (800cbac <position_mode_process_right+0x298>)
 800c9f4:	f7f5 fed0 	bl	8002798 <HAL_IWDG_Refresh>
   HAL_IWDG_Refresh(&hiwdg1);
 800c9f8:	486c      	ldr	r0, [pc, #432]	; (800cbac <position_mode_process_right+0x298>)
 800c9fa:	f7f5 fecd 	bl	8002798 <HAL_IWDG_Refresh>
   while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800c9fe:	e00c      	b.n	800ca1a <position_mode_process_right+0x106>
       canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800ca00:	463b      	mov	r3, r7
 800ca02:	9301      	str	r3, [sp, #4]
 800ca04:	f107 030c 	add.w	r3, r7, #12
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f246 0241 	movw	r2, #24641	; 0x6041
 800ca10:	2140      	movs	r1, #64	; 0x40
 800ca12:	f240 6001 	movw	r0, #1537	; 0x601
 800ca16:	f7ff fd8d 	bl	800c534 <canopen_req_resp_sdo>
   while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800ca20:	2b23      	cmp	r3, #35	; 0x23
 800ca22:	d1ed      	bne.n	800ca00 <position_mode_process_right+0xec>

     can_data_tx[0] = 0x0F;//operation EN
 800ca24:	230f      	movs	r3, #15
 800ca26:	733b      	strb	r3, [r7, #12]
     canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800ca28:	463b      	mov	r3, r7
 800ca2a:	9301      	str	r3, [sp, #4]
 800ca2c:	f107 030c 	add.w	r3, r7, #12
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	2300      	movs	r3, #0
 800ca34:	f246 0240 	movw	r2, #24640	; 0x6040
 800ca38:	212b      	movs	r1, #43	; 0x2b
 800ca3a:	f240 6001 	movw	r0, #1537	; 0x601
 800ca3e:	f7ff fd79 	bl	800c534 <canopen_req_resp_sdo>
     canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800ca42:	463b      	mov	r3, r7
 800ca44:	9301      	str	r3, [sp, #4]
 800ca46:	f107 030c 	add.w	r3, r7, #12
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f246 0241 	movw	r2, #24641	; 0x6041
 800ca52:	2140      	movs	r1, #64	; 0x40
 800ca54:	f240 6001 	movw	r0, #1537	; 0x601
 800ca58:	f7ff fd6c 	bl	800c534 <canopen_req_resp_sdo>
     while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800ca5c:	e00c      	b.n	800ca78 <position_mode_process_right+0x164>
 	      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800ca5e:	463b      	mov	r3, r7
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	f107 030c 	add.w	r3, r7, #12
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f246 0241 	movw	r2, #24641	; 0x6041
 800ca6e:	2140      	movs	r1, #64	; 0x40
 800ca70:	f240 6001 	movw	r0, #1537	; 0x601
 800ca74:	f7ff fd5e 	bl	800c534 <canopen_req_resp_sdo>
     while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800ca7e:	2b27      	cmp	r3, #39	; 0x27
 800ca80:	d1ed      	bne.n	800ca5e <position_mode_process_right+0x14a>
 800ca82:	e069      	b.n	800cb58 <position_mode_process_right+0x244>
   }
   else{
 	can_data_tx[0] = 0x07;//switch on
 800ca84:	2307      	movs	r3, #7
 800ca86:	733b      	strb	r3, [r7, #12]
         canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800ca88:	463b      	mov	r3, r7
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	f107 030c 	add.w	r3, r7, #12
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	2300      	movs	r3, #0
 800ca94:	f246 0240 	movw	r2, #24640	; 0x6040
 800ca98:	212b      	movs	r1, #43	; 0x2b
 800ca9a:	f240 6001 	movw	r0, #1537	; 0x601
 800ca9e:	f7ff fd49 	bl	800c534 <canopen_req_resp_sdo>
 800caa2:	4842      	ldr	r0, [pc, #264]	; (800cbac <position_mode_process_right+0x298>)
 800caa4:	f7f5 fe78 	bl	8002798 <HAL_IWDG_Refresh>
         canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800caa8:	463b      	mov	r3, r7
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	f107 030c 	add.w	r3, r7, #12
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	2300      	movs	r3, #0
 800cab4:	f246 0241 	movw	r2, #24641	; 0x6041
 800cab8:	2140      	movs	r1, #64	; 0x40
 800caba:	f240 6001 	movw	r0, #1537	; 0x601
 800cabe:	f7ff fd39 	bl	800c534 <canopen_req_resp_sdo>
 800cac2:	483a      	ldr	r0, [pc, #232]	; (800cbac <position_mode_process_right+0x298>)
 800cac4:	f7f5 fe68 	bl	8002798 <HAL_IWDG_Refresh>

         while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cac8:	e00c      	b.n	800cae4 <position_mode_process_right+0x1d0>
           canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800caca:	463b      	mov	r3, r7
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	f107 030c 	add.w	r3, r7, #12
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	2300      	movs	r3, #0
 800cad6:	f246 0241 	movw	r2, #24641	; 0x6041
 800cada:	2140      	movs	r1, #64	; 0x40
 800cadc:	f240 6001 	movw	r0, #1537	; 0x601
 800cae0:	f7ff fd28 	bl	800c534 <canopen_req_resp_sdo>
         while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800caea:	2b23      	cmp	r3, #35	; 0x23
 800caec:	d1ed      	bne.n	800caca <position_mode_process_right+0x1b6>

 	can_data_tx[0] = 0x0F;//operation EN
 800caee:	230f      	movs	r3, #15
 800caf0:	733b      	strb	r3, [r7, #12]
 	canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800caf2:	463b      	mov	r3, r7
 800caf4:	9301      	str	r3, [sp, #4]
 800caf6:	f107 030c 	add.w	r3, r7, #12
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	2300      	movs	r3, #0
 800cafe:	f246 0240 	movw	r2, #24640	; 0x6040
 800cb02:	212b      	movs	r1, #43	; 0x2b
 800cb04:	f240 6001 	movw	r0, #1537	; 0x601
 800cb08:	f7ff fd14 	bl	800c534 <canopen_req_resp_sdo>
 800cb0c:	4827      	ldr	r0, [pc, #156]	; (800cbac <position_mode_process_right+0x298>)
 800cb0e:	f7f5 fe43 	bl	8002798 <HAL_IWDG_Refresh>
 	canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800cb12:	463b      	mov	r3, r7
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	f107 030c 	add.w	r3, r7, #12
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f246 0241 	movw	r2, #24641	; 0x6041
 800cb22:	2140      	movs	r1, #64	; 0x40
 800cb24:	f240 6001 	movw	r0, #1537	; 0x601
 800cb28:	f7ff fd04 	bl	800c534 <canopen_req_resp_sdo>
 800cb2c:	481f      	ldr	r0, [pc, #124]	; (800cbac <position_mode_process_right+0x298>)
 800cb2e:	f7f5 fe33 	bl	8002798 <HAL_IWDG_Refresh>
 	while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cb32:	e00c      	b.n	800cb4e <position_mode_process_right+0x23a>
 	  canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cb34:	463b      	mov	r3, r7
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	f107 030c 	add.w	r3, r7, #12
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f246 0241 	movw	r2, #24641	; 0x6041
 800cb44:	2140      	movs	r1, #64	; 0x40
 800cb46:	f240 6001 	movw	r0, #1537	; 0x601
 800cb4a:	f7ff fcf3 	bl	800c534 <canopen_req_resp_sdo>
 	while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800cb54:	2b27      	cmp	r3, #39	; 0x27
 800cb56:	d1ed      	bne.n	800cb34 <position_mode_process_right+0x220>
   }

   	can_data_tx[0] = 0x03;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	733b      	strb	r3, [r7, #12]
   	canopen_req_resp_sdo(0x600+1, 0x2B,0x2080,0,can_data_tx, &canopen_rcv);
 800cb5c:	463b      	mov	r3, r7
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	f107 030c 	add.w	r3, r7, #12
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	2300      	movs	r3, #0
 800cb68:	f44f 5202 	mov.w	r2, #8320	; 0x2080
 800cb6c:	212b      	movs	r1, #43	; 0x2b
 800cb6e:	f240 6001 	movw	r0, #1537	; 0x601
 800cb72:	f7ff fcdf 	bl	800c534 <canopen_req_resp_sdo>

   	can_data_tx[0] = 0x3F;
 800cb76:	233f      	movs	r3, #63	; 0x3f
 800cb78:	733b      	strb	r3, [r7, #12]
   	canopen_req_resp_sdo(0x600+1, 0x2B,0x6040,0,can_data_tx, &canopen_rcv);
 800cb7a:	463b      	mov	r3, r7
 800cb7c:	9301      	str	r3, [sp, #4]
 800cb7e:	f107 030c 	add.w	r3, r7, #12
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	2300      	movs	r3, #0
 800cb86:	f246 0240 	movw	r2, #24640	; 0x6040
 800cb8a:	212b      	movs	r1, #43	; 0x2b
 800cb8c:	f240 6001 	movw	r0, #1537	; 0x601
 800cb90:	f7ff fcd0 	bl	800c534 <canopen_req_resp_sdo>
   	  xPosition_func = NULL;
 800cb94:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <position_mode_process_right+0x29c>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	601a      	str	r2, [r3, #0]
   	  vTaskDelete(xPosition_Handle);
 800cb9a:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <position_mode_process_right+0x2a0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fc f940 	bl	8008e24 <vTaskDelete>
}
 800cba4:	bf00      	nop
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20003eb4 	.word	0x20003eb4
 800cbb0:	20003e58 	.word	0x20003e58
 800cbb4:	20003e60 	.word	0x20003e60

0800cbb8 <position_mode_process_left>:

static void position_mode_process_left(){
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af02      	add	r7, sp, #8
  uint8_t can_data_tx[4] = {0};//can_data_tx[0] младший байт
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60fb      	str	r3, [r7, #12]
   canopen_u canopen_rcv;
   HAL_IWDG_Refresh(&hiwdg1);
 800cbc2:	48a3      	ldr	r0, [pc, #652]	; (800ce50 <position_mode_process_left+0x298>)
 800cbc4:	f7f5 fde8 	bl	8002798 <HAL_IWDG_Refresh>
   //111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999AAAAAAAAAABB //51 символ
   //AWD: move forward(hex): 	05 4B 08 00 03 AA 00 FB		05 4B 08 00 03 DE 00 C7	//990 max
   //AWD: move backward(hex): 	05 4B 08 00 83 AA 00 7B		05 4B 08 00 83 DE 00 47	//-990 max
   //AWD: stop(hex):				05 4B 08 00 00 00 00 A8

   canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6061,0,can_data_tx, &canopen_rcv);//mode request: 1 - profile position mode
 800cbc8:	463b      	mov	r3, r7
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f246 0261 	movw	r2, #24673	; 0x6061
 800cbd8:	2140      	movs	r1, #64	; 0x40
 800cbda:	f240 6001 	movw	r0, #1537	; 0x601
 800cbde:	f7ff fca9 	bl	800c534 <canopen_req_resp_sdo>
   if(canopen_rcv.values_t.data[0] != 0x01){
 800cbe2:	79fb      	ldrb	r3, [r7, #7]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	f000 809f 	beq.w	800cd28 <position_mode_process_left+0x170>
   can_data_tx[0] = 6;//shutdown
 800cbea:	2306      	movs	r3, #6
 800cbec:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800cbee:	463b      	mov	r3, r7
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	f107 030c 	add.w	r3, r7, #12
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f246 0240 	movw	r2, #24640	; 0x6040
 800cbfe:	212b      	movs	r1, #43	; 0x2b
 800cc00:	f240 6001 	movw	r0, #1537	; 0x601
 800cc04:	f7ff fc96 	bl	800c534 <canopen_req_resp_sdo>
   can_data_tx[0] = 1;//profile position mode
 800cc08:	2301      	movs	r3, #1
 800cc0a:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_1BYTE_REQ,0x6060,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cc0c:	463b      	mov	r3, r7
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	f107 030c 	add.w	r3, r7, #12
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	2300      	movs	r3, #0
 800cc18:	f246 0260 	movw	r2, #24672	; 0x6060
 800cc1c:	212f      	movs	r1, #47	; 0x2f
 800cc1e:	f240 6001 	movw	r0, #1537	; 0x601
 800cc22:	f7ff fc87 	bl	800c534 <canopen_req_resp_sdo>
 800cc26:	488a      	ldr	r0, [pc, #552]	; (800ce50 <position_mode_process_left+0x298>)
 800cc28:	f7f5 fdb6 	bl	8002798 <HAL_IWDG_Refresh>

   while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800cc2c:	e00f      	b.n	800cc4e <position_mode_process_left+0x96>
       canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv); HAL_IWDG_Refresh(&hiwdg1);
 800cc2e:	463b      	mov	r3, r7
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	f107 030c 	add.w	r3, r7, #12
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	2300      	movs	r3, #0
 800cc3a:	f246 0241 	movw	r2, #24641	; 0x6041
 800cc3e:	2140      	movs	r1, #64	; 0x40
 800cc40:	f240 6001 	movw	r0, #1537	; 0x601
 800cc44:	f7ff fc76 	bl	800c534 <canopen_req_resp_sdo>
 800cc48:	4881      	ldr	r0, [pc, #516]	; (800ce50 <position_mode_process_left+0x298>)
 800cc4a:	f7f5 fda5 	bl	8002798 <HAL_IWDG_Refresh>
   while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	f003 0307 	and.w	r3, r3, #7
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d1ea      	bne.n	800cc2e <position_mode_process_left+0x76>
   }

   can_data_tx[0] = 0x07;//switch on
 800cc58:	2307      	movs	r3, #7
 800cc5a:	733b      	strb	r3, [r7, #12]
   canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cc5c:	463b      	mov	r3, r7
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	f107 030c 	add.w	r3, r7, #12
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	2300      	movs	r3, #0
 800cc68:	f246 0240 	movw	r2, #24640	; 0x6040
 800cc6c:	212b      	movs	r1, #43	; 0x2b
 800cc6e:	f240 6001 	movw	r0, #1537	; 0x601
 800cc72:	f7ff fc5f 	bl	800c534 <canopen_req_resp_sdo>
 800cc76:	4876      	ldr	r0, [pc, #472]	; (800ce50 <position_mode_process_left+0x298>)
 800cc78:	f7f5 fd8e 	bl	8002798 <HAL_IWDG_Refresh>
   canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	f107 030c 	add.w	r3, r7, #12
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	2300      	movs	r3, #0
 800cc88:	f246 0241 	movw	r2, #24641	; 0x6041
 800cc8c:	2140      	movs	r1, #64	; 0x40
 800cc8e:	f240 6001 	movw	r0, #1537	; 0x601
 800cc92:	f7ff fc4f 	bl	800c534 <canopen_req_resp_sdo>
 800cc96:	486e      	ldr	r0, [pc, #440]	; (800ce50 <position_mode_process_left+0x298>)
 800cc98:	f7f5 fd7e 	bl	8002798 <HAL_IWDG_Refresh>
   HAL_IWDG_Refresh(&hiwdg1);
 800cc9c:	486c      	ldr	r0, [pc, #432]	; (800ce50 <position_mode_process_left+0x298>)
 800cc9e:	f7f5 fd7b 	bl	8002798 <HAL_IWDG_Refresh>
   while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cca2:	e00c      	b.n	800ccbe <position_mode_process_left+0x106>
       canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cca4:	463b      	mov	r3, r7
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	f107 030c 	add.w	r3, r7, #12
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f246 0241 	movw	r2, #24641	; 0x6041
 800ccb4:	2140      	movs	r1, #64	; 0x40
 800ccb6:	f240 6001 	movw	r0, #1537	; 0x601
 800ccba:	f7ff fc3b 	bl	800c534 <canopen_req_resp_sdo>
   while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800ccbe:	79fb      	ldrb	r3, [r7, #7]
 800ccc0:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800ccc4:	2b23      	cmp	r3, #35	; 0x23
 800ccc6:	d1ed      	bne.n	800cca4 <position_mode_process_left+0xec>

     can_data_tx[0] = 0x0F;//operation EN
 800ccc8:	230f      	movs	r3, #15
 800ccca:	733b      	strb	r3, [r7, #12]
     canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800cccc:	463b      	mov	r3, r7
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f246 0240 	movw	r2, #24640	; 0x6040
 800ccdc:	212b      	movs	r1, #43	; 0x2b
 800ccde:	f240 6001 	movw	r0, #1537	; 0x601
 800cce2:	f7ff fc27 	bl	800c534 <canopen_req_resp_sdo>
     canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cce6:	463b      	mov	r3, r7
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	f107 030c 	add.w	r3, r7, #12
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f246 0241 	movw	r2, #24641	; 0x6041
 800ccf6:	2140      	movs	r1, #64	; 0x40
 800ccf8:	f240 6001 	movw	r0, #1537	; 0x601
 800ccfc:	f7ff fc1a 	bl	800c534 <canopen_req_resp_sdo>
     while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cd00:	e00c      	b.n	800cd1c <position_mode_process_left+0x164>
 	      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cd02:	463b      	mov	r3, r7
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	f107 030c 	add.w	r3, r7, #12
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f246 0241 	movw	r2, #24641	; 0x6041
 800cd12:	2140      	movs	r1, #64	; 0x40
 800cd14:	f240 6001 	movw	r0, #1537	; 0x601
 800cd18:	f7ff fc0c 	bl	800c534 <canopen_req_resp_sdo>
     while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cd1c:	79fb      	ldrb	r3, [r7, #7]
 800cd1e:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800cd22:	2b27      	cmp	r3, #39	; 0x27
 800cd24:	d1ed      	bne.n	800cd02 <position_mode_process_left+0x14a>
 800cd26:	e069      	b.n	800cdfc <position_mode_process_left+0x244>
   }
   else{
 	can_data_tx[0] = 0x07;//switch on
 800cd28:	2307      	movs	r3, #7
 800cd2a:	733b      	strb	r3, [r7, #12]
         canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cd2c:	463b      	mov	r3, r7
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	f107 030c 	add.w	r3, r7, #12
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	2300      	movs	r3, #0
 800cd38:	f246 0240 	movw	r2, #24640	; 0x6040
 800cd3c:	212b      	movs	r1, #43	; 0x2b
 800cd3e:	f240 6001 	movw	r0, #1537	; 0x601
 800cd42:	f7ff fbf7 	bl	800c534 <canopen_req_resp_sdo>
 800cd46:	4842      	ldr	r0, [pc, #264]	; (800ce50 <position_mode_process_left+0x298>)
 800cd48:	f7f5 fd26 	bl	8002798 <HAL_IWDG_Refresh>
         canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	9301      	str	r3, [sp, #4]
 800cd50:	f107 030c 	add.w	r3, r7, #12
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	2300      	movs	r3, #0
 800cd58:	f246 0241 	movw	r2, #24641	; 0x6041
 800cd5c:	2140      	movs	r1, #64	; 0x40
 800cd5e:	f240 6001 	movw	r0, #1537	; 0x601
 800cd62:	f7ff fbe7 	bl	800c534 <canopen_req_resp_sdo>
 800cd66:	483a      	ldr	r0, [pc, #232]	; (800ce50 <position_mode_process_left+0x298>)
 800cd68:	f7f5 fd16 	bl	8002798 <HAL_IWDG_Refresh>

         while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cd6c:	e00c      	b.n	800cd88 <position_mode_process_left+0x1d0>
           canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cd6e:	463b      	mov	r3, r7
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	f107 030c 	add.w	r3, r7, #12
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f246 0241 	movw	r2, #24641	; 0x6041
 800cd7e:	2140      	movs	r1, #64	; 0x40
 800cd80:	f240 6001 	movw	r0, #1537	; 0x601
 800cd84:	f7ff fbd6 	bl	800c534 <canopen_req_resp_sdo>
         while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cd88:	79fb      	ldrb	r3, [r7, #7]
 800cd8a:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800cd8e:	2b23      	cmp	r3, #35	; 0x23
 800cd90:	d1ed      	bne.n	800cd6e <position_mode_process_left+0x1b6>

 	can_data_tx[0] = 0x0F;//operation EN
 800cd92:	230f      	movs	r3, #15
 800cd94:	733b      	strb	r3, [r7, #12]
 	canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cd96:	463b      	mov	r3, r7
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	f107 030c 	add.w	r3, r7, #12
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	2300      	movs	r3, #0
 800cda2:	f246 0240 	movw	r2, #24640	; 0x6040
 800cda6:	212b      	movs	r1, #43	; 0x2b
 800cda8:	f240 6001 	movw	r0, #1537	; 0x601
 800cdac:	f7ff fbc2 	bl	800c534 <canopen_req_resp_sdo>
 800cdb0:	4827      	ldr	r0, [pc, #156]	; (800ce50 <position_mode_process_left+0x298>)
 800cdb2:	f7f5 fcf1 	bl	8002798 <HAL_IWDG_Refresh>
 	canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800cdb6:	463b      	mov	r3, r7
 800cdb8:	9301      	str	r3, [sp, #4]
 800cdba:	f107 030c 	add.w	r3, r7, #12
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f246 0241 	movw	r2, #24641	; 0x6041
 800cdc6:	2140      	movs	r1, #64	; 0x40
 800cdc8:	f240 6001 	movw	r0, #1537	; 0x601
 800cdcc:	f7ff fbb2 	bl	800c534 <canopen_req_resp_sdo>
 800cdd0:	481f      	ldr	r0, [pc, #124]	; (800ce50 <position_mode_process_left+0x298>)
 800cdd2:	f7f5 fce1 	bl	8002798 <HAL_IWDG_Refresh>
 	while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cdd6:	e00c      	b.n	800cdf2 <position_mode_process_left+0x23a>
 	  canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cdd8:	463b      	mov	r3, r7
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f107 030c 	add.w	r3, r7, #12
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	2300      	movs	r3, #0
 800cde4:	f246 0241 	movw	r2, #24641	; 0x6041
 800cde8:	2140      	movs	r1, #64	; 0x40
 800cdea:	f240 6001 	movw	r0, #1537	; 0x601
 800cdee:	f7ff fba1 	bl	800c534 <canopen_req_resp_sdo>
 	while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800cdf8:	2b27      	cmp	r3, #39	; 0x27
 800cdfa:	d1ed      	bne.n	800cdd8 <position_mode_process_left+0x220>
   }

   	can_data_tx[0] = 0x02;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	733b      	strb	r3, [r7, #12]
   	canopen_req_resp_sdo(0x600+1, 0x2B,0x2080,0,can_data_tx, &canopen_rcv);
 800ce00:	463b      	mov	r3, r7
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	f107 030c 	add.w	r3, r7, #12
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f44f 5202 	mov.w	r2, #8320	; 0x2080
 800ce10:	212b      	movs	r1, #43	; 0x2b
 800ce12:	f240 6001 	movw	r0, #1537	; 0x601
 800ce16:	f7ff fb8d 	bl	800c534 <canopen_req_resp_sdo>

   	can_data_tx[0] = 0x3F;
 800ce1a:	233f      	movs	r3, #63	; 0x3f
 800ce1c:	733b      	strb	r3, [r7, #12]
   	canopen_req_resp_sdo(0x600+1, 0x2B,0x6040,0,can_data_tx, &canopen_rcv);
 800ce1e:	463b      	mov	r3, r7
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	f107 030c 	add.w	r3, r7, #12
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f246 0240 	movw	r2, #24640	; 0x6040
 800ce2e:	212b      	movs	r1, #43	; 0x2b
 800ce30:	f240 6001 	movw	r0, #1537	; 0x601
 800ce34:	f7ff fb7e 	bl	800c534 <canopen_req_resp_sdo>
   	  xPosition_func = NULL;
 800ce38:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <position_mode_process_left+0x29c>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	601a      	str	r2, [r3, #0]
   	  vTaskDelete(xPosition_Handle);
 800ce3e:	4b06      	ldr	r3, [pc, #24]	; (800ce58 <position_mode_process_left+0x2a0>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fb ffee 	bl	8008e24 <vTaskDelete>
}
 800ce48:	bf00      	nop
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20003eb4 	.word	0x20003eb4
 800ce54:	20003e58 	.word	0x20003e58
 800ce58:	20003e60 	.word	0x20003e60

0800ce5c <homing_process>:
    default:
      ;
  }
}

static void homing_process(){
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af02      	add	r7, sp, #8
  uint8_t can_data_tx[4] = {0};//can_data_tx[0] младший байт
 800ce62:	2300      	movs	r3, #0
 800ce64:	60fb      	str	r3, [r7, #12]
  canopen_u canopen_rcv;
  HAL_IWDG_Refresh(&hiwdg1);
 800ce66:	48bd      	ldr	r0, [pc, #756]	; (800d15c <homing_process+0x300>)
 800ce68:	f7f5 fc96 	bl	8002798 <HAL_IWDG_Refresh>
  vTaskDelay(100);
 800ce6c:	2064      	movs	r0, #100	; 0x64
 800ce6e:	f7fc f869 	bl	8008f44 <vTaskDelay>
  canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6061,0,can_data_tx, &canopen_rcv);//mode request: 6 - homing mode
 800ce72:	463b      	mov	r3, r7
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f107 030c 	add.w	r3, r7, #12
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f246 0261 	movw	r2, #24673	; 0x6061
 800ce82:	2140      	movs	r1, #64	; 0x40
 800ce84:	f240 6001 	movw	r0, #1537	; 0x601
 800ce88:	f7ff fb54 	bl	800c534 <canopen_req_resp_sdo>

  if(canopen_rcv.values_t.data[0] != 0x06){
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	2b06      	cmp	r3, #6
 800ce90:	f000 80b5 	beq.w	800cffe <homing_process+0x1a2>
  can_data_tx[0] = 6;//shutdown
 800ce94:	2306      	movs	r3, #6
 800ce96:	733b      	strb	r3, [r7, #12]
  canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800ce98:	463b      	mov	r3, r7
 800ce9a:	9301      	str	r3, [sp, #4]
 800ce9c:	f107 030c 	add.w	r3, r7, #12
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	2300      	movs	r3, #0
 800cea4:	f246 0240 	movw	r2, #24640	; 0x6040
 800cea8:	212b      	movs	r1, #43	; 0x2b
 800ceaa:	f240 6001 	movw	r0, #1537	; 0x601
 800ceae:	f7ff fb41 	bl	800c534 <canopen_req_resp_sdo>
 800ceb2:	48aa      	ldr	r0, [pc, #680]	; (800d15c <homing_process+0x300>)
 800ceb4:	f7f5 fc70 	bl	8002798 <HAL_IWDG_Refresh>
  canopen_req_resp_sdo(0x600+1, SDO_1BYTE_REQ,0x6060,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800ceb8:	463b      	mov	r3, r7
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	f107 030c 	add.w	r3, r7, #12
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	2300      	movs	r3, #0
 800cec4:	f246 0260 	movw	r2, #24672	; 0x6060
 800cec8:	212f      	movs	r1, #47	; 0x2f
 800ceca:	f240 6001 	movw	r0, #1537	; 0x601
 800cece:	f7ff fb31 	bl	800c534 <canopen_req_resp_sdo>
 800ced2:	48a2      	ldr	r0, [pc, #648]	; (800d15c <homing_process+0x300>)
 800ced4:	f7f5 fc60 	bl	8002798 <HAL_IWDG_Refresh>

  while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800ced8:	e00f      	b.n	800cefa <homing_process+0x9e>
      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv); HAL_IWDG_Refresh(&hiwdg1);
 800ceda:	463b      	mov	r3, r7
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	f107 030c 	add.w	r3, r7, #12
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	2300      	movs	r3, #0
 800cee6:	f246 0241 	movw	r2, #24641	; 0x6041
 800ceea:	2140      	movs	r1, #64	; 0x40
 800ceec:	f240 6001 	movw	r0, #1537	; 0x601
 800cef0:	f7ff fb20 	bl	800c534 <canopen_req_resp_sdo>
 800cef4:	4899      	ldr	r0, [pc, #612]	; (800d15c <homing_process+0x300>)
 800cef6:	f7f5 fc4f 	bl	8002798 <HAL_IWDG_Refresh>
  while((canopen_rcv.values_t.data[0] & 0b00000111) != 1){
 800cefa:	79fb      	ldrb	r3, [r7, #7]
 800cefc:	f003 0307 	and.w	r3, r3, #7
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d1ea      	bne.n	800ceda <homing_process+0x7e>
  }
  vTaskDelay(100);
 800cf04:	2064      	movs	r0, #100	; 0x64
 800cf06:	f7fc f81d 	bl	8008f44 <vTaskDelay>
  HAL_IWDG_Refresh(&hiwdg1);
 800cf0a:	4894      	ldr	r0, [pc, #592]	; (800d15c <homing_process+0x300>)
 800cf0c:	f7f5 fc44 	bl	8002798 <HAL_IWDG_Refresh>

  can_data_tx[0] = 0x07;//switch on
 800cf10:	2307      	movs	r3, #7
 800cf12:	733b      	strb	r3, [r7, #12]
  canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cf14:	463b      	mov	r3, r7
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	f107 030c 	add.w	r3, r7, #12
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f246 0240 	movw	r2, #24640	; 0x6040
 800cf24:	212b      	movs	r1, #43	; 0x2b
 800cf26:	f240 6001 	movw	r0, #1537	; 0x601
 800cf2a:	f7ff fb03 	bl	800c534 <canopen_req_resp_sdo>
 800cf2e:	488b      	ldr	r0, [pc, #556]	; (800d15c <homing_process+0x300>)
 800cf30:	f7f5 fc32 	bl	8002798 <HAL_IWDG_Refresh>
  canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800cf34:	463b      	mov	r3, r7
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	f107 030c 	add.w	r3, r7, #12
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f246 0241 	movw	r2, #24641	; 0x6041
 800cf44:	2140      	movs	r1, #64	; 0x40
 800cf46:	f240 6001 	movw	r0, #1537	; 0x601
 800cf4a:	f7ff faf3 	bl	800c534 <canopen_req_resp_sdo>
 800cf4e:	4883      	ldr	r0, [pc, #524]	; (800d15c <homing_process+0x300>)
 800cf50:	f7f5 fc22 	bl	8002798 <HAL_IWDG_Refresh>
  HAL_IWDG_Refresh(&hiwdg1);
 800cf54:	4881      	ldr	r0, [pc, #516]	; (800d15c <homing_process+0x300>)
 800cf56:	f7f5 fc1f 	bl	8002798 <HAL_IWDG_Refresh>
  while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cf5a:	e00c      	b.n	800cf76 <homing_process+0x11a>
      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cf5c:	463b      	mov	r3, r7
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	f107 030c 	add.w	r3, r7, #12
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	2300      	movs	r3, #0
 800cf68:	f246 0241 	movw	r2, #24641	; 0x6041
 800cf6c:	2140      	movs	r1, #64	; 0x40
 800cf6e:	f240 6001 	movw	r0, #1537	; 0x601
 800cf72:	f7ff fadf 	bl	800c534 <canopen_req_resp_sdo>
  while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23)
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800cf7c:	2b23      	cmp	r3, #35	; 0x23
 800cf7e:	d1ed      	bne.n	800cf5c <homing_process+0x100>

    can_data_tx[0] = 0x0F;//operation EN
 800cf80:	230f      	movs	r3, #15
 800cf82:	733b      	strb	r3, [r7, #12]
    canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800cf84:	463b      	mov	r3, r7
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	f107 030c 	add.w	r3, r7, #12
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	f246 0240 	movw	r2, #24640	; 0x6040
 800cf94:	212b      	movs	r1, #43	; 0x2b
 800cf96:	f240 6001 	movw	r0, #1537	; 0x601
 800cf9a:	f7ff facb 	bl	800c534 <canopen_req_resp_sdo>
    canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cf9e:	463b      	mov	r3, r7
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	f107 030c 	add.w	r3, r7, #12
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f246 0241 	movw	r2, #24641	; 0x6041
 800cfae:	2140      	movs	r1, #64	; 0x40
 800cfb0:	f240 6001 	movw	r0, #1537	; 0x601
 800cfb4:	f7ff fabe 	bl	800c534 <canopen_req_resp_sdo>
    while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cfb8:	e00c      	b.n	800cfd4 <homing_process+0x178>
	      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800cfba:	463b      	mov	r3, r7
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	f107 030c 	add.w	r3, r7, #12
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f246 0241 	movw	r2, #24641	; 0x6041
 800cfca:	2140      	movs	r1, #64	; 0x40
 800cfcc:	f240 6001 	movw	r0, #1537	; 0x601
 800cfd0:	f7ff fab0 	bl	800c534 <canopen_req_resp_sdo>
    while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27)
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800cfda:	2b27      	cmp	r3, #39	; 0x27
 800cfdc:	d1ed      	bne.n	800cfba <homing_process+0x15e>

    can_data_tx[0] = 0x1F; //Operation start (homing)
 800cfde:	231f      	movs	r3, #31
 800cfe0:	733b      	strb	r3, [r7, #12]
    canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800cfe2:	463b      	mov	r3, r7
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	f107 030c 	add.w	r3, r7, #12
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	2300      	movs	r3, #0
 800cfee:	f246 0240 	movw	r2, #24640	; 0x6040
 800cff2:	212b      	movs	r1, #43	; 0x2b
 800cff4:	f240 6001 	movw	r0, #1537	; 0x601
 800cff8:	f7ff fa9c 	bl	800c534 <canopen_req_resp_sdo>
 800cffc:	e0a1      	b.n	800d142 <homing_process+0x2e6>
  }
  else
  	      {
      vTaskDelay(100);
 800cffe:	2064      	movs	r0, #100	; 0x64
 800d000:	f7fb ffa0 	bl	8008f44 <vTaskDelay>
  		canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800d004:	463b      	mov	r3, r7
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	f107 030c 	add.w	r3, r7, #12
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	2300      	movs	r3, #0
 800d010:	f246 0241 	movw	r2, #24641	; 0x6041
 800d014:	2140      	movs	r1, #64	; 0x40
 800d016:	f240 6001 	movw	r0, #1537	; 0x601
 800d01a:	f7ff fa8b 	bl	800c534 <canopen_req_resp_sdo>
 800d01e:	484f      	ldr	r0, [pc, #316]	; (800d15c <homing_process+0x300>)
 800d020:	f7f5 fbba 	bl	8002798 <HAL_IWDG_Refresh>
  		if(canopen_rcv.values_t.data[1] == 0x02 && canopen_rcv.values_t.data[0] == 0xB7)
 800d024:	7a3b      	ldrb	r3, [r7, #8]
 800d026:	2b02      	cmp	r3, #2
 800d028:	d103      	bne.n	800d032 <homing_process+0x1d6>
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	2bb7      	cmp	r3, #183	; 0xb7
 800d02e:	f000 8088 	beq.w	800d142 <homing_process+0x2e6>
  		  ;
  		else{
  		  can_data_tx[0] = 0x07;//switch on
 800d032:	2307      	movs	r3, #7
 800d034:	733b      	strb	r3, [r7, #12]
  		    canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);	HAL_IWDG_Refresh(&hiwdg1);
 800d036:	463b      	mov	r3, r7
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	2300      	movs	r3, #0
 800d042:	f246 0240 	movw	r2, #24640	; 0x6040
 800d046:	212b      	movs	r1, #43	; 0x2b
 800d048:	f240 6001 	movw	r0, #1537	; 0x601
 800d04c:	f7ff fa72 	bl	800c534 <canopen_req_resp_sdo>
 800d050:	4842      	ldr	r0, [pc, #264]	; (800d15c <homing_process+0x300>)
 800d052:	f7f5 fba1 	bl	8002798 <HAL_IWDG_Refresh>
  		    canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800d056:	463b      	mov	r3, r7
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	f107 030c 	add.w	r3, r7, #12
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	2300      	movs	r3, #0
 800d062:	f246 0241 	movw	r2, #24641	; 0x6041
 800d066:	2140      	movs	r1, #64	; 0x40
 800d068:	f240 6001 	movw	r0, #1537	; 0x601
 800d06c:	f7ff fa62 	bl	800c534 <canopen_req_resp_sdo>
 800d070:	483a      	ldr	r0, [pc, #232]	; (800d15c <homing_process+0x300>)
 800d072:	f7f5 fb91 	bl	8002798 <HAL_IWDG_Refresh>

  		    while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23){
 800d076:	e00f      	b.n	800d098 <homing_process+0x23c>
  		        canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800d078:	463b      	mov	r3, r7
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	f107 030c 	add.w	r3, r7, #12
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	2300      	movs	r3, #0
 800d084:	f246 0241 	movw	r2, #24641	; 0x6041
 800d088:	2140      	movs	r1, #64	; 0x40
 800d08a:	f240 6001 	movw	r0, #1537	; 0x601
 800d08e:	f7ff fa51 	bl	800c534 <canopen_req_resp_sdo>
  		      HAL_IWDG_Refresh(&hiwdg1);
 800d092:	4832      	ldr	r0, [pc, #200]	; (800d15c <homing_process+0x300>)
 800d094:	f7f5 fb80 	bl	8002798 <HAL_IWDG_Refresh>
  		    while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x23){
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800d09e:	2b23      	cmp	r3, #35	; 0x23
 800d0a0:	d1ea      	bne.n	800d078 <homing_process+0x21c>
  		    }
  		  vTaskDelay(100);
 800d0a2:	2064      	movs	r0, #100	; 0x64
 800d0a4:	f7fb ff4e 	bl	8008f44 <vTaskDelay>
  		      can_data_tx[0] = 0x0F;//operation EN
 800d0a8:	230f      	movs	r3, #15
 800d0aa:	733b      	strb	r3, [r7, #12]
  		      canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv); 	HAL_IWDG_Refresh(&hiwdg1);
 800d0ac:	463b      	mov	r3, r7
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	f107 030c 	add.w	r3, r7, #12
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f246 0240 	movw	r2, #24640	; 0x6040
 800d0bc:	212b      	movs	r1, #43	; 0x2b
 800d0be:	f240 6001 	movw	r0, #1537	; 0x601
 800d0c2:	f7ff fa37 	bl	800c534 <canopen_req_resp_sdo>
 800d0c6:	4825      	ldr	r0, [pc, #148]	; (800d15c <homing_process+0x300>)
 800d0c8:	f7f5 fb66 	bl	8002798 <HAL_IWDG_Refresh>
  		      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);		HAL_IWDG_Refresh(&hiwdg1);
 800d0cc:	463b      	mov	r3, r7
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	f107 030c 	add.w	r3, r7, #12
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f246 0241 	movw	r2, #24641	; 0x6041
 800d0dc:	2140      	movs	r1, #64	; 0x40
 800d0de:	f240 6001 	movw	r0, #1537	; 0x601
 800d0e2:	f7ff fa27 	bl	800c534 <canopen_req_resp_sdo>
 800d0e6:	481d      	ldr	r0, [pc, #116]	; (800d15c <homing_process+0x300>)
 800d0e8:	f7f5 fb56 	bl	8002798 <HAL_IWDG_Refresh>
  		      while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27){
 800d0ec:	e00f      	b.n	800d10e <homing_process+0x2b2>
  			HAL_IWDG_Refresh(&hiwdg1);
 800d0ee:	481b      	ldr	r0, [pc, #108]	; (800d15c <homing_process+0x300>)
 800d0f0:	f7f5 fb52 	bl	8002798 <HAL_IWDG_Refresh>
  		  	      canopen_req_resp_sdo(0x600+1, SDO_REQUEST,0x6041,0,can_data_tx, &canopen_rcv);
 800d0f4:	463b      	mov	r3, r7
 800d0f6:	9301      	str	r3, [sp, #4]
 800d0f8:	f107 030c 	add.w	r3, r7, #12
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	2300      	movs	r3, #0
 800d100:	f246 0241 	movw	r2, #24641	; 0x6041
 800d104:	2140      	movs	r1, #64	; 0x40
 800d106:	f240 6001 	movw	r0, #1537	; 0x601
 800d10a:	f7ff fa13 	bl	800c534 <canopen_req_resp_sdo>
  		      while((canopen_rcv.values_t.data[0] & 0b01100111) != 0x27){
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	f003 0367 	and.w	r3, r3, #103	; 0x67
 800d114:	2b27      	cmp	r3, #39	; 0x27
 800d116:	d1ea      	bne.n	800d0ee <homing_process+0x292>
  		      }
  		    HAL_IWDG_Refresh(&hiwdg1);
 800d118:	4810      	ldr	r0, [pc, #64]	; (800d15c <homing_process+0x300>)
 800d11a:	f7f5 fb3d 	bl	8002798 <HAL_IWDG_Refresh>
  		      can_data_tx[0] = 0x1F; //Operation start (homing)
 800d11e:	231f      	movs	r3, #31
 800d120:	733b      	strb	r3, [r7, #12]
  		      canopen_req_resp_sdo(0x600+1, SDO_2BYTES_REQ, 0x6040, 0, can_data_tx, &canopen_rcv);
 800d122:	463b      	mov	r3, r7
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	f107 030c 	add.w	r3, r7, #12
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	2300      	movs	r3, #0
 800d12e:	f246 0240 	movw	r2, #24640	; 0x6040
 800d132:	212b      	movs	r1, #43	; 0x2b
 800d134:	f240 6001 	movw	r0, #1537	; 0x601
 800d138:	f7ff f9fc 	bl	800c534 <canopen_req_resp_sdo>
  		    HAL_IWDG_Refresh(&hiwdg1);
 800d13c:	4807      	ldr	r0, [pc, #28]	; (800d15c <homing_process+0x300>)
 800d13e:	f7f5 fb2b 	bl	8002798 <HAL_IWDG_Refresh>
  	      }
  	      }
  xHoming = NULL;
 800d142:	4b07      	ldr	r3, [pc, #28]	; (800d160 <homing_process+0x304>)
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]
  vTaskDelete(xHoming_Handle);
 800d148:	4b06      	ldr	r3, [pc, #24]	; (800d164 <homing_process+0x308>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fb fe69 	bl	8008e24 <vTaskDelete>
}
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20003eb4 	.word	0x20003eb4
 800d160:	20003e54 	.word	0x20003e54
 800d164:	20003e5c 	.word	0x20003e5c

0800d168 <can_protocol_data_analyzing>:

uint8_t can_protocol_data_analyzing(FDCAN_HandleTypeDef *hfdcan,
				FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08a      	sub	sp, #40	; 0x28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
	//uint32_t level = HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0);
	if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, pRxHeader, pRxData) == HAL_OK)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	2140      	movs	r1, #64	; 0x40
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f7f4 fd40 	bl	8001c00 <HAL_FDCAN_GetRxMessage>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d13a      	bne.n	800d1fc <can_protocol_data_analyzing+0x94>
	//if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, pRxHeader, pRxData) == HAL_OK)
	{
		volatile uint32_t address = pRxHeader->Identifier;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	627b      	str	r3, [r7, #36]	; 0x24
		/*if(address == 0x81)
		  motor_emergency = 0x0F;*/
		if(address == 0x722){
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	f240 7222 	movw	r2, #1826	; 0x722
 800d192:	4293      	cmp	r3, r2
 800d194:	d107      	bne.n	800d1a6 <can_protocol_data_analyzing+0x3e>
		    uint8_t buf[8];
		    memcpy(buf,pRxData,2);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	83bb      	strh	r3, [r7, #28]
		    terminals_statements = buf[1];
 800d19e:	7f7a      	ldrb	r2, [r7, #29]
 800d1a0:	4b19      	ldr	r3, [pc, #100]	; (800d208 <can_protocol_data_analyzing+0xa0>)
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e019      	b.n	800d1da <can_protocol_data_analyzing+0x72>
		}
		else if(address == 0x701){
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	f240 7201 	movw	r2, #1793	; 0x701
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d114      	bne.n	800d1da <can_protocol_data_analyzing+0x72>
		    uint8_t can_open_tx[8] = {0x2B,0x40,0x60,0,0x06,0,0,0};
 800d1b0:	4a16      	ldr	r2, [pc, #88]	; (800d20c <can_protocol_data_analyzing+0xa4>)
 800d1b2:	f107 0314 	add.w	r3, r7, #20
 800d1b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1ba:	e883 0003 	stmia.w	r3, {r0, r1}
		    can_tx_func(hfdcan, 0x601,8,can_open_tx);
 800d1be:	f107 0314 	add.w	r3, r7, #20
 800d1c2:	2208      	movs	r2, #8
 800d1c4:	f240 6101 	movw	r1, #1537	; 0x601
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f7ff f9dd 	bl	800c588 <can_tx_func>
		    vTaskDelay(100);
 800d1ce:	2064      	movs	r0, #100	; 0x64
 800d1d0:	f7fb feb8 	bl	8008f44 <vTaskDelay>
		    motor_state_indication = 0xFF;
 800d1d4:	4b0e      	ldr	r3, [pc, #56]	; (800d210 <can_protocol_data_analyzing+0xa8>)
 800d1d6:	22ff      	movs	r2, #255	; 0xff
 800d1d8:	701a      	strb	r2, [r3, #0]
		}

		static char a=0;
		  LED_VD6(a^=1);
 800d1da:	4b0e      	ldr	r3, [pc, #56]	; (800d214 <can_protocol_data_analyzing+0xac>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	f083 0301 	eor.w	r3, r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <can_protocol_data_analyzing+0xac>)
 800d1e6:	701a      	strb	r2, [r3, #0]
 800d1e8:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <can_protocol_data_analyzing+0xac>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d1f2:	4809      	ldr	r0, [pc, #36]	; (800d218 <can_protocol_data_analyzing+0xb0>)
 800d1f4:	f7f5 fa4e 	bl	8002694 <HAL_GPIO_WritePin>
		return 0xFF;
 800d1f8:	23ff      	movs	r3, #255	; 0xff
 800d1fa:	e000      	b.n	800d1fe <can_protocol_data_analyzing+0x96>
	}
	else
		return 0;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3728      	adds	r7, #40	; 0x28
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	20003e65 	.word	0x20003e65
 800d20c:	0800e1f4 	.word	0x0800e1f4
 800d210:	20003e4b 	.word	0x20003e4b
 800d214:	20003e6c 	.word	0x20003e6c
 800d218:	58020800 	.word	0x58020800

0800d21c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d21c:	b5b0      	push	{r4, r5, r7, lr}
 800d21e:	b08c      	sub	sp, #48	; 0x30
 800d220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d222:	f7f3 f9ed 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d226:	f000 f84b 	bl	800d2c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d22a:	f000 fabb 	bl	800d7a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800d22e:	f000 fa99 	bl	800d764 <MX_DMA_Init>
  MX_USART6_UART_Init();
 800d232:	f000 fa5b 	bl	800d6ec <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800d236:	f000 fa21 	bl	800d67c <MX_TIM7_Init>
  MX_SPI3_Init();
 800d23a:	f000 f9c9 	bl	800d5d0 <MX_SPI3_Init>
  MX_FDCAN2_Init();
 800d23e:	f000 f91d 	bl	800d47c <MX_FDCAN2_Init>
  MX_IWDG1_Init();
 800d242:	f000 f9a7 	bl	800d594 <MX_IWDG1_Init>
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  xTimer_btn_timer = xTimerCreate("Btn timer", 2000, pdFALSE, (void*)0, vTimerCallback1);
 800d246:	4b17      	ldr	r3, [pc, #92]	; (800d2a4 <main+0x88>)
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	2300      	movs	r3, #0
 800d24c:	2200      	movs	r2, #0
 800d24e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d252:	4815      	ldr	r0, [pc, #84]	; (800d2a8 <main+0x8c>)
 800d254:	f7fc fcb0 	bl	8009bb8 <xTimerCreate>
 800d258:	4602      	mov	r2, r0
 800d25a:	4b14      	ldr	r3, [pc, #80]	; (800d2ac <main+0x90>)
 800d25c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of EthTask */
  osThreadDef(EthTask, EthernetTask_func, osPriorityNormal, 0, 2048);
 800d25e:	4b14      	ldr	r3, [pc, #80]	; (800d2b0 <main+0x94>)
 800d260:	f107 0414 	add.w	r4, r7, #20
 800d264:	461d      	mov	r5, r3
 800d266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	6023      	str	r3, [r4, #0]
  EthTaskHandle = osThreadCreate(osThread(EthTask), NULL);
 800d26e:	f107 0314 	add.w	r3, r7, #20
 800d272:	2100      	movs	r1, #0
 800d274:	4618      	mov	r0, r3
 800d276:	f7fa fac9 	bl	800780c <osThreadCreate>
 800d27a:	4602      	mov	r2, r0
 800d27c:	4b0d      	ldr	r3, [pc, #52]	; (800d2b4 <main+0x98>)
 800d27e:	601a      	str	r2, [r3, #0]

  /* definition and creation of DigIOTask */
  osThreadDef(DigIOTask, DigIOTask_func, osPriorityIdle, 0, 128);
 800d280:	4b0d      	ldr	r3, [pc, #52]	; (800d2b8 <main+0x9c>)
 800d282:	463c      	mov	r4, r7
 800d284:	461d      	mov	r5, r3
 800d286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d28a:	682b      	ldr	r3, [r5, #0]
 800d28c:	6023      	str	r3, [r4, #0]
  DigIOTaskHandle = osThreadCreate(osThread(DigIOTask), NULL);
 800d28e:	463b      	mov	r3, r7
 800d290:	2100      	movs	r1, #0
 800d292:	4618      	mov	r0, r3
 800d294:	f7fa faba 	bl	800780c <osThreadCreate>
 800d298:	4602      	mov	r2, r0
 800d29a:	4b08      	ldr	r3, [pc, #32]	; (800d2bc <main+0xa0>)
 800d29c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 800d29e:	f7fa faae 	bl	80077fe <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d2a2:	e7fe      	b.n	800d2a2 <main+0x86>
 800d2a4:	0800db6d 	.word	0x0800db6d
 800d2a8:	0800e1fc 	.word	0x0800e1fc
 800d2ac:	20003fc4 	.word	0x20003fc4
 800d2b0:	0800e210 	.word	0x0800e210
 800d2b4:	20003fc8 	.word	0x20003fc8
 800d2b8:	0800e230 	.word	0x0800e230
 800d2bc:	2000404c 	.word	0x2000404c

0800d2c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b0cc      	sub	sp, #304	; 0x130
 800d2c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d2c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800d2ca:	224c      	movs	r2, #76	; 0x4c
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 ff29 	bl	800e126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d2d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d2d8:	2220      	movs	r2, #32
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 ff22 	bl	800e126 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2e2:	f107 0308 	add.w	r3, r7, #8
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	23bc      	movs	r3, #188	; 0xbc
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	f000 ff1a 	bl	800e126 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800d2f2:	4a60      	ldr	r2, [pc, #384]	; (800d474 <SystemClock_Config+0x1b4>)
 800d2f4:	4b5f      	ldr	r3, [pc, #380]	; (800d474 <SystemClock_Config+0x1b4>)
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	f023 0304 	bic.w	r3, r3, #4
 800d2fc:	60d3      	str	r3, [r2, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800d2fe:	1d3b      	adds	r3, r7, #4
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	4a5b      	ldr	r2, [pc, #364]	; (800d474 <SystemClock_Config+0x1b4>)
 800d306:	4b5b      	ldr	r3, [pc, #364]	; (800d474 <SystemClock_Config+0x1b4>)
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d30e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d312:	6193      	str	r3, [r2, #24]
 800d314:	4b57      	ldr	r3, [pc, #348]	; (800d474 <SystemClock_Config+0x1b4>)
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800d31c:	1d3b      	adds	r3, r7, #4
 800d31e:	601a      	str	r2, [r3, #0]
 800d320:	1d3b      	adds	r3, r7, #4
 800d322:	681b      	ldr	r3, [r3, #0]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 800d324:	bf00      	nop
 800d326:	4b53      	ldr	r3, [pc, #332]	; (800d474 <SystemClock_Config+0x1b4>)
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d332:	d1f8      	bne.n	800d326 <SystemClock_Config+0x66>
  {
    
  }
  /**Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800d334:	4a50      	ldr	r2, [pc, #320]	; (800d478 <SystemClock_Config+0x1b8>)
 800d336:	4b50      	ldr	r3, [pc, #320]	; (800d478 <SystemClock_Config+0x1b8>)
 800d338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d33a:	f023 0303 	bic.w	r3, r3, #3
 800d33e:	f043 0302 	orr.w	r3, r3, #2
 800d342:	6293      	str	r3, [r2, #40]	; 0x28
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800d344:	2309      	movs	r3, #9
 800d346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d34a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d34e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d352:	2301      	movs	r3, #1
 800d354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d358:	2302      	movs	r3, #2
 800d35a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d35e:	2302      	movs	r3, #2
 800d360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800d364:	2305      	movs	r3, #5
 800d366:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 72;
 800d36a:	2348      	movs	r3, #72	; 0x48
 800d36c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 4;
 800d370:	2304      	movs	r3, #4
 800d372:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800d376:	2309      	movs	r3, #9
 800d378:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d37c:	2302      	movs	r3, #2
 800d37e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800d382:	2308      	movs	r3, #8
 800d384:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800d388:	2300      	movs	r3, #0
 800d38a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d394:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f5 fa0d 	bl	80027b8 <HAL_RCC_OscConfig>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800d3a4:	f000 fc5e 	bl	800dc64 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d3a8:	233f      	movs	r3, #63	; 0x3f
 800d3aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV8;
 800d3c0:	2360      	movs	r3, #96	; 0x60
 800d3c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800d3c6:	2340      	movs	r3, #64	; 0x40
 800d3c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 800d3cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d3d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV8;
 800d3d4:	2360      	movs	r3, #96	; 0x60
 800d3d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800d3da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d3de:	2101      	movs	r1, #1
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7f5 fd83 	bl	8002eec <HAL_RCC_ClockConfig>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d001      	beq.n	800d3f0 <SystemClock_Config+0x130>
  {
    Error_Handler();
 800d3ec:	f000 fc3a 	bl	800dc64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_FDCAN
 800d3f0:	f107 0308 	add.w	r3, r7, #8
 800d3f4:	f249 0201 	movw	r2, #36865	; 0x9001
 800d3f8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI3;
  PeriphClkInitStruct.PLL2.PLL2M = 20;
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	2214      	movs	r2, #20
 800d400:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 150;
 800d402:	f107 0308 	add.w	r3, r7, #8
 800d406:	2296      	movs	r2, #150	; 0x96
 800d408:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800d40a:	f107 0308 	add.w	r3, r7, #8
 800d40e:	2202      	movs	r2, #2
 800d410:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 30;
 800d412:	f107 0308 	add.w	r3, r7, #8
 800d416:	221e      	movs	r2, #30
 800d418:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800d41a:	f107 0308 	add.w	r3, r7, #8
 800d41e:	2202      	movs	r2, #2
 800d420:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	2200      	movs	r2, #0
 800d428:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	2220      	movs	r2, #32
 800d430:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	2200      	movs	r2, #0
 800d438:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800d43a:	f107 0308 	add.w	r3, r7, #8
 800d43e:	2200      	movs	r2, #0
 800d440:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800d442:	f107 0308 	add.w	r3, r7, #8
 800d446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44a:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 800d44c:	f107 0308 	add.w	r3, r7, #8
 800d450:	2208      	movs	r2, #8
 800d452:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d454:	f107 0308 	add.w	r3, r7, #8
 800d458:	4618      	mov	r0, r3
 800d45a:	f7f6 f86d 	bl	8003538 <HAL_RCCEx_PeriphCLKConfig>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <SystemClock_Config+0x1a8>
  {
    Error_Handler();
 800d464:	f000 fbfe 	bl	800dc64 <Error_Handler>
  }
}
 800d468:	bf00      	nop
 800d46a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	58024800 	.word	0x58024800
 800d478:	58024400 	.word	0x58024400

0800d47c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800d480:	4b42      	ldr	r3, [pc, #264]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d482:	4a43      	ldr	r2, [pc, #268]	; (800d590 <MX_FDCAN2_Init+0x114>)
 800d484:	601a      	str	r2, [r3, #0]
   hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800d486:	4b41      	ldr	r3, [pc, #260]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d488:	2200      	movs	r2, #0
 800d48a:	609a      	str	r2, [r3, #8]
   hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800d48c:	4b3f      	ldr	r3, [pc, #252]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d48e:	2200      	movs	r2, #0
 800d490:	60da      	str	r2, [r3, #12]
   hfdcan2.Init.AutoRetransmission = ENABLE;
 800d492:	4b3e      	ldr	r3, [pc, #248]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d494:	2201      	movs	r2, #1
 800d496:	741a      	strb	r2, [r3, #16]
   hfdcan2.Init.TransmitPause = DISABLE;
 800d498:	4b3c      	ldr	r3, [pc, #240]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d49a:	2200      	movs	r2, #0
 800d49c:	745a      	strb	r2, [r3, #17]
   hfdcan2.Init.NominalPrescaler = 4;
 800d49e:	4b3b      	ldr	r3, [pc, #236]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4a0:	2204      	movs	r2, #4
 800d4a2:	615a      	str	r2, [r3, #20]
   hfdcan2.Init.NominalSyncJumpWidth = 1;
 800d4a4:	4b39      	ldr	r3, [pc, #228]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	619a      	str	r2, [r3, #24]
   hfdcan2.Init.NominalTimeSeg1 = 13;
 800d4aa:	4b38      	ldr	r3, [pc, #224]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4ac:	220d      	movs	r2, #13
 800d4ae:	61da      	str	r2, [r3, #28]
   hfdcan2.Init.NominalTimeSeg2 = 2;
 800d4b0:	4b36      	ldr	r3, [pc, #216]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	621a      	str	r2, [r3, #32]
   hfdcan2.Init.DataPrescaler = 1;
 800d4b6:	4b35      	ldr	r3, [pc, #212]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	625a      	str	r2, [r3, #36]	; 0x24
   hfdcan2.Init.DataSyncJumpWidth = 1;
 800d4bc:	4b33      	ldr	r3, [pc, #204]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4be:	2201      	movs	r2, #1
 800d4c0:	629a      	str	r2, [r3, #40]	; 0x28
   hfdcan2.Init.DataTimeSeg1 = 1;
 800d4c2:	4b32      	ldr	r3, [pc, #200]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	62da      	str	r2, [r3, #44]	; 0x2c
   hfdcan2.Init.DataTimeSeg2 = 1;
 800d4c8:	4b30      	ldr	r3, [pc, #192]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	631a      	str	r2, [r3, #48]	; 0x30
   hfdcan2.Init.MessageRAMOffset = 0;
 800d4ce:	4b2f      	ldr	r3, [pc, #188]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	635a      	str	r2, [r3, #52]	; 0x34
   hfdcan2.Init.StdFiltersNbr = 3;
 800d4d4:	4b2d      	ldr	r3, [pc, #180]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4d6:	2203      	movs	r2, #3
 800d4d8:	639a      	str	r2, [r3, #56]	; 0x38
   hfdcan2.Init.ExtFiltersNbr = 0;
 800d4da:	4b2c      	ldr	r3, [pc, #176]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	63da      	str	r2, [r3, #60]	; 0x3c
   hfdcan2.Init.RxFifo0ElmtsNbr = 4;
 800d4e0:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4e2:	2204      	movs	r2, #4
 800d4e4:	641a      	str	r2, [r3, #64]	; 0x40
   hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800d4e6:	4b29      	ldr	r3, [pc, #164]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4e8:	2204      	movs	r2, #4
 800d4ea:	645a      	str	r2, [r3, #68]	; 0x44
   hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 800d4ec:	4b27      	ldr	r3, [pc, #156]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	649a      	str	r2, [r3, #72]	; 0x48
   hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800d4f2:	4b26      	ldr	r3, [pc, #152]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4f4:	2204      	movs	r2, #4
 800d4f6:	64da      	str	r2, [r3, #76]	; 0x4c
   hfdcan2.Init.RxBuffersNbr = 0;
 800d4f8:	4b24      	ldr	r3, [pc, #144]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	651a      	str	r2, [r3, #80]	; 0x50
   hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800d4fe:	4b23      	ldr	r3, [pc, #140]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d500:	2204      	movs	r2, #4
 800d502:	655a      	str	r2, [r3, #84]	; 0x54
   hfdcan2.Init.TxEventsNbr = 0;
 800d504:	4b21      	ldr	r3, [pc, #132]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d506:	2200      	movs	r2, #0
 800d508:	659a      	str	r2, [r3, #88]	; 0x58
   hfdcan2.Init.TxBuffersNbr = 5;
 800d50a:	4b20      	ldr	r3, [pc, #128]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d50c:	2205      	movs	r2, #5
 800d50e:	65da      	str	r2, [r3, #92]	; 0x5c
   hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800d510:	4b1e      	ldr	r3, [pc, #120]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d512:	2200      	movs	r2, #0
 800d514:	661a      	str	r2, [r3, #96]	; 0x60
   hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 800d516:	4b1d      	ldr	r3, [pc, #116]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d51c:	665a      	str	r2, [r3, #100]	; 0x64
   hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800d51e:	4b1b      	ldr	r3, [pc, #108]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d520:	2204      	movs	r2, #4
 800d522:	669a      	str	r2, [r3, #104]	; 0x68
   hfdcan2.msgRam.StandardFilterSA = 0;
 800d524:	4b19      	ldr	r3, [pc, #100]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d526:	2200      	movs	r2, #0
 800d528:	66da      	str	r2, [r3, #108]	; 0x6c
   hfdcan2.msgRam.ExtendedFilterSA = 0;
 800d52a:	4b18      	ldr	r3, [pc, #96]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	671a      	str	r2, [r3, #112]	; 0x70
   hfdcan2.msgRam.RxFIFO0SA = 0;
 800d530:	4b16      	ldr	r3, [pc, #88]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d532:	2200      	movs	r2, #0
 800d534:	675a      	str	r2, [r3, #116]	; 0x74
   hfdcan2.msgRam.RxFIFO1SA = 0;
 800d536:	4b15      	ldr	r3, [pc, #84]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d538:	2200      	movs	r2, #0
 800d53a:	679a      	str	r2, [r3, #120]	; 0x78
   hfdcan2.msgRam.RxBufferSA = 0;
 800d53c:	4b13      	ldr	r3, [pc, #76]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d53e:	2200      	movs	r2, #0
 800d540:	67da      	str	r2, [r3, #124]	; 0x7c
   hfdcan2.msgRam.TxEventFIFOSA = 0;
 800d542:	4b12      	ldr	r3, [pc, #72]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d544:	2200      	movs	r2, #0
 800d546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   hfdcan2.msgRam.TxBufferSA = 0;
 800d54a:	4b10      	ldr	r3, [pc, #64]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   hfdcan2.msgRam.TxFIFOQSA = 0;
 800d552:	4b0e      	ldr	r3, [pc, #56]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d554:	2200      	movs	r2, #0
 800d556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   hfdcan2.msgRam.TTMemorySA = 0;
 800d55a:	4b0c      	ldr	r3, [pc, #48]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   hfdcan2.msgRam.EndAddress = 0;
 800d562:	4b0a      	ldr	r3, [pc, #40]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d564:	2200      	movs	r2, #0
 800d566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   hfdcan2.ErrorCode = 0;
 800d56a:	4b08      	ldr	r3, [pc, #32]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800d572:	4806      	ldr	r0, [pc, #24]	; (800d58c <MX_FDCAN2_Init+0x110>)
 800d574:	f7f4 f844 	bl	8001600 <HAL_FDCAN_Init>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <MX_FDCAN2_Init+0x106>
   {
     Error_Handler();
 800d57e:	f000 fb71 	bl	800dc64 <Error_Handler>
   }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_Config(0);
 800d582:	2000      	movs	r0, #0
 800d584:	f000 faaa 	bl	800dadc <FDCAN_Config>
  /* USER CODE END FDCAN2_Init 2 */

}
 800d588:	bf00      	nop
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20004090 	.word	0x20004090
 800d590:	4000a400 	.word	0x4000a400

0800d594 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800d598:	4b0b      	ldr	r3, [pc, #44]	; (800d5c8 <MX_IWDG1_Init+0x34>)
 800d59a:	4a0c      	ldr	r2, [pc, #48]	; (800d5cc <MX_IWDG1_Init+0x38>)
 800d59c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;//8 - 1000ms 32 - 4060-4070ms
 800d59e:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <MX_IWDG1_Init+0x34>)
 800d5a0:	2203      	movs	r2, #3
 800d5a2:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 800d5a4:	4b08      	ldr	r3, [pc, #32]	; (800d5c8 <MX_IWDG1_Init+0x34>)
 800d5a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 800d5aa:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 800d5ac:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <MX_IWDG1_Init+0x34>)
 800d5ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 800d5b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 800d5b4:	4804      	ldr	r0, [pc, #16]	; (800d5c8 <MX_IWDG1_Init+0x34>)
 800d5b6:	f7f5 f8a9 	bl	800270c <HAL_IWDG_Init>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 800d5c0:	f000 fb50 	bl	800dc64 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */
  //hiwdg1.Init.Reload = 400;//~780ms! 64 presc
  /* USER CODE END IWDG1_Init 2 */

}
 800d5c4:	bf00      	nop
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20003eb4 	.word	0x20003eb4
 800d5cc:	58004800 	.word	0x58004800

0800d5d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800d5d4:	4b27      	ldr	r3, [pc, #156]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5d6:	4a28      	ldr	r2, [pc, #160]	; (800d678 <MX_SPI3_Init+0xa8>)
 800d5d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d5da:	4b26      	ldr	r3, [pc, #152]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800d5e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d5e2:	4b24      	ldr	r3, [pc, #144]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d5e8:	4b22      	ldr	r3, [pc, #136]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5ea:	2207      	movs	r2, #7
 800d5ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5ee:	4b21      	ldr	r3, [pc, #132]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d5f4:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d5fa:	4b1e      	ldr	r3, [pc, #120]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d5fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d600:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d602:	4b1c      	ldr	r3, [pc, #112]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d608:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d60a:	4b1a      	ldr	r3, [pc, #104]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d610:	4b18      	ldr	r3, [pc, #96]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d612:	2200      	movs	r2, #0
 800d614:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d616:	4b17      	ldr	r3, [pc, #92]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d618:	2200      	movs	r2, #0
 800d61a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800d61c:	4b15      	ldr	r3, [pc, #84]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d61e:	2207      	movs	r2, #7
 800d620:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d622:	4b14      	ldr	r3, [pc, #80]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d628:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d62a:	4b12      	ldr	r3, [pc, #72]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d630:	4b10      	ldr	r3, [pc, #64]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d632:	2200      	movs	r2, #0
 800d634:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d638:	2200      	movs	r2, #0
 800d63a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d63c:	4b0d      	ldr	r3, [pc, #52]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d63e:	2200      	movs	r2, #0
 800d640:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d642:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d644:	2200      	movs	r2, #0
 800d646:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d650:	2200      	movs	r2, #0
 800d652:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d654:	4b07      	ldr	r3, [pc, #28]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d656:	2200      	movs	r2, #0
 800d658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d65a:	4b06      	ldr	r3, [pc, #24]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d660:	4804      	ldr	r0, [pc, #16]	; (800d674 <MX_SPI3_Init+0xa4>)
 800d662:	f7f7 fa73 	bl	8004b4c <HAL_SPI_Init>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800d66c:	f000 fafa 	bl	800dc64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800d670:	bf00      	nop
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20003ec4 	.word	0x20003ec4
 800d678:	40003c00 	.word	0x40003c00

0800d67c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d682:	1d3b      	adds	r3, r7, #4
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	605a      	str	r2, [r3, #4]
 800d68a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800d68c:	4b15      	ldr	r3, [pc, #84]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d68e:	4a16      	ldr	r2, [pc, #88]	; (800d6e8 <MX_TIM7_Init+0x6c>)
 800d690:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2000;
 800d692:	4b14      	ldr	r3, [pc, #80]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d694:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d698:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d69a:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1500;
 800d6a0:	4b10      	ldr	r3, [pc, #64]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d6a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d6a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d6a8:	4b0e      	ldr	r3, [pc, #56]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800d6ae:	480d      	ldr	r0, [pc, #52]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d6b0:	f7f8 fcd3 	bl	800605a <HAL_TIM_Base_Init>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800d6ba:	f000 fad3 	bl	800dc64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800d6c6:	1d3b      	adds	r3, r7, #4
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4806      	ldr	r0, [pc, #24]	; (800d6e4 <MX_TIM7_Init+0x68>)
 800d6cc:	f7f8 fee2 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800d6d6:	f000 fac5 	bl	800dc64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800d6da:	bf00      	nop
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	20004050 	.word	0x20004050
 800d6e8:	40001400 	.word	0x40001400

0800d6ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800d6f0:	4b1a      	ldr	r3, [pc, #104]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d6f2:	4a1b      	ldr	r2, [pc, #108]	; (800d760 <MX_USART6_UART_Init+0x74>)
 800d6f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800d6f6:	4b19      	ldr	r3, [pc, #100]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d6f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d6fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d6fe:	4b17      	ldr	r3, [pc, #92]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d700:	2200      	movs	r2, #0
 800d702:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d704:	4b15      	ldr	r3, [pc, #84]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d706:	2200      	movs	r2, #0
 800d708:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d70a:	4b14      	ldr	r3, [pc, #80]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d710:	4b12      	ldr	r3, [pc, #72]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d712:	220c      	movs	r2, #12
 800d714:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d718:	2200      	movs	r2, #0
 800d71a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d71c:	4b0f      	ldr	r3, [pc, #60]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d71e:	2200      	movs	r2, #0
 800d720:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d722:	4b0e      	ldr	r3, [pc, #56]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d724:	2200      	movs	r2, #0
 800d726:	621a      	str	r2, [r3, #32]
  huart6.Init.Prescaler = UART_PRESCALER_DIV1;
 800d728:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 800d72e:	4b0b      	ldr	r3, [pc, #44]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d730:	2200      	movs	r2, #0
 800d732:	629a      	str	r2, [r3, #40]	; 0x28
  huart6.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 800d734:	4b09      	ldr	r3, [pc, #36]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d736:	2200      	movs	r2, #0
 800d738:	62da      	str	r2, [r3, #44]	; 0x2c
  huart6.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 800d73a:	4b08      	ldr	r3, [pc, #32]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	631a      	str	r2, [r3, #48]	; 0x30
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d740:	4b06      	ldr	r3, [pc, #24]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d742:	2200      	movs	r2, #0
 800d744:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800d746:	4805      	ldr	r0, [pc, #20]	; (800d75c <MX_USART6_UART_Init+0x70>)
 800d748:	f7f8 ff0c 	bl	8006564 <HAL_UART_Init>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800d752:	f000 fa87 	bl	800dc64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800d756:	bf00      	nop
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20003fcc 	.word	0x20003fcc
 800d760:	40011400 	.word	0x40011400

0800d764 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d76a:	4a0d      	ldr	r2, [pc, #52]	; (800d7a0 <MX_DMA_Init+0x3c>)
 800d76c:	4b0c      	ldr	r3, [pc, #48]	; (800d7a0 <MX_DMA_Init+0x3c>)
 800d76e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d772:	f043 0301 	orr.w	r3, r3, #1
 800d776:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <MX_DMA_Init+0x3c>)
 800d77c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	607b      	str	r3, [r7, #4]
 800d786:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800d788:	2200      	movs	r2, #0
 800d78a:	2105      	movs	r1, #5
 800d78c:	200b      	movs	r0, #11
 800d78e:	f7f3 f872 	bl	8000876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800d792:	200b      	movs	r0, #11
 800d794:	f7f3 f889 	bl	80008aa <HAL_NVIC_EnableIRQ>

}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	58024400 	.word	0x58024400

0800d7a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08c      	sub	sp, #48	; 0x30
 800d7a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7aa:	f107 031c 	add.w	r3, r7, #28
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	605a      	str	r2, [r3, #4]
 800d7b4:	609a      	str	r2, [r3, #8]
 800d7b6:	60da      	str	r2, [r3, #12]
 800d7b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d7ba:	4a7e      	ldr	r2, [pc, #504]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7bc:	4b7d      	ldr	r3, [pc, #500]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7c2:	f043 0304 	orr.w	r3, r3, #4
 800d7c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d7ca:	4b7a      	ldr	r3, [pc, #488]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7d0:	f003 0304 	and.w	r3, r3, #4
 800d7d4:	61bb      	str	r3, [r7, #24]
 800d7d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d7d8:	4a76      	ldr	r2, [pc, #472]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7da:	4b76      	ldr	r3, [pc, #472]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d7e8:	4b72      	ldr	r3, [pc, #456]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7f6:	4a6f      	ldr	r2, [pc, #444]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7f8:	4b6e      	ldr	r3, [pc, #440]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d7fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7fe:	f043 0301 	orr.w	r3, r3, #1
 800d802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d806:	4b6b      	ldr	r3, [pc, #428]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	613b      	str	r3, [r7, #16]
 800d812:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d814:	4a67      	ldr	r2, [pc, #412]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d816:	4b67      	ldr	r3, [pc, #412]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d81c:	f043 0302 	orr.w	r3, r3, #2
 800d820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d824:	4b63      	ldr	r3, [pc, #396]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d832:	4a60      	ldr	r2, [pc, #384]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d834:	4b5f      	ldr	r3, [pc, #380]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d83a:	f043 0310 	orr.w	r3, r3, #16
 800d83e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d842:	4b5c      	ldr	r3, [pc, #368]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	60bb      	str	r3, [r7, #8]
 800d84e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d850:	4a58      	ldr	r2, [pc, #352]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d852:	4b58      	ldr	r3, [pc, #352]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d858:	f043 0308 	orr.w	r3, r3, #8
 800d85c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d860:	4b54      	ldr	r3, [pc, #336]	; (800d9b4 <MX_GPIO_Init+0x210>)
 800d862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d866:	f003 0308 	and.w	r3, r3, #8
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800d86e:	2200      	movs	r2, #0
 800d870:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800d874:	4850      	ldr	r0, [pc, #320]	; (800d9b8 <MX_GPIO_Init+0x214>)
 800d876:	f7f4 ff0d 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800d87a:	2200      	movs	r2, #0
 800d87c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800d880:	484e      	ldr	r0, [pc, #312]	; (800d9bc <MX_GPIO_Init+0x218>)
 800d882:	f7f4 ff07 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800d886:	2200      	movs	r2, #0
 800d888:	2116      	movs	r1, #22
 800d88a:	484d      	ldr	r0, [pc, #308]	; (800d9c0 <MX_GPIO_Init+0x21c>)
 800d88c:	f7f4 ff02 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800d890:	2200      	movs	r2, #0
 800d892:	21c0      	movs	r1, #192	; 0xc0
 800d894:	484b      	ldr	r0, [pc, #300]	; (800d9c4 <MX_GPIO_Init+0x220>)
 800d896:	f7f4 fefd 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d89a:	23e0      	movs	r3, #224	; 0xe0
 800d89c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8a6:	f107 031c 	add.w	r3, r7, #28
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4846      	ldr	r0, [pc, #280]	; (800d9c8 <MX_GPIO_Init+0x224>)
 800d8ae:	f7f4 fd23 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800d8b2:	2330      	movs	r3, #48	; 0x30
 800d8b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8be:	f107 031c 	add.w	r3, r7, #28
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	483d      	ldr	r0, [pc, #244]	; (800d9bc <MX_GPIO_Init+0x218>)
 800d8c6:	f7f4 fd17 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800d8ca:	2307      	movs	r3, #7
 800d8cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8d6:	f107 031c 	add.w	r3, r7, #28
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4839      	ldr	r0, [pc, #228]	; (800d9c4 <MX_GPIO_Init+0x220>)
 800d8de:	f7f4 fd0b 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800d8e2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d8e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d8f4:	f107 031c 	add.w	r3, r7, #28
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	482f      	ldr	r0, [pc, #188]	; (800d9b8 <MX_GPIO_Init+0x214>)
 800d8fc:	f7f4 fcfc 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800d900:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d906:	2300      	movs	r3, #0
 800d908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d90a:	2300      	movs	r3, #0
 800d90c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d90e:	f107 031c 	add.w	r3, r7, #28
 800d912:	4619      	mov	r1, r3
 800d914:	4828      	ldr	r0, [pc, #160]	; (800d9b8 <MX_GPIO_Init+0x214>)
 800d916:	f7f4 fcef 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800d91a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d91e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d920:	2301      	movs	r3, #1
 800d922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d924:	2302      	movs	r3, #2
 800d926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d928:	2300      	movs	r3, #0
 800d92a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d92c:	f107 031c 	add.w	r3, r7, #28
 800d930:	4619      	mov	r1, r3
 800d932:	4822      	ldr	r0, [pc, #136]	; (800d9bc <MX_GPIO_Init+0x218>)
 800d934:	f7f4 fce0 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800d938:	2316      	movs	r3, #22
 800d93a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d93c:	2301      	movs	r3, #1
 800d93e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d940:	2302      	movs	r3, #2
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d944:	2300      	movs	r3, #0
 800d946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d948:	f107 031c 	add.w	r3, r7, #28
 800d94c:	4619      	mov	r1, r3
 800d94e:	481c      	ldr	r0, [pc, #112]	; (800d9c0 <MX_GPIO_Init+0x21c>)
 800d950:	f7f4 fcd2 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d954:	2380      	movs	r3, #128	; 0x80
 800d956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d958:	2300      	movs	r3, #0
 800d95a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d95c:	2302      	movs	r3, #2
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d960:	f107 031c 	add.w	r3, r7, #28
 800d964:	4619      	mov	r1, r3
 800d966:	4816      	ldr	r0, [pc, #88]	; (800d9c0 <MX_GPIO_Init+0x21c>)
 800d968:	f7f4 fcc6 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d96c:	2340      	movs	r3, #64	; 0x40
 800d96e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d970:	2301      	movs	r3, #1
 800d972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d974:	2302      	movs	r3, #2
 800d976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d978:	2302      	movs	r3, #2
 800d97a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d97c:	f107 031c 	add.w	r3, r7, #28
 800d980:	4619      	mov	r1, r3
 800d982:	4810      	ldr	r0, [pc, #64]	; (800d9c4 <MX_GPIO_Init+0x220>)
 800d984:	f7f4 fcb8 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d988:	2380      	movs	r3, #128	; 0x80
 800d98a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d98c:	2301      	movs	r3, #1
 800d98e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d990:	2300      	movs	r3, #0
 800d992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d994:	2300      	movs	r3, #0
 800d996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d998:	f107 031c 	add.w	r3, r7, #28
 800d99c:	4619      	mov	r1, r3
 800d99e:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <MX_GPIO_Init+0x220>)
 800d9a0:	f7f4 fcaa 	bl	80022f8 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 800d9a4:	2010      	movs	r0, #16
 800d9a6:	f7f4 fe8d 	bl	80026c4 <HAL_I2CEx_EnableFastModePlus>

}
 800d9aa:	bf00      	nop
 800d9ac:	3730      	adds	r7, #48	; 0x30
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	58024400 	.word	0x58024400
 800d9b8:	58021000 	.word	0x58021000
 800d9bc:	58020800 	.word	0x58020800
 800d9c0:	58020c00 	.word	0x58020c00
 800d9c4:	58020400 	.word	0x58020400
 800d9c8:	58020000 	.word	0x58020000

0800d9cc <check_adr_func>:

/* USER CODE BEGIN 4 */
uint32_t check_adr_func(){
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
	uint32_t address_buf=0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))//1
 800d9d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d9da:	481f      	ldr	r0, [pc, #124]	; (800da58 <check_adr_func+0x8c>)
 800d9dc:	f7f4 fe42 	bl	8002664 <HAL_GPIO_ReadPin>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <check_adr_func+0x22>
		address_buf |= 1;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f043 0301 	orr.w	r3, r3, #1
 800d9ec:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))//2
 800d9ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d9f2:	4819      	ldr	r0, [pc, #100]	; (800da58 <check_adr_func+0x8c>)
 800d9f4:	f7f4 fe36 	bl	8002664 <HAL_GPIO_ReadPin>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <check_adr_func+0x3a>
			address_buf |= 2;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f043 0302 	orr.w	r3, r3, #2
 800da04:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14))//3
 800da06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800da0a:	4813      	ldr	r0, [pc, #76]	; (800da58 <check_adr_func+0x8c>)
 800da0c:	f7f4 fe2a 	bl	8002664 <HAL_GPIO_ReadPin>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d003      	beq.n	800da1e <check_adr_func+0x52>
			address_buf |= 4;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f043 0304 	orr.w	r3, r3, #4
 800da1c:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15))//4
 800da1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da22:	480d      	ldr	r0, [pc, #52]	; (800da58 <check_adr_func+0x8c>)
 800da24:	f7f4 fe1e 	bl	8002664 <HAL_GPIO_ReadPin>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <check_adr_func+0x6a>
			address_buf |= 8;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f043 0308 	orr.w	r3, r3, #8
 800da34:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))//5
 800da36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800da3a:	4808      	ldr	r0, [pc, #32]	; (800da5c <check_adr_func+0x90>)
 800da3c:	f7f4 fe12 	bl	8002664 <HAL_GPIO_ReadPin>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <check_adr_func+0x82>
			address_buf |= 16;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f043 0310 	orr.w	r3, r3, #16
 800da4c:	607b      	str	r3, [r7, #4]
	/*if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))//6
			address_buf += 6;*/
	return address_buf;
 800da4e:	687b      	ldr	r3, [r7, #4]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	58021000 	.word	0x58021000
 800da5c:	58020400 	.word	0x58020400

0800da60 <can_tx_func>:

char can_tx_func(FDCAN_HandleTypeDef *hfdcan, unsigned int ID, uint32_t data_lenght, uint8_t *data, uint32_t can_buf_num)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08e      	sub	sp, #56	; 0x38
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
	/* Prepare Tx Header */
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = ID;
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800da72:	2300      	movs	r3, #0
 800da74:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800da76:	2300      	movs	r3, #0
 800da78:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = (data_lenght<<16);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	041b      	lsls	r3, r3, #16
 800da7e:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800da80:	2300      	movs	r3, #0
 800da82:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800da84:	2300      	movs	r3, #0
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800da88:	2300      	movs	r3, #0
 800da8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_TX_EVENT;
 800da8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800da90:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_FDCAN_AddMessageToTxBuffer(hfdcan, &TxHeader, data, can_buf_num);
 800da96:	f107 0114 	add.w	r1, r7, #20
 800da9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f7f4 f82e 	bl	8001b00 <HAL_FDCAN_AddMessageToTxBuffer>
	HAL_FDCAN_EnableTxBufferRequest(hfdcan, can_buf_num);
 800daa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f7f4 f889 	bl	8001bbe <HAL_FDCAN_EnableTxBufferRequest>
	static a=0;
	LED_VD6(a^=1);
 800daac:	4b09      	ldr	r3, [pc, #36]	; (800dad4 <can_tx_func+0x74>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f083 0301 	eor.w	r3, r3, #1
 800dab4:	4a07      	ldr	r2, [pc, #28]	; (800dad4 <can_tx_func+0x74>)
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	4b06      	ldr	r3, [pc, #24]	; (800dad4 <can_tx_func+0x74>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	461a      	mov	r2, r3
 800dac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dac4:	4804      	ldr	r0, [pc, #16]	; (800dad8 <can_tx_func+0x78>)
 800dac6:	f7f4 fde5 	bl	8002694 <HAL_GPIO_WritePin>
	  return 0xFF;
 800daca:	23ff      	movs	r3, #255	; 0xff
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3738      	adds	r7, #56	; 0x38
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20003e70 	.word	0x20003e70
 800dad8:	58020800 	.word	0x58020800

0800dadc <FDCAN_Config>:

void FDCAN_Config(uint32_t adr)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b094      	sub	sp, #80	; 0x50
 800dae0:	af02      	add	r7, sp, #8
 800dae2:	6078      	str	r0, [r7, #4]
  /* Configure Rx filter */
	FDCAN_FilterTypeDef sFilterConfig, sFilterConfig1;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800dae4:	2300      	movs	r3, #0
 800dae6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterIndex = 1;
 800dae8:	2301      	movs	r3, #1
 800daea:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800daec:	2302      	movs	r3, #2
 800daee:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800daf0:	2301      	movs	r3, #1
 800daf2:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterID1 = adr;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig.FilterID2 = 0x000;
 800daf8:	2300      	movs	r3, #0
 800dafa:	63fb      	str	r3, [r7, #60]	; 0x3c

	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 800dafc:	2300      	movs	r3, #0
 800dafe:	60bb      	str	r3, [r7, #8]
	sFilterConfig1.FilterIndex = 2;
 800db00:	2302      	movs	r3, #2
 800db02:	60fb      	str	r3, [r7, #12]
	sFilterConfig1.FilterType = FDCAN_FILTER_MASK;
 800db04:	2302      	movs	r3, #2
 800db06:	613b      	str	r3, [r7, #16]
	sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1_HP;
 800db08:	2306      	movs	r3, #6
 800db0a:	617b      	str	r3, [r7, #20]
	sFilterConfig1.FilterID1 = 0x080;
 800db0c:	2380      	movs	r3, #128	; 0x80
 800db0e:	61bb      	str	r3, [r7, #24]
	sFilterConfig1.FilterID2 = 0x0FF;
 800db10:	23ff      	movs	r3, #255	; 0xff
 800db12:	61fb      	str	r3, [r7, #28]
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
 800db14:	2300      	movs	r3, #0
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	2300      	movs	r3, #0
 800db1a:	2202      	movs	r2, #2
 800db1c:	2102      	movs	r1, #2
 800db1e:	4812      	ldr	r0, [pc, #72]	; (800db68 <FDCAN_Config+0x8c>)
 800db20:	f7f3 ff97 	bl	8001a52 <HAL_FDCAN_ConfigGlobalFilter>
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800db24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db28:	4619      	mov	r1, r3
 800db2a:	480f      	ldr	r0, [pc, #60]	; (800db68 <FDCAN_Config+0x8c>)
 800db2c:	f7f3 ff1a 	bl	8001964 <HAL_FDCAN_ConfigFilter>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <FDCAN_Config+0x5e>
	{
		Error_Handler();
 800db36:	f000 f895 	bl	800dc64 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig1) != HAL_OK)
 800db3a:	f107 0308 	add.w	r3, r7, #8
 800db3e:	4619      	mov	r1, r3
 800db40:	4809      	ldr	r0, [pc, #36]	; (800db68 <FDCAN_Config+0x8c>)
 800db42:	f7f3 ff0f 	bl	8001964 <HAL_FDCAN_ConfigFilter>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <FDCAN_Config+0x74>
	{
		/* Filter configuration Error */
		Error_Handler();
 800db4c:	f000 f88a 	bl	800dc64 <Error_Handler>
	}

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800db50:	4805      	ldr	r0, [pc, #20]	; (800db68 <FDCAN_Config+0x8c>)
 800db52:	f7f3 ffaa 	bl	8001aaa <HAL_FDCAN_Start>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <FDCAN_Config+0x84>
  {
    /* Start Error */
    Error_Handler();
 800db5c:	f000 f882 	bl	800dc64 <Error_Handler>
  }
}
 800db60:	bf00      	nop
 800db62:	3748      	adds	r7, #72	; 0x48
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	20004090 	.word	0x20004090

0800db6c <vTimerCallback1>:

void vTimerCallback1(TimerHandle_t Timer){
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	LED_VD7(SET);
 800db74:	2201      	movs	r2, #1
 800db76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800db7a:	4806      	ldr	r0, [pc, #24]	; (800db94 <vTimerCallback1+0x28>)
 800db7c:	f7f4 fd8a 	bl	8002694 <HAL_GPIO_WritePin>
	DIG_OUT3(RESET);//magnets for table
 800db80:	2200      	movs	r2, #0
 800db82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800db86:	4804      	ldr	r0, [pc, #16]	; (800db98 <vTimerCallback1+0x2c>)
 800db88:	f7f4 fd84 	bl	8002694 <HAL_GPIO_WritePin>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	58020800 	.word	0x58020800
 800db98:	58021000 	.word	0x58021000

0800db9c <DigIOTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DigIOTask_func */
void DigIOTask_func(void const * argument)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af02      	add	r7, sp, #8
 800dba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DigIOTask_func */
	XRAY_GEN_START(RESET);
 800dba4:	2200      	movs	r2, #0
 800dba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbaa:	482a      	ldr	r0, [pc, #168]	; (800dc54 <DigIOTask_func+0xb8>)
 800dbac:	f7f4 fd72 	bl	8002694 <HAL_GPIO_WritePin>
	MOTOR_STO_EN(SET);
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dbb6:	4827      	ldr	r0, [pc, #156]	; (800dc54 <DigIOTask_func+0xb8>)
 800dbb8:	f7f4 fd6c 	bl	8002694 <HAL_GPIO_WritePin>
	TABLE_MAGNETS(RESET);
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dbc2:	4824      	ldr	r0, [pc, #144]	; (800dc54 <DigIOTask_func+0xb8>)
 800dbc4:	f7f4 fd66 	bl	8002694 <HAL_GPIO_WritePin>
	vTaskDelay(150);
 800dbc8:	2096      	movs	r0, #150	; 0x96
 800dbca:	f7fb f9bb 	bl	8008f44 <vTaskDelay>
	int CAN_id = check_adr_func();
 800dbce:	f7ff fefd 	bl	800d9cc <check_adr_func>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	617b      	str	r3, [r7, #20]
	{
		uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 800dbd6:	4a20      	ldr	r2, [pc, #128]	; (800dc58 <DigIOTask_func+0xbc>)
 800dbd8:	f107 0308 	add.w	r3, r7, #8
 800dbdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbe0:	e883 0003 	stmia.w	r3, {r0, r1}
		buf[3] = (uint8_t)CAN_id;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	72fb      	strb	r3, [r7, #11]
		vTaskDelay(100);
 800dbea:	2064      	movs	r0, #100	; 0x64
 800dbec:	f7fb f9aa 	bl	8008f44 <vTaskDelay>
		can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER0);
 800dbf0:	f107 0208 	add.w	r2, r7, #8
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	2208      	movs	r2, #8
 800dbfc:	2180      	movs	r1, #128	; 0x80
 800dbfe:	4817      	ldr	r0, [pc, #92]	; (800dc5c <DigIOTask_func+0xc0>)
 800dc00:	f7ff ff2e 	bl	800da60 <can_tx_func>
		vTaskDelay(100);
 800dc04:	2064      	movs	r0, #100	; 0x64
 800dc06:	f7fb f99d 	bl	8008f44 <vTaskDelay>
		can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER0);
 800dc0a:	f107 0208 	add.w	r2, r7, #8
 800dc0e:	2301      	movs	r3, #1
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	4613      	mov	r3, r2
 800dc14:	2208      	movs	r2, #8
 800dc16:	2180      	movs	r1, #128	; 0x80
 800dc18:	4810      	ldr	r0, [pc, #64]	; (800dc5c <DigIOTask_func+0xc0>)
 800dc1a:	f7ff ff21 	bl	800da60 <can_tx_func>
	}
	LED_VD5(SET);
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc24:	480e      	ldr	r0, [pc, #56]	; (800dc60 <DigIOTask_func+0xc4>)
 800dc26:	f7f4 fd35 	bl	8002694 <HAL_GPIO_WritePin>
	LED_VD6(SET);
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc30:	480b      	ldr	r0, [pc, #44]	; (800dc60 <DigIOTask_func+0xc4>)
 800dc32:	f7f4 fd2f 	bl	8002694 <HAL_GPIO_WritePin>
	LED_VD7(SET);
 800dc36:	2201      	movs	r2, #1
 800dc38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc3c:	4808      	ldr	r0, [pc, #32]	; (800dc60 <DigIOTask_func+0xc4>)
 800dc3e:	f7f4 fd29 	bl	8002694 <HAL_GPIO_WritePin>


	//timer creating
	uint8_t prev_btn_state = 0, btn_press_val = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	74fb      	strb	r3, [r7, #19]
 800dc46:	2300      	movs	r3, #0
 800dc48:	74bb      	strb	r3, [r7, #18]
	  }

	  /*if(INTERLOCKS_STATE == 0)
		  XRAY_GEN_START(RESET);*/

	  vTaskDelay(3);
 800dc4a:	2003      	movs	r0, #3
 800dc4c:	f7fb f97a 	bl	8008f44 <vTaskDelay>
      if(0)
 800dc50:	e7fb      	b.n	800dc4a <DigIOTask_func+0xae>
 800dc52:	bf00      	nop
 800dc54:	58021000 	.word	0x58021000
 800dc58:	0800e244 	.word	0x0800e244
 800dc5c:	20004090 	.word	0x20004090
 800dc60:	58020800 	.word	0x58020800

0800dc64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dc64:	b480      	push	{r7}
 800dc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while(1);
 800dc68:	e7fe      	b.n	800dc68 <Error_Handler+0x4>
	...

0800dc6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dc72:	4a0c      	ldr	r2, [pc, #48]	; (800dca4 <HAL_MspInit+0x38>)
 800dc74:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <HAL_MspInit+0x38>)
 800dc76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dc7a:	f043 0302 	orr.w	r3, r3, #2
 800dc7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800dc82:	4b08      	ldr	r3, [pc, #32]	; (800dca4 <HAL_MspInit+0x38>)
 800dc84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	607b      	str	r3, [r7, #4]
 800dc8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800dc90:	2200      	movs	r2, #0
 800dc92:	210f      	movs	r1, #15
 800dc94:	f06f 0001 	mvn.w	r0, #1
 800dc98:	f7f2 fded 	bl	8000876 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	58024400 	.word	0x58024400

0800dca8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08a      	sub	sp, #40	; 0x28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcb0:	f107 0314 	add.w	r3, r7, #20
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	605a      	str	r2, [r3, #4]
 800dcba:	609a      	str	r2, [r3, #8]
 800dcbc:	60da      	str	r2, [r3, #12]
 800dcbe:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN2)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a1a      	ldr	r2, [pc, #104]	; (800dd30 <HAL_FDCAN_MspInit+0x88>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d12e      	bne.n	800dd28 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800dcca:	4a1a      	ldr	r2, [pc, #104]	; (800dd34 <HAL_FDCAN_MspInit+0x8c>)
 800dccc:	4b19      	ldr	r3, [pc, #100]	; (800dd34 <HAL_FDCAN_MspInit+0x8c>)
 800dcce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800dcd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcd6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800dcda:	4b16      	ldr	r3, [pc, #88]	; (800dd34 <HAL_FDCAN_MspInit+0x8c>)
 800dcdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800dce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dce4:	613b      	str	r3, [r7, #16]
 800dce6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dce8:	4a12      	ldr	r2, [pc, #72]	; (800dd34 <HAL_FDCAN_MspInit+0x8c>)
 800dcea:	4b12      	ldr	r3, [pc, #72]	; (800dd34 <HAL_FDCAN_MspInit+0x8c>)
 800dcec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcf0:	f043 0302 	orr.w	r3, r3, #2
 800dcf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <HAL_FDCAN_MspInit+0x8c>)
 800dcfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcfe:	f003 0302 	and.w	r3, r3, #2
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration    
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800dd06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800dd0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd14:	2300      	movs	r3, #0
 800dd16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800dd18:	2309      	movs	r3, #9
 800dd1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd1c:	f107 0314 	add.w	r3, r7, #20
 800dd20:	4619      	mov	r1, r3
 800dd22:	4805      	ldr	r0, [pc, #20]	; (800dd38 <HAL_FDCAN_MspInit+0x90>)
 800dd24:	f7f4 fae8 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800dd28:	bf00      	nop
 800dd2a:	3728      	adds	r7, #40	; 0x28
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	4000a400 	.word	0x4000a400
 800dd34:	58024400 	.word	0x58024400
 800dd38:	58020400 	.word	0x58020400

0800dd3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08a      	sub	sp, #40	; 0x28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd44:	f107 0314 	add.w	r3, r7, #20
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	605a      	str	r2, [r3, #4]
 800dd4e:	609a      	str	r2, [r3, #8]
 800dd50:	60da      	str	r2, [r3, #12]
 800dd52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a3c      	ldr	r2, [pc, #240]	; (800de4c <HAL_SPI_MspInit+0x110>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d172      	bne.n	800de44 <HAL_SPI_MspInit+0x108>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800dd5e:	4a3c      	ldr	r2, [pc, #240]	; (800de50 <HAL_SPI_MspInit+0x114>)
 800dd60:	4b3b      	ldr	r3, [pc, #236]	; (800de50 <HAL_SPI_MspInit+0x114>)
 800dd62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dd6e:	4b38      	ldr	r3, [pc, #224]	; (800de50 <HAL_SPI_MspInit+0x114>)
 800dd70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd78:	613b      	str	r3, [r7, #16]
 800dd7a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd7c:	4a34      	ldr	r2, [pc, #208]	; (800de50 <HAL_SPI_MspInit+0x114>)
 800dd7e:	4b34      	ldr	r3, [pc, #208]	; (800de50 <HAL_SPI_MspInit+0x114>)
 800dd80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd84:	f043 0302 	orr.w	r3, r3, #2
 800dd88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dd8c:	4b30      	ldr	r3, [pc, #192]	; (800de50 <HAL_SPI_MspInit+0x114>)
 800dd8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd92:	f003 0302 	and.w	r3, r3, #2
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800dd9a:	2318      	movs	r3, #24
 800dd9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd9e:	2302      	movs	r3, #2
 800dda0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dda2:	2302      	movs	r3, #2
 800dda4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dda6:	2303      	movs	r3, #3
 800dda8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ddaa:	2306      	movs	r3, #6
 800ddac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ddae:	f107 0314 	add.w	r3, r7, #20
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	4827      	ldr	r0, [pc, #156]	; (800de54 <HAL_SPI_MspInit+0x118>)
 800ddb6:	f7f4 fa9f 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ddba:	2320      	movs	r3, #32
 800ddbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800ddca:	2307      	movs	r3, #7
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ddce:	f107 0314 	add.w	r3, r7, #20
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	481f      	ldr	r0, [pc, #124]	; (800de54 <HAL_SPI_MspInit+0x118>)
 800ddd6:	f7f4 fa8f 	bl	80022f8 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 800ddda:	4b1f      	ldr	r3, [pc, #124]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800dddc:	4a1f      	ldr	r2, [pc, #124]	; (800de5c <HAL_SPI_MspInit+0x120>)
 800ddde:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800dde0:	4b1d      	ldr	r3, [pc, #116]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800dde2:	223e      	movs	r2, #62	; 0x3e
 800dde4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dde6:	4b1c      	ldr	r3, [pc, #112]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800dde8:	2240      	movs	r2, #64	; 0x40
 800ddea:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ddec:	4b1a      	ldr	r3, [pc, #104]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ddf2:	4b19      	ldr	r3, [pc, #100]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800ddf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ddf8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ddfa:	4b17      	ldr	r3, [pc, #92]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800de00:	4b15      	ldr	r3, [pc, #84]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de02:	2200      	movs	r2, #0
 800de04:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800de06:	4b14      	ldr	r3, [pc, #80]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de08:	2200      	movs	r2, #0
 800de0a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800de0c:	4b12      	ldr	r3, [pc, #72]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de0e:	2200      	movs	r2, #0
 800de10:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800de12:	4b11      	ldr	r3, [pc, #68]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de14:	2200      	movs	r2, #0
 800de16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800de18:	480f      	ldr	r0, [pc, #60]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de1a:	f7f2 fd61 	bl	80008e0 <HAL_DMA_Init>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 800de24:	f7ff ff1e 	bl	800dc64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a0b      	ldr	r2, [pc, #44]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de2c:	679a      	str	r2, [r3, #120]	; 0x78
 800de2e:	4a0a      	ldr	r2, [pc, #40]	; (800de58 <HAL_SPI_MspInit+0x11c>)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800de34:	2200      	movs	r2, #0
 800de36:	2105      	movs	r1, #5
 800de38:	2033      	movs	r0, #51	; 0x33
 800de3a:	f7f2 fd1c 	bl	8000876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800de3e:	2033      	movs	r0, #51	; 0x33
 800de40:	f7f2 fd33 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800de44:	bf00      	nop
 800de46:	3728      	adds	r7, #40	; 0x28
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	40003c00 	.word	0x40003c00
 800de50:	58024400 	.word	0x58024400
 800de54:	58020400 	.word	0x58020400
 800de58:	20003f4c 	.word	0x20003f4c
 800de5c:	40020010 	.word	0x40020010

0800de60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM7)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a0e      	ldr	r2, [pc, #56]	; (800dea8 <HAL_TIM_Base_MspInit+0x48>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d116      	bne.n	800dea0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800de72:	4a0e      	ldr	r2, [pc, #56]	; (800deac <HAL_TIM_Base_MspInit+0x4c>)
 800de74:	4b0d      	ldr	r3, [pc, #52]	; (800deac <HAL_TIM_Base_MspInit+0x4c>)
 800de76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800de7a:	f043 0320 	orr.w	r3, r3, #32
 800de7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800de82:	4b0a      	ldr	r3, [pc, #40]	; (800deac <HAL_TIM_Base_MspInit+0x4c>)
 800de84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800de88:	f003 0320 	and.w	r3, r3, #32
 800de8c:	60fb      	str	r3, [r7, #12]
 800de8e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800de90:	2200      	movs	r2, #0
 800de92:	2105      	movs	r1, #5
 800de94:	2037      	movs	r0, #55	; 0x37
 800de96:	f7f2 fcee 	bl	8000876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800de9a:	2037      	movs	r0, #55	; 0x37
 800de9c:	f7f2 fd05 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800dea0:	bf00      	nop
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	40001400 	.word	0x40001400
 800deac:	58024400 	.word	0x58024400

0800deb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b08a      	sub	sp, #40	; 0x28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800deb8:	f107 0314 	add.w	r3, r7, #20
 800debc:	2200      	movs	r2, #0
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	605a      	str	r2, [r3, #4]
 800dec2:	609a      	str	r2, [r3, #8]
 800dec4:	60da      	str	r2, [r3, #12]
 800dec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a1a      	ldr	r2, [pc, #104]	; (800df38 <HAL_UART_MspInit+0x88>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d12d      	bne.n	800df2e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800ded2:	4a1a      	ldr	r2, [pc, #104]	; (800df3c <HAL_UART_MspInit+0x8c>)
 800ded4:	4b19      	ldr	r3, [pc, #100]	; (800df3c <HAL_UART_MspInit+0x8c>)
 800ded6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800deda:	f043 0320 	orr.w	r3, r3, #32
 800dede:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800dee2:	4b16      	ldr	r3, [pc, #88]	; (800df3c <HAL_UART_MspInit+0x8c>)
 800dee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dee8:	f003 0320 	and.w	r3, r3, #32
 800deec:	613b      	str	r3, [r7, #16]
 800deee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800def0:	4a12      	ldr	r2, [pc, #72]	; (800df3c <HAL_UART_MspInit+0x8c>)
 800def2:	4b12      	ldr	r3, [pc, #72]	; (800df3c <HAL_UART_MspInit+0x8c>)
 800def4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800def8:	f043 0304 	orr.w	r3, r3, #4
 800defc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800df00:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <HAL_UART_MspInit+0x8c>)
 800df02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df06:	f003 0304 	and.w	r3, r3, #4
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800df0e:	23c0      	movs	r3, #192	; 0xc0
 800df10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df12:	2302      	movs	r3, #2
 800df14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df16:	2300      	movs	r3, #0
 800df18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df1a:	2300      	movs	r3, #0
 800df1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800df1e:	2307      	movs	r3, #7
 800df20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df22:	f107 0314 	add.w	r3, r7, #20
 800df26:	4619      	mov	r1, r3
 800df28:	4805      	ldr	r0, [pc, #20]	; (800df40 <HAL_UART_MspInit+0x90>)
 800df2a:	f7f4 f9e5 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800df2e:	bf00      	nop
 800df30:	3728      	adds	r7, #40	; 0x28
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	40011400 	.word	0x40011400
 800df3c:	58024400 	.word	0x58024400
 800df40:	58020800 	.word	0x58020800

0800df44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800df52:	b480      	push	{r7}
 800df54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800df56:	e7fe      	b.n	800df56 <HardFault_Handler+0x4>

0800df58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800df58:	b480      	push	{r7}
 800df5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800df5c:	e7fe      	b.n	800df5c <MemManage_Handler+0x4>

0800df5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800df5e:	b480      	push	{r7}
 800df60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800df62:	e7fe      	b.n	800df62 <BusFault_Handler+0x4>

0800df64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800df68:	e7fe      	b.n	800df68 <UsageFault_Handler+0x4>

0800df6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800df6a:	b480      	push	{r7}
 800df6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800df6e:	bf00      	nop
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800df7c:	f7f2 fb82 	bl	8000684 <HAL_IncTick>
  osSystickHandler();
 800df80:	f7f9 fc6b 	bl	800785a <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800df84:	bf00      	nop
 800df86:	bd80      	pop	{r7, pc}

0800df88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800df8c:	4802      	ldr	r0, [pc, #8]	; (800df98 <DMA1_Stream0_IRQHandler+0x10>)
 800df8e:	f7f2 fed1 	bl	8000d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800df92:	bf00      	nop
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20003f4c 	.word	0x20003f4c

0800df9c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800dfa0:	4802      	ldr	r0, [pc, #8]	; (800dfac <SPI3_IRQHandler+0x10>)
 800dfa2:	f7f7 fd8b 	bl	8005abc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800dfa6:	bf00      	nop
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	20003ec4 	.word	0x20003ec4

0800dfb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800dfb4:	4802      	ldr	r0, [pc, #8]	; (800dfc0 <TIM7_IRQHandler+0x10>)
 800dfb6:	f7f8 f87b 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800dfba:	bf00      	nop
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20004050 	.word	0x20004050

0800dfc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dfc8:	4a26      	ldr	r2, [pc, #152]	; (800e064 <SystemInit+0xa0>)
 800dfca:	4b26      	ldr	r3, [pc, #152]	; (800e064 <SystemInit+0xa0>)
 800dfcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dfd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800dfd8:	4a23      	ldr	r2, [pc, #140]	; (800e068 <SystemInit+0xa4>)
 800dfda:	4b23      	ldr	r3, [pc, #140]	; (800e068 <SystemInit+0xa4>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f043 0301 	orr.w	r3, r3, #1
 800dfe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dfe4:	4b20      	ldr	r3, [pc, #128]	; (800e068 <SystemInit+0xa4>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800dfea:	491f      	ldr	r1, [pc, #124]	; (800e068 <SystemInit+0xa4>)
 800dfec:	4b1e      	ldr	r3, [pc, #120]	; (800e068 <SystemInit+0xa4>)
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	4b1e      	ldr	r3, [pc, #120]	; (800e06c <SystemInit+0xa8>)
 800dff2:	4013      	ands	r3, r2
 800dff4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800dff6:	4b1c      	ldr	r3, [pc, #112]	; (800e068 <SystemInit+0xa4>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800dffc:	4b1a      	ldr	r3, [pc, #104]	; (800e068 <SystemInit+0xa4>)
 800dffe:	2200      	movs	r2, #0
 800e000:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e002:	4b19      	ldr	r3, [pc, #100]	; (800e068 <SystemInit+0xa4>)
 800e004:	2200      	movs	r2, #0
 800e006:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800e008:	4b17      	ldr	r3, [pc, #92]	; (800e068 <SystemInit+0xa4>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800e00e:	4b16      	ldr	r3, [pc, #88]	; (800e068 <SystemInit+0xa4>)
 800e010:	2200      	movs	r2, #0
 800e012:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800e014:	4b14      	ldr	r3, [pc, #80]	; (800e068 <SystemInit+0xa4>)
 800e016:	2200      	movs	r2, #0
 800e018:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e01a:	4b13      	ldr	r3, [pc, #76]	; (800e068 <SystemInit+0xa4>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800e020:	4b11      	ldr	r3, [pc, #68]	; (800e068 <SystemInit+0xa4>)
 800e022:	2200      	movs	r2, #0
 800e024:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e026:	4b10      	ldr	r3, [pc, #64]	; (800e068 <SystemInit+0xa4>)
 800e028:	2200      	movs	r2, #0
 800e02a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800e02c:	4b0e      	ldr	r3, [pc, #56]	; (800e068 <SystemInit+0xa4>)
 800e02e:	2200      	movs	r2, #0
 800e030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e032:	4b0d      	ldr	r3, [pc, #52]	; (800e068 <SystemInit+0xa4>)
 800e034:	2200      	movs	r2, #0
 800e036:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e038:	4a0b      	ldr	r2, [pc, #44]	; (800e068 <SystemInit+0xa4>)
 800e03a:	4b0b      	ldr	r3, [pc, #44]	; (800e068 <SystemInit+0xa4>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e042:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e044:	4b08      	ldr	r3, [pc, #32]	; (800e068 <SystemInit+0xa4>)
 800e046:	2200      	movs	r2, #0
 800e048:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 800e04a:	4b09      	ldr	r3, [pc, #36]	; (800e070 <SystemInit+0xac>)
 800e04c:	2201      	movs	r2, #1
 800e04e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <SystemInit+0xa0>)
 800e052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e056:	609a      	str	r2, [r3, #8]
#endif

}
 800e058:	bf00      	nop
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop
 800e064:	e000ed00 	.word	0xe000ed00
 800e068:	58024400 	.word	0x58024400
 800e06c:	eaf6ed7f 	.word	0xeaf6ed7f
 800e070:	51008108 	.word	0x51008108

0800e074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e074:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e0ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e07a:	e003      	b.n	800e084 <LoopCopyDataInit>

0800e07c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e07c:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e07e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e082:	3104      	adds	r1, #4

0800e084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e084:	480b      	ldr	r0, [pc, #44]	; (800e0b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e086:	4b0c      	ldr	r3, [pc, #48]	; (800e0b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e08a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e08c:	d3f6      	bcc.n	800e07c <CopyDataInit>
  ldr  r2, =_sbss
 800e08e:	4a0b      	ldr	r2, [pc, #44]	; (800e0bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e090:	e002      	b.n	800e098 <LoopFillZerobss>

0800e092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e094:	f842 3b04 	str.w	r3, [r2], #4

0800e098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e098:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e09a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e09c:	d3f9      	bcc.n	800e092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e09e:	f7ff ff91 	bl	800dfc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e0a2:	f000 f811 	bl	800e0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e0a6:	f7ff f8b9 	bl	800d21c <main>
  bx  lr    
 800e0aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e0ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e0b0:	0800e2b0 	.word	0x0800e2b0
  ldr  r0, =_sdata
 800e0b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e0b8:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 800e0bc:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 800e0c0:	2000412c 	.word	0x2000412c

0800e0c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e0c4:	e7fe      	b.n	800e0c4 <ADC3_IRQHandler>
	...

0800e0c8 <__libc_init_array>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	4e0d      	ldr	r6, [pc, #52]	; (800e100 <__libc_init_array+0x38>)
 800e0cc:	4c0d      	ldr	r4, [pc, #52]	; (800e104 <__libc_init_array+0x3c>)
 800e0ce:	1ba4      	subs	r4, r4, r6
 800e0d0:	10a4      	asrs	r4, r4, #2
 800e0d2:	2500      	movs	r5, #0
 800e0d4:	42a5      	cmp	r5, r4
 800e0d6:	d109      	bne.n	800e0ec <__libc_init_array+0x24>
 800e0d8:	4e0b      	ldr	r6, [pc, #44]	; (800e108 <__libc_init_array+0x40>)
 800e0da:	4c0c      	ldr	r4, [pc, #48]	; (800e10c <__libc_init_array+0x44>)
 800e0dc:	f000 f82c 	bl	800e138 <_init>
 800e0e0:	1ba4      	subs	r4, r4, r6
 800e0e2:	10a4      	asrs	r4, r4, #2
 800e0e4:	2500      	movs	r5, #0
 800e0e6:	42a5      	cmp	r5, r4
 800e0e8:	d105      	bne.n	800e0f6 <__libc_init_array+0x2e>
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e0f0:	4798      	blx	r3
 800e0f2:	3501      	adds	r5, #1
 800e0f4:	e7ee      	b.n	800e0d4 <__libc_init_array+0xc>
 800e0f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e0fa:	4798      	blx	r3
 800e0fc:	3501      	adds	r5, #1
 800e0fe:	e7f2      	b.n	800e0e6 <__libc_init_array+0x1e>
 800e100:	0800e2a8 	.word	0x0800e2a8
 800e104:	0800e2a8 	.word	0x0800e2a8
 800e108:	0800e2a8 	.word	0x0800e2a8
 800e10c:	0800e2ac 	.word	0x0800e2ac

0800e110 <memcpy>:
 800e110:	b510      	push	{r4, lr}
 800e112:	1e43      	subs	r3, r0, #1
 800e114:	440a      	add	r2, r1
 800e116:	4291      	cmp	r1, r2
 800e118:	d100      	bne.n	800e11c <memcpy+0xc>
 800e11a:	bd10      	pop	{r4, pc}
 800e11c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e120:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e124:	e7f7      	b.n	800e116 <memcpy+0x6>

0800e126 <memset>:
 800e126:	4402      	add	r2, r0
 800e128:	4603      	mov	r3, r0
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d100      	bne.n	800e130 <memset+0xa>
 800e12e:	4770      	bx	lr
 800e130:	f803 1b01 	strb.w	r1, [r3], #1
 800e134:	e7f9      	b.n	800e12a <memset+0x4>
	...

0800e138 <_init>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	bf00      	nop
 800e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13e:	bc08      	pop	{r3}
 800e140:	469e      	mov	lr, r3
 800e142:	4770      	bx	lr

0800e144 <_fini>:
 800e144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e146:	bf00      	nop
 800e148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e14a:	bc08      	pop	{r3}
 800e14c:	469e      	mov	lr, r3
 800e14e:	4770      	bx	lr
