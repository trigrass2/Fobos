
Fobos_master_brd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008250  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080084f0  080084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08008640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000432c  20000070  080086b0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000439c  080086b0  0002439c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003819c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000618d  00000000  00000000  0005823a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000149c6  00000000  00000000  0005e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017b8  00000000  00000000  00072d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002108  00000000  00000000  00074548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000dbc2  00000000  00000000  00076650  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000ac9d  00000000  00000000  00084212  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008eeaf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004614  00000000  00000000  0008ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000070 	.word	0x20000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080084d8 	.word	0x080084d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000074 	.word	0x20000074
 80002dc:	080084d8 	.word	0x080084d8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f890 	bl	800073c <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f840 	bl	80006b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000068 	.word	0x20000068
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_Init>:
{
 8000648:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f81e 	bl	800068c <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000650:	200f      	movs	r0, #15
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
 8000656:	4604      	mov	r4, r0
 8000658:	b918      	cbnz	r0, 8000662 <HAL_Init+0x1a>
  HAL_MspInit();
 800065a:	f007 fd73 	bl	8008144 <HAL_MspInit>
}
 800065e:	4620      	mov	r0, r4
 8000660:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000662:	2401      	movs	r4, #1
 8000664:	e7fb      	b.n	800065e <HAL_Init+0x16>
	...

08000668 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <HAL_IncTick+0x10>)
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <HAL_IncTick+0x14>)
 800066c:	6811      	ldr	r1, [r2, #0]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	440b      	add	r3, r1
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2000008c 	.word	0x2000008c
 800067c:	20000000 	.word	0x20000000

08000680 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000680:	4b01      	ldr	r3, [pc, #4]	; (8000688 <HAL_GetTick+0x8>)
 8000682:	6818      	ldr	r0, [r3, #0]
}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000008c 	.word	0x2000008c

0800068c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800068e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000692:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000696:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	0c1b      	lsrs	r3, r3, #16
 800069e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006a8:	60d3      	str	r3, [r2, #12]
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	68dc      	ldr	r4, [r3, #12]
 80006b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	bf28      	it	cs
 80006c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006cc:	bf8c      	ite	hi
 80006ce:	3c03      	subhi	r4, #3
 80006d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80006dc:	ea01 0103 	and.w	r1, r1, r3
 80006e0:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	fa05 f404 	lsl.w	r4, r5, r4
 80006e8:	f104 34ff 	add.w	r4, r4, #4294967295
 80006ec:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	ea42 0201 	orr.w	r2, r2, r1
 80006f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006f8:	db07      	blt.n	800070a <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000704:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000708:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	f000 000f 	and.w	r0, r0, #15
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_NVIC_SetPriority+0x6c>)
 8000712:	541a      	strb	r2, [r3, r0]
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00
 800071c:	e000ed14 	.word	0xe000ed14

08000720 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000720:	2800      	cmp	r0, #0
 8000722:	db08      	blt.n	8000736 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000724:	0942      	lsrs	r2, r0, #5
 8000726:	2301      	movs	r3, #1
 8000728:	f000 001f 	and.w	r0, r0, #31
 800072c:	fa03 f000 	lsl.w	r0, r3, r0
 8000730:	4b01      	ldr	r3, [pc, #4]	; (8000738 <HAL_NVIC_EnableIRQ+0x18>)
 8000732:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100

0800073c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	3801      	subs	r0, #1
 800073e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000742:	d20a      	bcs.n	800075a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	21f0      	movs	r1, #240	; 0xf0
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	6803      	ldr	r3, [r0, #0]
 800076a:	2118      	movs	r1, #24
 800076c:	b2da      	uxtb	r2, r3
 800076e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000772:	3a10      	subs	r2, #16
 8000774:	f023 0303 	bic.w	r3, r3, #3
 8000778:	fbb2 f2f1 	udiv	r2, r2, r1

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077c:	4904      	ldr	r1, [pc, #16]	; (8000790 <DMA_CalcBaseAndBitshift+0x28>)

  if (stream_number > 3U)
 800077e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000780:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000782:	bf88      	it	hi
 8000784:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000786:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000788:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800078a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	08008530 	.word	0x08008530

08000794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = 0U;
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
 8000794:	6801      	ldr	r1, [r0, #0]

  if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000798:	440b      	add	r3, r1
 800079a:	2b8c      	cmp	r3, #140	; 0x8c
 800079c:	b2cb      	uxtb	r3, r1
 800079e:	d810      	bhi.n	80007c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2e>
     (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
  {
    /*BDMA Channels are connected to DMAMUX2 channels*/
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80007a0:	2214      	movs	r2, #20
 80007a2:	3b08      	subs	r3, #8
 80007a4:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80007a8:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 80007ac:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80007b4:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
     (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80007b6:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1U << stream_number;
 80007b8:	2201      	movs	r2, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	6683      	str	r3, [r0, #104]	; 0x68
 80007c0:	4770      	bx	lr
    stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007c2:	2218      	movs	r2, #24
 80007c4:	3b10      	subs	r3, #16
 80007c6:	fbb3 f3f2 	udiv	r3, r3, r2
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80007cc:	440a      	add	r2, r1
 80007ce:	2aa8      	cmp	r2, #168	; 0xa8
      stream_number += 8U;
 80007d0:	bf98      	it	ls
 80007d2:	3308      	addls	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80007d4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 80007d8:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80007e2:	e7e8      	b.n	80007b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x22>
 80007e4:	a7fdabf8 	.word	0xa7fdabf8
 80007e8:	58025880 	.word	0x58025880
 80007ec:	bffdfbf0 	.word	0xbffdfbf0
 80007f0:	40020880 	.word	0x40020880

080007f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_baseaddress = (uint32_t)hdma->Instance;
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80007f4:	7902      	ldrb	r2, [r0, #4]
{
 80007f6:	b510      	push	{r4, lr}

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80007f8:	1e54      	subs	r4, r2, #1
 80007fa:	2c07      	cmp	r4, #7
 80007fc:	d80d      	bhi.n	800081a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x26>
  {
    if((stream_baseaddress <= ((uint32_t)BDMA_Channel7) ) && \
 80007fe:	6803      	ldr	r3, [r0, #0]
 8000800:	4909      	ldr	r1, [pc, #36]	; (8000828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x34>)
 8000802:	4419      	add	r1, r3
 8000804:	298c      	cmp	r1, #140	; 0x8c
 8000806:	d809      	bhi.n	800081c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>
      (stream_baseaddress >= ((uint32_t)BDMA_Channel0)))
    {
      /*BDMA Channels are connected to DMAMUX2 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x38>)
 800080a:	4413      	add	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x3c>)
    else
    {
      /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000812:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1U << (request - 1U);
 8000814:	2301      	movs	r3, #1
 8000816:	40a3      	lsls	r3, r4
 8000818:	6743      	str	r3, [r0, #116]	; 0x74
 800081a:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000826:	e7f4      	b.n	8000812 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x1e>
 8000828:	a7fdabf8 	.word	0xa7fdabf8
 800082c:	1600963f 	.word	0x1600963f
 8000830:	58025940 	.word	0x58025940
 8000834:	1000823f 	.word	0x1000823f
 8000838:	40020940 	.word	0x40020940

0800083c <HAL_DMA_Init>:
{
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff ff1e 	bl	8000680 <HAL_GetTick>
 8000844:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000846:	2c00      	cmp	r4, #0
 8000848:	d075      	beq.n	8000936 <HAL_DMA_Init+0xfa>
  if(IS_D2_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream , D2 domain*/
 800084a:	6821      	ldr	r1, [r4, #0]
 800084c:	4b67      	ldr	r3, [pc, #412]	; (80009ec <HAL_DMA_Init+0x1b0>)
 800084e:	440b      	add	r3, r1
 8000850:	f5b3 6f95 	cmp.w	r3, #1192	; 0x4a8
 8000854:	f200 808f 	bhi.w	8000976 <HAL_DMA_Init+0x13a>
    __HAL_UNLOCK(hdma);
 8000858:	2300      	movs	r3, #0
 800085a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800085e:	2302      	movs	r3, #2
 8000860:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000864:	680b      	ldr	r3, [r1, #0]
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	600b      	str	r3, [r1, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 800086c:	6821      	ldr	r1, [r4, #0]
 800086e:	680b      	ldr	r3, [r1, #0]
 8000870:	07d8      	lsls	r0, r3, #31
 8000872:	d456      	bmi.n	8000922 <HAL_DMA_Init+0xe6>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000874:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000876:	4d5e      	ldr	r5, [pc, #376]	; (80009f0 <HAL_DMA_Init+0x1b4>)
    registerValue |=  hdma->Init.Direction           |
 8000878:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800087a:	401d      	ands	r5, r3
    registerValue |=  hdma->Init.Direction           |
 800087c:	68e3      	ldr	r3, [r4, #12]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087e:	69a0      	ldr	r0, [r4, #24]
    registerValue |=  hdma->Init.Direction           |
 8000880:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000882:	6922      	ldr	r2, [r4, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	6962      	ldr	r2, [r4, #20]
 8000888:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800088a:	69e2      	ldr	r2, [r4, #28]
 800088c:	4303      	orrs	r3, r0
 800088e:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8000890:	6a22      	ldr	r2, [r4, #32]
 8000892:	4313      	orrs	r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000894:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000896:	2a04      	cmp	r2, #4
    registerValue |=  hdma->Init.Direction           |
 8000898:	ea43 0305 	orr.w	r3, r3, r5
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800089c:	bf01      	itttt	eq
 800089e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80008a0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80008a2:	4335      	orreq	r5, r6
 80008a4:	432b      	orreq	r3, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008a6:	2a04      	cmp	r2, #4
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80008a8:	600b      	str	r3, [r1, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80008aa:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ac:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80008b0:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b4:	d10c      	bne.n	80008d0 <HAL_DMA_Init+0x94>
      registerValue |= hdma->Init.FIFOThreshold;
 80008b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008b8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80008ba:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008bc:	b145      	cbz	r5, 80008d0 <HAL_DMA_Init+0x94>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80008be:	2800      	cmp	r0, #0
 80008c0:	d13b      	bne.n	800093a <HAL_DMA_Init+0xfe>
    switch (hdma->Init.FIFOThreshold)
 80008c2:	2a01      	cmp	r2, #1
 80008c4:	d04a      	beq.n	800095c <HAL_DMA_Init+0x120>
 80008c6:	d301      	bcc.n	80008cc <HAL_DMA_Init+0x90>
 80008c8:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 80008ca:	d101      	bne.n	80008d0 <HAL_DMA_Init+0x94>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80008cc:	01ea      	lsls	r2, r5, #7
 80008ce:	d448      	bmi.n	8000962 <HAL_DMA_Init+0x126>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80008d0:	614b      	str	r3, [r1, #20]
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008d2:	4620      	mov	r0, r4
 80008d4:	f7ff ff48 	bl	8000768 <DMA_CalcBaseAndBitshift>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008da:	233f      	movs	r3, #63	; 0x3f
 80008dc:	4093      	lsls	r3, r2
 80008de:	6083      	str	r3, [r0, #8]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80008e0:	4620      	mov	r0, r4
 80008e2:	2500      	movs	r5, #0
 80008e4:	f7ff ff56 	bl	8000794 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008e8:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008ec:	2b80      	cmp	r3, #128	; 0x80
     hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80008ee:	bf04      	itt	eq
 80008f0:	2300      	moveq	r3, #0
 80008f2:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008f4:	6863      	ldr	r3, [r4, #4]
 80008f6:	b2d9      	uxtb	r1, r3
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80008f8:	3b01      	subs	r3, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008fa:	6011      	str	r1, [r2, #0]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80008fc:	2b07      	cmp	r3, #7
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000900:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8000902:	6051      	str	r1, [r2, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000904:	d86e      	bhi.n	80009e4 <HAL_DMA_Init+0x1a8>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff ff74 	bl	80007f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
     hdma->DMAmuxRequestGen->RGCR = 0U;
 800090c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800090e:	6f62      	ldr	r2, [r4, #116]	; 0x74
     hdma->DMAmuxRequestGen->RGCR = 0U;
 8000910:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000912:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000914:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000916:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000918:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800091a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800091c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000920:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000922:	f7ff fead 	bl	8000680 <HAL_GetTick>
 8000926:	1b40      	subs	r0, r0, r5
 8000928:	2805      	cmp	r0, #5
 800092a:	d99f      	bls.n	800086c <HAL_DMA_Init+0x30>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800092c:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800092e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000930:	2303      	movs	r3, #3
 8000932:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8000936:	2001      	movs	r0, #1
 8000938:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800093a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800093e:	d116      	bne.n	800096e <HAL_DMA_Init+0x132>
    switch (hdma->Init.FIFOThreshold)
 8000940:	2a03      	cmp	r2, #3
 8000942:	d8c5      	bhi.n	80008d0 <HAL_DMA_Init+0x94>
 8000944:	a001      	add	r0, pc, #4	; (adr r0, 800094c <HAL_DMA_Init+0x110>)
 8000946:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000963 	.word	0x08000963
 8000950:	080008cd 	.word	0x080008cd
 8000954:	08000963 	.word	0x08000963
 8000958:	0800095d 	.word	0x0800095d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800095c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000960:	d1b6      	bne.n	80008d0 <HAL_DMA_Init+0x94>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000962:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8000964:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000966:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8000968:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800096c:	bd70      	pop	{r4, r5, r6, pc}
    switch (hdma->Init.FIFOThreshold)
 800096e:	2a02      	cmp	r2, #2
 8000970:	d9f7      	bls.n	8000962 <HAL_DMA_Init+0x126>
 8000972:	2a03      	cmp	r2, #3
 8000974:	e7a9      	b.n	80008ca <HAL_DMA_Init+0x8e>
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET) /*<BDMA channel , D3 domain*/
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <HAL_DMA_Init+0x1b8>)
 8000978:	440a      	add	r2, r1
 800097a:	2a8c      	cmp	r2, #140	; 0x8c
 800097c:	d830      	bhi.n	80009e0 <HAL_DMA_Init+0x1a4>
    __HAL_UNLOCK(hdma);
 800097e:	2300      	movs	r3, #0
 8000980:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000984:	2302      	movs	r3, #2
 8000986:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800098a:	68a3      	ldr	r3, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800098c:	6808      	ldr	r0, [r1, #0]
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 800098e:	2b40      	cmp	r3, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE  | BDMA_CCR_PSIZE  | \
 8000990:	f420 40ff 	bic.w	r0, r0, #32640	; 0x7f80
 8000994:	f020 0070 	bic.w	r0, r0, #112	; 0x70
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 8000998:	d020      	beq.n	80009dc <HAL_DMA_Init+0x1a0>
 800099a:	2b80      	cmp	r3, #128	; 0x80
 800099c:	bf0c      	ite	eq
 800099e:	f44f 4580 	moveq.w	r5, #16384	; 0x4000
 80009a2:	2500      	movne	r5, #0
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 80009a4:	6923      	ldr	r3, [r4, #16]
                      D2_TO_D3_DMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80009a6:	68e6      	ldr	r6, [r4, #12]
                      D2_TO_D3_DMA_MEMORY_INC(hdma->Init.MemInc)              |
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      D2_TO_D3_DMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80009ae:	6966      	ldr	r6, [r4, #20]
 80009b0:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      D2_TO_D3_DMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80009b4:	69a6      	ldr	r6, [r4, #24]
 80009b6:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      D2_TO_D3_DMA_PRIORITY(hdma->Init.Priority);
 80009ba:	6a26      	ldr	r6, [r4, #32]
 80009bc:	ea43 1316 	orr.w	r3, r3, r6, lsr #4
 80009c0:	4303      	orrs	r3, r0
                      D2_TO_D3_DMA_MODE(hdma->Init.Mode)                      |
 80009c2:	69e0      	ldr	r0, [r4, #28]
 80009c4:	08c0      	lsrs	r0, r0, #3
 80009c6:	f000 0020 	and.w	r0, r0, #32
 80009ca:	4303      	orrs	r3, r0
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80009cc:	432b      	orrs	r3, r5
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80009ce:	600b      	str	r3, [r1, #0]
    hdma->StreamIndex = (((uint32_t)hdma->Instance - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80009d0:	2314      	movs	r3, #20
 80009d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	65e2      	str	r2, [r4, #92]	; 0x5c
 80009da:	e781      	b.n	80008e0 <HAL_DMA_Init+0xa4>
    registerValue |=  D2_TO_D3_DMA_DIRECTION(hdma->Init.Direction)            |
 80009dc:	2510      	movs	r5, #16
 80009de:	e7e1      	b.n	80009a4 <HAL_DMA_Init+0x168>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	e7a4      	b.n	800092e <HAL_DMA_Init+0xf2>
    hdma->DMAmuxRequestGen = 0U;
 80009e4:	66e5      	str	r5, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80009e6:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80009e8:	6765      	str	r5, [r4, #116]	; 0x74
 80009ea:	e794      	b.n	8000916 <HAL_DMA_Init+0xda>
 80009ec:	bffdfff0 	.word	0xbffdfff0
 80009f0:	fe10803f 	.word	0xfe10803f
 80009f4:	a7fdabf8 	.word	0xa7fdabf8

080009f8 <HAL_DMA_Abort_IT>:
{
 80009f8:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80009fa:	b128      	cbz	r0, 8000a08 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009fc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d003      	beq.n	8000a0c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
 8000a0a:	bd10      	pop	{r4, pc}
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000a0c:	6803      	ldr	r3, [r0, #0]
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_DMA_Abort_IT+0x84>)
 8000a10:	441a      	add	r2, r3
 8000a12:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000a16:	d808      	bhi.n	8000a2a <HAL_DMA_Abort_IT+0x32>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a18:	2204      	movs	r2, #4
 8000a1a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000a26:	2000      	movs	r0, #0
 8000a28:	bd10      	pop	{r4, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f022 020e 	bic.w	r2, r2, #14
 8000a30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a3a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000a3c:	6813      	ldr	r3, [r2, #0]
 8000a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 8000a44:	2301      	movs	r3, #1
 8000a46:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_DMA_Abort_IT+0x88>)
 8000a4c:	6053      	str	r3, [r2, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a4e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8000a50:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000a52:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8000a54:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8000a56:	b133      	cbz	r3, 8000a66 <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a5e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a60:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000a62:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8000a64:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8000a66:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8000a68:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8000a6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8000a70:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0d6      	beq.n	8000a26 <HAL_DMA_Abort_IT+0x2e>
        hdma->XferAbortCallback(hdma);
 8000a78:	4798      	blx	r3
 8000a7a:	e7d4      	b.n	8000a26 <HAL_DMA_Abort_IT+0x2e>
 8000a7c:	bffdfff0 	.word	0xbffdfff0
 8000a80:	58025400 	.word	0x58025400

08000a84 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8000a84:	2300      	movs	r3, #0
{
 8000a86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000a8a:	4d92      	ldr	r5, [pc, #584]	; (8000cd4 <HAL_DMA_IRQHandler+0x250>)
{
 8000a8c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000a8e:	9301      	str	r3, [sp, #4]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000a90:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a92:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000a94:	195a      	adds	r2, r3, r5
  tmpisr = regs->ISR;
 8000a96:	f8d6 8000 	ldr.w	r8, [r6]
  if(IS_D2_DMA_INSTANCE(hdma) != RESET)  /*D2 domain DMA : DMA1 or DMA2*/
 8000a9a:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000a9e:	f200 80c0 	bhi.w	8000c22 <HAL_DMA_IRQHandler+0x19e>
  uint32_t timeout = SystemCoreClock / 9600U;
 8000aa2:	4a8d      	ldr	r2, [pc, #564]	; (8000cd8 <HAL_DMA_IRQHandler+0x254>)
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600U;
 8000aa6:	6817      	ldr	r7, [r2, #0]
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	ea18 0f02 	tst.w	r8, r2
 8000ab0:	d00b      	beq.n	8000aca <HAL_DMA_IRQHandler+0x46>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	0740      	lsls	r0, r0, #29
 8000ab6:	d508      	bpl.n	8000aca <HAL_DMA_IRQHandler+0x46>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f020 0004 	bic.w	r0, r0, #4
 8000abe:	6018      	str	r0, [r3, #0]
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac0:	60b2      	str	r2, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ac2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ac4:	f042 0201 	orr.w	r2, r2, #1
 8000ac8:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aca:	4a84      	ldr	r2, [pc, #528]	; (8000cdc <HAL_DMA_IRQHandler+0x258>)
 8000acc:	408a      	lsls	r2, r1
 8000ace:	ea18 0f02 	tst.w	r8, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_DMA_IRQHandler+0x60>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ad4:	6958      	ldr	r0, [r3, #20]
 8000ad6:	0600      	lsls	r0, r0, #24
 8000ad8:	d504      	bpl.n	8000ae4 <HAL_DMA_IRQHandler+0x60>
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ada:	60b2      	str	r2, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000adc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ade:	f042 0202 	orr.w	r2, r2, #2
 8000ae2:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ae4:	4a7e      	ldr	r2, [pc, #504]	; (8000ce0 <HAL_DMA_IRQHandler+0x25c>)
 8000ae6:	408a      	lsls	r2, r1
 8000ae8:	ea18 0f02 	tst.w	r8, r2
 8000aec:	d007      	beq.n	8000afe <HAL_DMA_IRQHandler+0x7a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	0780      	lsls	r0, r0, #30
 8000af2:	d504      	bpl.n	8000afe <HAL_DMA_IRQHandler+0x7a>
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000af4:	60b2      	str	r2, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000af6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000af8:	f042 0204 	orr.w	r2, r2, #4
 8000afc:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000afe:	2210      	movs	r2, #16
 8000b00:	408a      	lsls	r2, r1
 8000b02:	ea18 0f02 	tst.w	r8, r2
 8000b06:	d00f      	beq.n	8000b28 <HAL_DMA_IRQHandler+0xa4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	0709      	lsls	r1, r1, #28
 8000b0c:	d50c      	bpl.n	8000b28 <HAL_DMA_IRQHandler+0xa4>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b0e:	60b2      	str	r2, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	0350      	lsls	r0, r2, #13
 8000b14:	d53f      	bpl.n	8000b96 <HAL_DMA_IRQHandler+0x112>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	0319      	lsls	r1, r3, #12
 8000b1a:	d401      	bmi.n	8000b20 <HAL_DMA_IRQHandler+0x9c>
          if(hdma->XferHalfCpltCallback != NULL)
 8000b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b1e:	e000      	b.n	8000b22 <HAL_DMA_IRQHandler+0x9e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8000b20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8000b22:	b10b      	cbz	r3, 8000b28 <HAL_DMA_IRQHandler+0xa4>
            hdma->XferHalfCpltCallback(hdma);
 8000b24:	4620      	mov	r0, r4
 8000b26:	4798      	blx	r3
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b28:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	4081      	lsls	r1, r0
 8000b2e:	ea18 0f01 	tst.w	r8, r1
 8000b32:	d041      	beq.n	8000bb8 <HAL_DMA_IRQHandler+0x134>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	195a      	adds	r2, r3, r5
 8000b38:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	bf94      	ite	ls
 8000b40:	f3c2 1200 	ubfxls	r2, r2, #4, #1
 8000b44:	f3c2 0240 	ubfxhi	r2, r2, #1, #1
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d035      	beq.n	8000bb8 <HAL_DMA_IRQHandler+0x134>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b4c:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b4e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000b52:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b54:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b56:	d126      	bne.n	8000ba6 <HAL_DMA_IRQHandler+0x122>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b58:	f022 0216 	bic.w	r2, r2, #22
 8000b5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b64:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b68:	b90a      	cbnz	r2, 8000b6e <HAL_DMA_IRQHandler+0xea>
 8000b6a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b6c:	b11a      	cbz	r2, 8000b76 <HAL_DMA_IRQHandler+0xf2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	f022 0208 	bic.w	r2, r2, #8
 8000b74:	601a      	str	r2, [r3, #0]
          regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b76:	233f      	movs	r3, #63	; 0x3f
 8000b78:	4083      	lsls	r3, r0
 8000b7a:	60b3      	str	r3, [r6, #8]
          __HAL_UNLOCK(hdma);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8000b88:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8000b8a:	b10b      	cbz	r3, 8000b90 <HAL_DMA_IRQHandler+0x10c>
        hdma->XferErrorCallback(hdma);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4798      	blx	r3
}
 8000b90:	b002      	add	sp, #8
 8000b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	05d2      	lsls	r2, r2, #23
 8000b9a:	d4bf      	bmi.n	8000b1c <HAL_DMA_IRQHandler+0x98>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	f022 0208 	bic.w	r2, r2, #8
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e7ba      	b.n	8000b1c <HAL_DMA_IRQHandler+0x98>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ba6:	0356      	lsls	r6, r2, #13
 8000ba8:	d52c      	bpl.n	8000c04 <HAL_DMA_IRQHandler+0x180>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == RESET)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	0318      	lsls	r0, r3, #12
 8000bae:	d436      	bmi.n	8000c1e <HAL_DMA_IRQHandler+0x19a>
            if(hdma->XferM1CpltCallback != NULL)
 8000bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8000bb2:	b10b      	cbz	r3, 8000bb8 <HAL_DMA_IRQHandler+0x134>
            hdma->XferCpltCallback(hdma);
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0e8      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x10c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000bbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bc0:	07d9      	lsls	r1, r3, #31
 8000bc2:	d51d      	bpl.n	8000c00 <HAL_DMA_IRQHandler+0x17c>
        hdma->State = HAL_DMA_STATE_ABORT;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f022 0201 	bic.w	r2, r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000bd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd8:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 8000bdc:	9a01      	ldr	r2, [sp, #4]
 8000bde:	3201      	adds	r2, #1
 8000be0:	4297      	cmp	r7, r2
 8000be2:	9201      	str	r2, [sp, #4]
 8000be4:	d302      	bcc.n	8000bec <HAL_DMA_IRQHandler+0x168>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET);
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	07d2      	lsls	r2, r2, #31
 8000bea:	d4f7      	bmi.n	8000bdc <HAL_DMA_IRQHandler+0x158>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000bec:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 8000bee:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != RESET)
 8000bf0:	07de      	lsls	r6, r3, #31
        __HAL_UNLOCK(hdma);
 8000bf2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8000bf6:	bf4c      	ite	mi
 8000bf8:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8000bfa:	2301      	movpl	r3, #1
 8000bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8000c00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c02:	e7c2      	b.n	8000b8a <HAL_DMA_IRQHandler+0x106>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == RESET)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c0a:	d108      	bne.n	8000c1e <HAL_DMA_IRQHandler+0x19a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	f021 0110 	bic.w	r1, r1, #16
 8000c12:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8000c14:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8000c16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8000c1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8000c1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c20:	e7c7      	b.n	8000bb2 <HAL_DMA_IRQHandler+0x12e>
  else if(IS_D3_DMA_INSTANCE(hdma) != RESET)  /*D3 domain BDMA */
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_DMA_IRQHandler+0x260>)
 8000c24:	441a      	add	r2, r3
 8000c26:	2a8c      	cmp	r2, #140	; 0x8c
 8000c28:	d8b2      	bhi.n	8000b90 <HAL_DMA_IRQHandler+0x10c>
    if ((RESET != (BDMA->ISR & (BDMA_FLAG_HT0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_HTIE)))
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_DMA_IRQHandler+0x264>)
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8000c30:	6815      	ldr	r5, [r2, #0]
 8000c32:	4081      	lsls	r1, r0
 8000c34:	4229      	tst	r1, r5
 8000c36:	d012      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x1da>
 8000c38:	6819      	ldr	r1, [r3, #0]
 8000c3a:	074d      	lsls	r5, r1, #29
 8000c3c:	d50f      	bpl.n	8000c5e <HAL_DMA_IRQHandler+0x1da>
        if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	0690      	lsls	r0, r2, #26
 8000c42:	d403      	bmi.n	8000c4c <HAL_DMA_IRQHandler+0x1c8>
          (*ccr_reg) &= ~BDMA_CCR_HTIE;
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f022 0204 	bic.w	r2, r2, #4
 8000c4a:	601a      	str	r2, [r3, #0]
        BDMA->IFCR  |= (BDMA_ISR_HTIF0 << hdma->StreamIndex);
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_DMA_IRQHandler+0x264>)
 8000c4e:	2304      	movs	r3, #4
 8000c50:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000c52:	6851      	ldr	r1, [r2, #4]
 8000c54:	4083      	lsls	r3, r0
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6053      	str	r3, [r2, #4]
       if(hdma->XferHalfCpltCallback != NULL)
 8000c5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c5c:	e795      	b.n	8000b8a <HAL_DMA_IRQHandler+0x106>
    else if ((RESET != (BDMA->ISR & (BDMA_FLAG_TC0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TCIE)))
 8000c5e:	6811      	ldr	r1, [r2, #0]
 8000c60:	2202      	movs	r2, #2
 8000c62:	4082      	lsls	r2, r0
 8000c64:	420a      	tst	r2, r1
 8000c66:	d018      	beq.n	8000c9a <HAL_DMA_IRQHandler+0x216>
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	0791      	lsls	r1, r2, #30
 8000c6c:	d515      	bpl.n	8000c9a <HAL_DMA_IRQHandler+0x216>
      if(((*ccr_reg) & BDMA_CCR_CIRC) == 0U)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	f012 0220 	ands.w	r2, r2, #32
 8000c74:	d108      	bne.n	8000c88 <HAL_DMA_IRQHandler+0x204>
        (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE);
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	f021 010a 	bic.w	r1, r1, #10
 8000c7c:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8000c7e:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8000c80:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000c84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      BDMA->IFCR |= (BDMA_ISR_TCIF0 << hdma->StreamIndex);
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_DMA_IRQHandler+0x264>)
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000c8e:	6851      	ldr	r1, [r2, #4]
 8000c90:	4083      	lsls	r3, r0
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6053      	str	r3, [r2, #4]
      if(hdma->XferCpltCallback != NULL)
 8000c96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c98:	e777      	b.n	8000b8a <HAL_DMA_IRQHandler+0x106>
    else if (( RESET != (BDMA->ISR & (BDMA_FLAG_TE0 << hdma->StreamIndex))) && (RESET != ((*ccr_reg) & BDMA_CCR_TEIE)))
 8000c9a:	4913      	ldr	r1, [pc, #76]	; (8000ce8 <HAL_DMA_IRQHandler+0x264>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	680d      	ldr	r5, [r1, #0]
 8000ca0:	4082      	lsls	r2, r0
 8000ca2:	422a      	tst	r2, r5
 8000ca4:	f43f af74 	beq.w	8000b90 <HAL_DMA_IRQHandler+0x10c>
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	0712      	lsls	r2, r2, #28
 8000cac:	f57f af70 	bpl.w	8000b90 <HAL_DMA_IRQHandler+0x10c>
      (*ccr_reg) &= ~(BDMA_CCR_TEIE | BDMA_CCR_TCIE | BDMA_CCR_HTIE);
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	f022 020e 	bic.w	r2, r2, #14
 8000cb6:	601a      	str	r2, [r3, #0]
      BDMA->IFCR  |= (BDMA_ISR_GIF0 << hdma->StreamIndex);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000cbc:	6848      	ldr	r0, [r1, #4]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	4303      	orrs	r3, r0
 8000cc4:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8000cc6:	2300      	movs	r3, #0
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cc8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8000cca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000cce:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8000cd2:	e795      	b.n	8000c00 <HAL_DMA_IRQHandler+0x17c>
 8000cd4:	bffdfff0 	.word	0xbffdfff0
 8000cd8:	20000068 	.word	0x20000068
 8000cdc:	00800001 	.word	0x00800001
 8000ce0:	00800004 	.word	0x00800004
 8000ce4:	a7fdabf8 	.word	0xa7fdabf8
 8000ce8:	58025400 	.word	0x58025400

08000cec <FDCAN_CopyMessageToRAM>:
  * @param  pTxData: pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex: index of the buffer to be configured.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	690c      	ldr	r4, [r1, #16]
 8000cf0:	688e      	ldr	r6, [r1, #8]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if(pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000cf2:	684f      	ldr	r7, [r1, #4]
 8000cf4:	680d      	ldr	r5, [r1, #0]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8000cf6:	4334      	orrs	r4, r6
  if(pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000cf8:	b9f7      	cbnz	r7, 8000d38 <FDCAN_CopyMessageToRAM+0x4c>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000cfa:	ea44 4585 	orr.w	r5, r4, r5, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8000cfe:	698e      	ldr	r6, [r1, #24]
 8000d00:	69cc      	ldr	r4, [r1, #28]
 8000d02:	4334      	orrs	r4, r6
 8000d04:	694e      	ldr	r6, [r1, #20]
 8000d06:	4334      	orrs	r4, r6
 8000d08:	68ce      	ldr	r6, [r1, #12]
 8000d0a:	4334      	orrs	r4, r6
 8000d0c:	6a0e      	ldr	r6, [r1, #32]
 8000d0e:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4));
 8000d12:	009e      	lsls	r6, r3, #2
 8000d14:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000d16:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8000d1a:	4373      	muls	r3, r6
  /* Write Tx element header to the message RAM */
  *TxAddress++ = TxElementW1;
  *TxAddress++ = TxElementW2;

  /* Write Tx payload to the message RAM */
  for(ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4)
 8000d1c:	4e11      	ldr	r6, [pc, #68]	; (8000d64 <FDCAN_CopyMessageToRAM+0x78>)
  *TxAddress++ = TxElementW1;
 8000d1e:	501d      	str	r5, [r3, r0]
  *TxAddress++ = TxElementW2;
 8000d20:	4403      	add	r3, r0
 8000d22:	f843 4f04 	str.w	r4, [r3, #4]!
  for(ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4)
 8000d26:	4614      	mov	r4, r2
 8000d28:	89cd      	ldrh	r5, [r1, #14]
 8000d2a:	1aa0      	subs	r0, r4, r2
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	5d75      	ldrb	r5, [r6, r5]
 8000d30:	4285      	cmp	r5, r0
 8000d32:	d805      	bhi.n	8000d40 <FDCAN_CopyMessageToRAM+0x54>
                    pTxData[ByteCounter]);
  }

  /* Return function status */
  return HAL_OK;
}
 8000d34:	2000      	movs	r0, #0
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d38:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	e7de      	b.n	8000cfe <FDCAN_CopyMessageToRAM+0x12>
                    (pTxData[ByteCounter+2] << 16) |
 8000d40:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    *TxAddress++ = ((pTxData[ByteCounter+3] << 24) |
 8000d44:	f814 5c01 	ldrb.w	r5, [r4, #-1]
                    (pTxData[ByteCounter+2] << 16) |
 8000d48:	0400      	lsls	r0, r0, #16
    *TxAddress++ = ((pTxData[ByteCounter+3] << 24) |
 8000d4a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
                    pTxData[ByteCounter]);
 8000d4e:	f814 5c04 	ldrb.w	r5, [r4, #-4]
                    (pTxData[ByteCounter+1] << 8) |
 8000d52:	4328      	orrs	r0, r5
 8000d54:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 8000d58:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *TxAddress++ = ((pTxData[ByteCounter+3] << 24) |
 8000d5c:	f843 0f04 	str.w	r0, [r3, #4]!
 8000d60:	e7e2      	b.n	8000d28 <FDCAN_CopyMessageToRAM+0x3c>
 8000d62:	bf00      	nop
 8000d64:	0800854b 	.word	0x0800854b

08000d68 <HAL_FDCAN_Init>:
{
 8000d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hfdcan == NULL)
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	f000 8192 	beq.w	8001098 <HAL_FDCAN_Init+0x330>
  if(hfdcan->Instance == FDCAN1)
 8000d74:	4bcd      	ldr	r3, [pc, #820]	; (80010ac <HAL_FDCAN_Init+0x344>)
 8000d76:	6802      	ldr	r2, [r0, #0]
 8000d78:	429a      	cmp	r2, r3
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100);
 8000d7a:	bf04      	itt	eq
 8000d7c:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8000d80:	6043      	streq	r3, [r0, #4]
  if(hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d82:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8000d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d8a:	b91b      	cbnz	r3, 8000d94 <HAL_FDCAN_Init+0x2c>
    hfdcan->Lock = HAL_UNLOCKED;
 8000d8c:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    HAL_FDCAN_MspInit(hfdcan);
 8000d90:	f007 f9f2 	bl	8008178 <HAL_FDCAN_MspInit>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	6993      	ldr	r3, [r2, #24]
 8000d98:	f023 0310 	bic.w	r3, r3, #16
 8000d9c:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8000d9e:	f7ff fc6f 	bl	8000680 <HAL_GetTick>
 8000da2:	4605      	mov	r5, r0
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	0711      	lsls	r1, r2, #28
 8000daa:	f100 8166 	bmi.w	800107a <HAL_FDCAN_Init+0x312>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000dae:	699a      	ldr	r2, [r3, #24]
 8000db0:	f042 0201 	orr.w	r2, r2, #1
 8000db4:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8000db6:	f7ff fc63 	bl	8000680 <HAL_GetTick>
 8000dba:	4605      	mov	r5, r0
  while((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	699a      	ldr	r2, [r3, #24]
 8000dc0:	07d2      	lsls	r2, r2, #31
 8000dc2:	f140 816c 	bpl.w	800109e <HAL_FDCAN_Init+0x336>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000dc6:	699a      	ldr	r2, [r3, #24]
 8000dc8:	f042 0202 	orr.w	r2, r2, #2
 8000dcc:	619a      	str	r2, [r3, #24]
  if(hfdcan->Init.AutoRetransmission == ENABLE)
 8000dce:	7c22      	ldrb	r2, [r4, #16]
 8000dd0:	2a01      	cmp	r2, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	bf0c      	ite	eq
 8000dd6:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000dda:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8000dde:	619a      	str	r2, [r3, #24]
  if(hfdcan->Init.TransmitPause == ENABLE)
 8000de0:	7c62      	ldrb	r2, [r4, #17]
 8000de2:	2a01      	cmp	r2, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	bf0c      	ite	eq
 8000de8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000dec:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8000df0:	619a      	str	r2, [r3, #24]
  if(hfdcan->Init.ProtocolException == ENABLE)
 8000df2:	7ca2      	ldrb	r2, [r4, #18]
 8000df4:	2a01      	cmp	r2, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	bf0c      	ite	eq
 8000dfa:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000dfe:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8000e02:	619a      	str	r2, [r3, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e04:	699a      	ldr	r2, [r3, #24]
 8000e06:	68a0      	ldr	r0, [r4, #8]
 8000e08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e0c:	4302      	orrs	r2, r0
 8000e0e:	619a      	str	r2, [r3, #24]
  if(hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e10:	68e2      	ldr	r2, [r4, #12]
 8000e12:	2a01      	cmp	r2, #1
 8000e14:	f040 8152 	bne.w	80010bc <HAL_FDCAN_Init+0x354>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e18:	699a      	ldr	r2, [r3, #24]
 8000e1a:	f042 0204 	orr.w	r2, r2, #4
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e1e:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8000e20:	69a2      	ldr	r2, [r4, #24]
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e22:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8000e26:	f102 31ff 	add.w	r1, r2, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 8000e2a:	69e2      	ldr	r2, [r4, #28]
 8000e2c:	f102 32ff 	add.w	r2, r2, #4294967295
 8000e30:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8000e34:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 8000e38:	6a21      	ldr	r1, [r4, #32]
 8000e3a:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1) << 8)       | \
 8000e3e:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1) << 16));
 8000e42:	6961      	ldr	r1, [r4, #20]
 8000e44:	f101 31ff 	add.w	r1, r1, #4294967295
                            ((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1)              | \
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1) << 25) | \
 8000e4c:	61da      	str	r2, [r3, #28]
  if(hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e4e:	d10e      	bne.n	8000e6e <HAL_FDCAN_Init+0x106>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 8000e50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e52:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 8000e54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e56:	3a01      	subs	r2, #1
 8000e58:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 8000e5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 8000e5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e60:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1) << 8) | \
 8000e62:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1) << 16));
 8000e64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e66:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1) << 4) | \
 8000e68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = (((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1)   | \
 8000e6c:	60da      	str	r2, [r3, #12]
  if(hfdcan->Init.TxFifoQueueElmtsNbr > 0)
 8000e6e:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000e70:	b12e      	cbz	r6, 8000e7e <HAL_FDCAN_Init+0x116>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000e76:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0)
 8000e7e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000e80:	42c6      	cmn	r6, r0
 8000e82:	d009      	beq.n	8000e98 <HAL_FDCAN_Init+0x130>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000e84:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8000e88:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000e8a:	4d89      	ldr	r5, [pc, #548]	; (80010b0 <HAL_FDCAN_Init+0x348>)
 8000e8c:	f021 0107 	bic.w	r1, r1, #7
 8000e90:	5caa      	ldrb	r2, [r5, r2]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  if(hfdcan->Init.RxFifo0ElmtsNbr > 0)
 8000e98:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
 8000e9c:	f1b8 0f00 	cmp.w	r8, #0
 8000ea0:	d009      	beq.n	8000eb6 <HAL_FDCAN_Init+0x14e>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, CvtEltSize[hfdcan->Init.RxFifo0ElmtSize]);
 8000ea2:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8000ea6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ea8:	4d81      	ldr	r5, [pc, #516]	; (80010b0 <HAL_FDCAN_Init+0x348>)
 8000eaa:	f021 0107 	bic.w	r1, r1, #7
 8000eae:	5caa      	ldrb	r2, [r5, r2]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if(hfdcan->Init.RxFifo1ElmtsNbr > 0)
 8000eb6:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 8000eba:	f1bc 0f00 	cmp.w	ip, #0
 8000ebe:	d00a      	beq.n	8000ed6 <HAL_FDCAN_Init+0x16e>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << 4));
 8000ec0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ec4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000ec6:	4d7a      	ldr	r5, [pc, #488]	; (80010b0 <HAL_FDCAN_Init+0x348>)
 8000ec8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ecc:	5c69      	ldrb	r1, [r5, r1]
 8000ece:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8000ed2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if(hfdcan->Init.RxBuffersNbr > 0)
 8000ed6:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 8000eda:	f1ba 0f00 	cmp.w	sl, #0
 8000ede:	d00a      	beq.n	8000ef6 <HAL_FDCAN_Init+0x18e>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << 8));
 8000ee0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ee4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000ee6:	4d72      	ldr	r5, [pc, #456]	; (80010b0 <HAL_FDCAN_Init+0x348>)
 8000ee8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000eec:	5c69      	ldrb	r1, [r5, r1]
 8000eee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ef2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if(hfdcan->Instance == FDCAN1)
 8000ef6:	4a6d      	ldr	r2, [pc, #436]	; (80010ac <HAL_FDCAN_Init+0x344>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d104      	bne.n	8000f06 <HAL_FDCAN_Init+0x19e>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8000efc:	6861      	ldr	r1, [r4, #4]
 8000efe:	688a      	ldr	r2, [r1, #8]
 8000f00:	f022 0203 	bic.w	r2, r2, #3
 8000f04:	608a      	str	r2, [r1, #8]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8000f06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000f0a:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80010b8 <HAL_FDCAN_Init+0x350>
  hfdcan->msgRam.StandardFilterSA = hfdcan->Init.MessageRAMOffset;
 8000f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8000f10:	ea02 020e 	and.w	r2, r2, lr
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 8000f14:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (hfdcan->msgRam.StandardFilterSA << 2));
 8000f18:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8000f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8000f20:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8000f24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f26:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + hfdcan->Init.StdFiltersNbr;
 8000f2a:	188f      	adds	r7, r1, r2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8000f2c:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8000f30:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8000f34:	f501 512c 	add.w	r1, r1, #11008	; 0x2b00
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << 16));
 8000f38:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 8000f3c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8000f40:	0089      	lsls	r1, r1, #2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 8000f42:	ea05 050e 	and.w	r5, r5, lr
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 8000f46:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 8000f4a:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2);
 8000f4e:	eb07 0749 	add.w	r7, r7, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (hfdcan->msgRam.ExtendedFilterSA << 2));
 8000f52:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << 16));
 8000f56:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8000f5a:	f425 057f 	bic.w	r5, r5, #16711680	; 0xff0000
 8000f5e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8000f62:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (hfdcan->msgRam.RxFIFO0SA << 2));
 8000f66:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8000f6a:	ea05 050e 	and.w	r5, r5, lr
 8000f6e:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 8000f72:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << 16));
 8000f76:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8000f7a:	f425 05fe 	bic.w	r5, r5, #8323072	; 0x7f0000
 8000f7e:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8000f82:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8000f86:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000f88:	fb05 f808 	mul.w	r8, r5, r8
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 8000f8c:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8000f90:	4447      	add	r7, r8
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (hfdcan->msgRam.RxFIFO1SA << 2));
 8000f92:	f025 05fc 	bic.w	r5, r5, #252	; 0xfc
 8000f96:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 8000f9a:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << 16));
 8000f9e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8000fa2:	f425 05fe 	bic.w	r5, r5, #8323072	; 0x7f0000
 8000fa6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000faa:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8000fae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8000fb0:	fb05 fc0c 	mul.w	ip, r5, ip
 8000fb4:	eb07 050c 	add.w	r5, r7, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (hfdcan->msgRam.RxBufferSA << 2));
 8000fb8:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 8000fbc:	f027 07fc 	bic.w	r7, r7, #252	; 0xfc
 8000fc0:	ea47 0785 	orr.w	r7, r7, r5, lsl #2
 8000fc4:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8000fc8:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8000fca:	fb07 f70a 	mul.w	r7, r7, sl
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8000fce:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8000fd2:	443d      	add	r5, r7
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (hfdcan->msgRam.TxEventFIFOSA << 2));
 8000fd4:	ea0a 0e0e 	and.w	lr, sl, lr
 8000fd8:	ea4e 0e85 	orr.w	lr, lr, r5, lsl #2
 8000fdc:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8000fe0:	f8d3 a0f0 	ldr.w	sl, [r3, #240]	; 0xf0
 8000fe4:	f8d4 e058 	ldr.w	lr, [r4, #88]	; 0x58
 8000fe8:	f42a 1a7c 	bic.w	sl, sl, #4128768	; 0x3f0000
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2);
 8000fec:	eb05 0b4e 	add.w	fp, r5, lr, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << 16));
 8000ff0:	ea4a 4a0e 	orr.w	sl, sl, lr, lsl #16
 8000ff4:	f8c3 a0f0 	str.w	sl, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (hfdcan->msgRam.TxBufferSA << 2));
 8000ff8:	f8d3 a0c0 	ldr.w	sl, [r3, #192]	; 0xc0
 8000ffc:	f02a 05fc 	bic.w	r5, sl, #252	; 0xfc
 8001000:	ea45 058b 	orr.w	r5, r5, fp, lsl #2
 8001004:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << 16));
 8001008:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 800100c:	f425 157c 	bic.w	r5, r5, #4128768	; 0x3f0000
 8001010:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001014:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8001018:	f8d3 a0c0 	ldr.w	sl, [r3, #192]	; 0xc0
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 800101c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 800101e:	f02a 5a7c 	bic.w	sl, sl, #1056964608	; 0x3f000000
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize);
 8001022:	4368      	muls	r0, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 8001024:	ea4a 6a06 	orr.w	sl, sl, r6, lsl #24
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8001028:	4375      	muls	r5, r6
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << 24));
 800102a:	f8c3 a0c0 	str.w	sl, [r3, #192]	; 0xc0
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4);
 800102e:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8001030:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4);
 8001034:	66e1      	str	r1, [r4, #108]	; 0x6c
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2 * 4);
 8001036:	6762      	str	r2, [r4, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8001038:	eb02 0288 	add.w	r2, r2, r8, lsl #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 800103c:	eb02 038c 	add.w	r3, r2, ip, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4);
 8001040:	67a2      	str	r2, [r4, #120]	; 0x78
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_FDCAN_Init+0x34c>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4);
 8001044:	67e3      	str	r3, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4);
 8001046:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800104a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2 * 4);
 800104e:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8001052:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4);
 8001056:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800105a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 800105e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8001062:	4293      	cmp	r3, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4);
 8001064:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  if(hfdcan->msgRam.EndAddress > 0x4000B5FC) /* Last address of the Message RAM */
 8001068:	d83c      	bhi.n	80010e4 <HAL_FDCAN_Init+0x37c>
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 800106a:	2200      	movs	r2, #0
    for(RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4)
 800106c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001070:	4299      	cmp	r1, r3
 8001072:	d23d      	bcs.n	80010f0 <HAL_FDCAN_Init+0x388>
      *(__IO uint32_t *)(RAMcounter) = 0x00000000;
 8001074:	f841 2b04 	str.w	r2, [r1], #4
 8001078:	e7f8      	b.n	800106c <HAL_FDCAN_Init+0x304>
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800107a:	f7ff fb01 	bl	8000680 <HAL_GetTick>
 800107e:	1b40      	subs	r0, r0, r5
 8001080:	280a      	cmp	r0, #10
 8001082:	f67f ae8f 	bls.w	8000da4 <HAL_FDCAN_Init+0x3c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001086:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001092:	2303      	movs	r3, #3
 8001094:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
     return HAL_ERROR;
 8001098:	2001      	movs	r0, #1
}
 800109a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800109e:	f7ff faef 	bl	8000680 <HAL_GetTick>
 80010a2:	1b40      	subs	r0, r0, r5
 80010a4:	280a      	cmp	r0, #10
 80010a6:	f67f ae89 	bls.w	8000dbc <HAL_FDCAN_Init+0x54>
 80010aa:	e7ec      	b.n	8001086 <HAL_FDCAN_Init+0x31e>
 80010ac:	4000a000 	.word	0x4000a000
 80010b0:	08008538 	.word	0x08008538
 80010b4:	4000b5fc 	.word	0x4000b5fc
 80010b8:	ffff0003 	.word	0xffff0003
  else if(hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80010bc:	2a00      	cmp	r2, #0
 80010be:	f43f aeaf 	beq.w	8000e20 <HAL_FDCAN_Init+0xb8>
    if(hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80010c2:	2a02      	cmp	r2, #2
 80010c4:	d00a      	beq.n	80010dc <HAL_FDCAN_Init+0x374>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80010c6:	6999      	ldr	r1, [r3, #24]
      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010c8:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80010ca:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80010ce:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010d0:	6919      	ldr	r1, [r3, #16]
 80010d2:	f041 0110 	orr.w	r1, r1, #16
 80010d6:	6119      	str	r1, [r3, #16]
      if(hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010d8:	f47f aea2 	bne.w	8000e20 <HAL_FDCAN_Init+0xb8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	e69c      	b.n	8000e1e <HAL_FDCAN_Init+0xb6>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80010e4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010f0:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010f2:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010f4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010f8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 80010fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001100 <HAL_FDCAN_ConfigFilter>:
  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 8001100:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8001104:	2b01      	cmp	r3, #1
{
 8001106:	b530      	push	{r4, r5, lr}
  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 8001108:	d003      	beq.n	8001112 <HAL_FDCAN_ConfigFilter+0x12>
 800110a:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 800110e:	2b02      	cmp	r3, #2
 8001110:	d12c      	bne.n	800116c <HAL_FDCAN_ConfigFilter+0x6c>
    if(sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001112:	680a      	ldr	r2, [r1, #0]
    if(sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001114:	68cb      	ldr	r3, [r1, #12]
 8001116:	690c      	ldr	r4, [r1, #16]
 8001118:	684d      	ldr	r5, [r1, #4]
    if(sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800111a:	b9ba      	cbnz	r2, 800114c <HAL_FDCAN_ConfigFilter+0x4c>
      if(sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800111c:	2b07      	cmp	r3, #7
 800111e:	d10c      	bne.n	800113a <HAL_FDCAN_ConfigFilter+0x3a>
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27)       |
 8001120:	698a      	ldr	r2, [r1, #24]
 8001122:	f042 5360 	orr.w	r3, r2, #939524096	; 0x38000000
                           (sFilterConfig->IsCalibrationMsg << 8) |
 8001126:	69ca      	ldr	r2, [r1, #28]
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27)       |
 8001128:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800112c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *FilterAddress = FilterElementW1;
 8001130:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001132:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    return HAL_OK;
 8001136:	2000      	movs	r0, #0
 8001138:	bd30      	pop	{r4, r5, pc}
        FilterElementW1 = ((sFilterConfig->FilterType << 30)   |
 800113a:	688a      	ldr	r2, [r1, #8]
                           (sFilterConfig->FilterConfig << 27) |
 800113c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30)   |
 800113e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001142:	694a      	ldr	r2, [r1, #20]
 8001144:	4313      	orrs	r3, r2
 8001146:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114a:	e7f1      	b.n	8001130 <HAL_FDCAN_ConfigFilter+0x30>
      if(sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800114c:	2b07      	cmp	r3, #7
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29) | sFilterConfig->FilterID1);
 800114e:	ea44 7443 	orr.w	r4, r4, r3, lsl #29
        FilterElementW2 = ((sFilterConfig->FilterType << 30) | sFilterConfig->FilterID2);
 8001152:	bf1b      	ittet	ne
 8001154:	688a      	ldrne	r2, [r1, #8]
 8001156:	694b      	ldrne	r3, [r1, #20]
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001158:	698b      	ldreq	r3, [r1, #24]
        FilterElementW2 = ((sFilterConfig->FilterType << 30) | sFilterConfig->FilterID2);
 800115a:	ea43 7382 	orrne.w	r3, r3, r2, lsl #30
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4 * 2));
 800115e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001160:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
      *FilterAddress++ = FilterElementW1;
 8001164:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
      *FilterAddress = FilterElementW2;
 8001168:	604b      	str	r3, [r1, #4]
 800116a:	e7e4      	b.n	8001136 <HAL_FDCAN_ConfigFilter+0x36>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800116c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
}
 800117a:	bd30      	pop	{r4, r5, pc}

0800117c <HAL_FDCAN_ConfigGlobalFilter>:
{
 800117c:	b510      	push	{r4, lr}
  if(hfdcan->State == HAL_FDCAN_STATE_READY)
 800117e:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
 8001182:	2c01      	cmp	r4, #1
 8001184:	d10b      	bne.n	800119e <HAL_FDCAN_ConfigGlobalFilter+0x22>
    hfdcan->Instance->GFC = ((NonMatchingStd << 4U) | (NonMatchingExt << 2U) | (RejectRemoteStd << 1U) | RejectRemoteExt);
 8001186:	6804      	ldr	r4, [r0, #0]
 8001188:	9802      	ldr	r0, [sp, #8]
 800118a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800118e:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    return HAL_OK;
 8001192:	2000      	movs	r0, #0
    hfdcan->Instance->GFC = ((NonMatchingStd << 4U) | (NonMatchingExt << 2U) | (RejectRemoteStd << 1U) | RejectRemoteExt);
 8001194:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8001198:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    return HAL_OK;
 800119c:	bd10      	pop	{r4, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800119e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
}
 80011ac:	bd10      	pop	{r4, pc}

080011ae <HAL_FDCAN_Start>:
  if(hfdcan->State == HAL_FDCAN_STATE_READY)
 80011ae:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10c      	bne.n	80011d0 <HAL_FDCAN_Start+0x22>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011b6:	6802      	ldr	r2, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011be:	6993      	ldr	r3, [r2, #24]
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_OK;
 80011cc:	4618      	mov	r0, r3
 80011ce:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011d0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 80011dc:	2001      	movs	r0, #1
}
 80011de:	4770      	bx	lr

080011e0 <HAL_FDCAN_AddMessageToTxBuffer>:
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 80011e2:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
 80011e6:	2c01      	cmp	r4, #1
 80011e8:	d003      	beq.n	80011f2 <HAL_FDCAN_AddMessageToTxBuffer+0x12>
 80011ea:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
 80011ee:	2c02      	cmp	r4, #2
 80011f0:	d123      	bne.n	800123a <HAL_FDCAN_AddMessageToTxBuffer+0x5a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	fa93 f5a3 	rbit	r5, r3
    if(POSITION_VAL(BufferIndex) >= ((hfdcan->Instance->TXBC & FDCAN_TXBC_NDTB) >> 16))
 80011f6:	6806      	ldr	r6, [r0, #0]
 80011f8:	fab5 f585 	clz	r5, r5
 80011fc:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 8001200:	f3c4 4405 	ubfx	r4, r4, #16, #6
 8001204:	42a5      	cmp	r5, r4
 8001206:	d307      	bcc.n	8001218 <HAL_FDCAN_AddMessageToTxBuffer+0x38>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001208:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 800120c:	f043 0320 	orr.w	r3, r3, #32
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001210:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
}
 8001216:	bd70      	pop	{r4, r5, r6, pc}
    if((hfdcan->Instance->TXBRP & BufferIndex) != 0)
 8001218:	f8d6 40cc 	ldr.w	r4, [r6, #204]	; 0xcc
 800121c:	401c      	ands	r4, r3
 800121e:	d004      	beq.n	800122a <HAL_FDCAN_AddMessageToTxBuffer+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PENDING;
 8001220:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	e7f2      	b.n	8001210 <HAL_FDCAN_AddMessageToTxBuffer+0x30>
 800122a:	fa93 f3a3 	rbit	r3, r3
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, POSITION_VAL(BufferIndex));
 800122e:	fab3 f383 	clz	r3, r3
 8001232:	f7ff fd5b 	bl	8000cec <FDCAN_CopyMessageToRAM>
    return HAL_OK;
 8001236:	4620      	mov	r0, r4
 8001238:	bd70      	pop	{r4, r5, r6, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800123a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	e7e5      	b.n	8001210 <HAL_FDCAN_AddMessageToTxBuffer+0x30>

08001244 <HAL_FDCAN_EnableTxBufferRequest>:
  if(hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001244:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8001248:	2b02      	cmp	r3, #2
 800124a:	d104      	bne.n	8001256 <HAL_FDCAN_EnableTxBufferRequest+0x12>
    hfdcan->Instance->TXBAR = BufferIndex;
 800124c:	6803      	ldr	r3, [r0, #0]
    return HAL_OK;
 800124e:	2000      	movs	r0, #0
    hfdcan->Instance->TXBAR = BufferIndex;
 8001250:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
    return HAL_OK;
 8001254:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001256:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
}
 8001264:	4770      	bx	lr
	...

08001268 <HAL_FDCAN_GetRxMessage>:
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hfdcan->State == HAL_FDCAN_STATE_READY) || (hfdcan->State == HAL_FDCAN_STATE_BUSY))
 800126a:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
 800126e:	2c01      	cmp	r4, #1
 8001270:	d004      	beq.n	800127c <HAL_FDCAN_GetRxMessage+0x14>
 8001272:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
 8001276:	2c02      	cmp	r4, #2
 8001278:	f040 8092 	bne.w	80013a0 <HAL_FDCAN_GetRxMessage+0x138>
    if(RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800127c:	2940      	cmp	r1, #64	; 0x40
 800127e:	d155      	bne.n	800132c <HAL_FDCAN_GetRxMessage+0xc4>
      if((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0)
 8001280:	6804      	ldr	r4, [r0, #0]
 8001282:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8001286:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 800128a:	d107      	bne.n	800129c <HAL_FDCAN_GetRxMessage+0x34>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800128c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8001290:	f043 0320 	orr.w	r3, r3, #32
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001294:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 8001298:	2001      	movs	r0, #1
}
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0)
 800129c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 80012a0:	066e      	lsls	r6, r5, #25
 80012a2:	d0f3      	beq.n	800128c <HAL_FDCAN_GetRxMessage+0x24>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> 8);
 80012a4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4));
 80012a8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> 8);
 80012aa:	f3c5 2505 	ubfx	r5, r5, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4));
 80012ae:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80012b0:	00a4      	lsls	r4, r4, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4));
 80012b2:	fb05 6404 	mla	r4, r5, r4, r6
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80012b6:	6827      	ldr	r7, [r4, #0]
 80012b8:	f007 4780 	and.w	r7, r7, #1073741824	; 0x40000000
 80012bc:	6057      	str	r7, [r2, #4]
 80012be:	6826      	ldr	r6, [r4, #0]
    if(pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80012c0:	2f00      	cmp	r7, #0
 80012c2:	d151      	bne.n	8001368 <HAL_FDCAN_GetRxMessage+0x100>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80012c4:	f3c6 468a 	ubfx	r6, r6, #18, #11
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80012c8:	6016      	str	r6, [r2, #0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress++ & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80012ca:	f104 0708 	add.w	r7, r4, #8
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80012ce:	6826      	ldr	r6, [r4, #0]
 80012d0:	3b01      	subs	r3, #1
    for(ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80012d2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80013ac <HAL_FDCAN_GetRxMessage+0x144>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80012d6:	f006 5600 	and.w	r6, r6, #536870912	; 0x20000000
 80012da:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress++ & FDCAN_ELEMENT_MASK_ESI);
 80012dc:	6826      	ldr	r6, [r4, #0]
 80012de:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80012e2:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012e4:	88a6      	ldrh	r6, [r4, #4]
 80012e6:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80012e8:	6866      	ldr	r6, [r4, #4]
 80012ea:	f406 2670 	and.w	r6, r6, #983040	; 0xf0000
 80012ee:	60d6      	str	r6, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80012f0:	6866      	ldr	r6, [r4, #4]
 80012f2:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 80012f6:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80012f8:	6866      	ldr	r6, [r4, #4]
 80012fa:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 80012fe:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001300:	79e6      	ldrb	r6, [r4, #7]
 8001302:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8001306:	6216      	str	r6, [r2, #32]
    pData = (uint8_t *)RxAddress;
 8001308:	463e      	mov	r6, r7
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress++ & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800130a:	6864      	ldr	r4, [r4, #4]
 800130c:	0fe4      	lsrs	r4, r4, #31
 800130e:	6254      	str	r4, [r2, #36]	; 0x24
    for(ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001310:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8001314:	1bf4      	subs	r4, r6, r7
 8001316:	f81c e00e 	ldrb.w	lr, [ip, lr]
 800131a:	4574      	cmp	r4, lr
 800131c:	d327      	bcc.n	800136e <HAL_FDCAN_GetRxMessage+0x106>
    if(RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800131e:	2940      	cmp	r1, #64	; 0x40
 8001320:	6802      	ldr	r2, [r0, #0]
 8001322:	d129      	bne.n	8001378 <HAL_FDCAN_GetRxMessage+0x110>
      hfdcan->Instance->RXF0A = GetIndex;
 8001324:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8
    return HAL_OK;
 8001328:	2000      	movs	r0, #0
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800132c:	2941      	cmp	r1, #65	; 0x41
 800132e:	d111      	bne.n	8001354 <HAL_FDCAN_GetRxMessage+0xec>
      if((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0)
 8001330:	6804      	ldr	r4, [r0, #0]
 8001332:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8001336:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 800133a:	d0a7      	beq.n	800128c <HAL_FDCAN_GetRxMessage+0x24>
      if((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0)
 800133c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8001340:	066d      	lsls	r5, r5, #25
 8001342:	d0a3      	beq.n	800128c <HAL_FDCAN_GetRxMessage+0x24>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> 8);
 8001344:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4));
 8001348:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> 8);
 800134a:	f3c5 2505 	ubfx	r5, r5, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4));
 800134e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8001350:	00a4      	lsls	r4, r4, #2
 8001352:	e7ae      	b.n	80012b2 <HAL_FDCAN_GetRxMessage+0x4a>
      if(RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001354:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001356:	42a1      	cmp	r1, r4
 8001358:	d298      	bcs.n	800128c <HAL_FDCAN_GetRxMessage+0x24>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4));
 800135a:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 800135c:	008c      	lsls	r4, r1, #2
 800135e:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8001360:	fb06 5404 	mla	r4, r6, r4, r5
  uint32_t GetIndex = 0;
 8001364:	2500      	movs	r5, #0
 8001366:	e7a6      	b.n	80012b6 <HAL_FDCAN_GetRxMessage+0x4e>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001368:	f026 4660 	bic.w	r6, r6, #3758096384	; 0xe0000000
 800136c:	e7ac      	b.n	80012c8 <HAL_FDCAN_GetRxMessage+0x60>
      *pRxData++ = *pData++;
 800136e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8001372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001376:	e7cb      	b.n	8001310 <HAL_FDCAN_GetRxMessage+0xa8>
    else if(RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001378:	2941      	cmp	r1, #65	; 0x41
 800137a:	d102      	bne.n	8001382 <HAL_FDCAN_GetRxMessage+0x11a>
      hfdcan->Instance->RXF1A = GetIndex;
 800137c:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
 8001380:	e7d2      	b.n	8001328 <HAL_FDCAN_GetRxMessage+0xc0>
      if(RxLocation < FDCAN_RX_BUFFER32)
 8001382:	291f      	cmp	r1, #31
 8001384:	f04f 0301 	mov.w	r3, #1
 8001388:	d804      	bhi.n	8001394 <HAL_FDCAN_GetRxMessage+0x12c>
        hfdcan->Instance->NDAT1 = (1 << RxLocation);
 800138a:	fa03 f101 	lsl.w	r1, r3, r1
 800138e:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 8001392:	e7c9      	b.n	8001328 <HAL_FDCAN_GetRxMessage+0xc0>
        hfdcan->Instance->NDAT2 = (1 << (RxLocation - 0x20));
 8001394:	3920      	subs	r1, #32
 8001396:	fa03 f101 	lsl.w	r1, r3, r1
 800139a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 800139e:	e7c3      	b.n	8001328 <HAL_FDCAN_GetRxMessage+0xc0>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013a0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	e774      	b.n	8001294 <HAL_FDCAN_GetRxMessage+0x2c>
 80013aa:	bf00      	nop
 80013ac:	0800854b 	.word	0x0800854b

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b4:	680b      	ldr	r3, [r1, #0]
{
 80013b6:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800157c <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013bc:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c0:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013c2:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 80013c4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8001580 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80013c8:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80013cc:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 80013d2:	42af      	cmp	r7, r5
 80013d4:	f040 80b7 	bne.w	8001546 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	684a      	ldr	r2, [r1, #4]
 80013da:	f022 0610 	bic.w	r6, r2, #16
 80013de:	2e02      	cmp	r6, #2
 80013e0:	d116      	bne.n	8001410 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80013e2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013e6:	f003 0b07 	and.w	fp, r3, #7
 80013ea:	f04f 0e0f 	mov.w	lr, #15
 80013ee:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80013f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80013f6:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013fa:	fa0e fe0b 	lsl.w	lr, lr, fp
 80013fe:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001402:	690c      	ldr	r4, [r1, #16]
 8001404:	fa04 f40b 	lsl.w	r4, r4, fp
 8001408:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 800140c:	f8ca 4020 	str.w	r4, [sl, #32]
 8001410:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001414:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8001416:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800141a:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800141e:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001422:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001424:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001428:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142a:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800142c:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001430:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8001434:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001438:	d810      	bhi.n	800145c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 800143a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800143c:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001440:	68ce      	ldr	r6, [r1, #12]
 8001442:	fa06 fe0a 	lsl.w	lr, r6, sl
 8001446:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800144a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800144c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144e:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001452:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8001456:	409e      	lsls	r6, r3
 8001458:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 800145a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800145c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800145e:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001460:	688e      	ldr	r6, [r1, #8]
 8001462:	fa06 f60a 	lsl.w	r6, r6, sl
 8001466:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8001468:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146a:	00d4      	lsls	r4, r2, #3
 800146c:	d56b      	bpl.n	8001546 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8001472:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001476:	f003 0703 	and.w	r7, r3, #3
 800147a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	f044 0402 	orr.w	r4, r4, #2
 8001482:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001486:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001488:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 800148c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001490:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8001494:	f004 0402 	and.w	r4, r4, #2
 8001498:	9403      	str	r4, [sp, #12]
 800149a:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800149c:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80014a0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014a4:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014a8:	4c33      	ldr	r4, [pc, #204]	; (8001578 <HAL_GPIO_Init+0x1c8>)
 80014aa:	42a0      	cmp	r0, r4
 80014ac:	d052      	beq.n	8001554 <HAL_GPIO_Init+0x1a4>
 80014ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014b2:	42a0      	cmp	r0, r4
 80014b4:	d050      	beq.n	8001558 <HAL_GPIO_Init+0x1a8>
 80014b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014ba:	42a0      	cmp	r0, r4
 80014bc:	d04e      	beq.n	800155c <HAL_GPIO_Init+0x1ac>
 80014be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014c2:	42a0      	cmp	r0, r4
 80014c4:	d04c      	beq.n	8001560 <HAL_GPIO_Init+0x1b0>
 80014c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014ca:	42a0      	cmp	r0, r4
 80014cc:	d04a      	beq.n	8001564 <HAL_GPIO_Init+0x1b4>
 80014ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014d2:	42a0      	cmp	r0, r4
 80014d4:	d048      	beq.n	8001568 <HAL_GPIO_Init+0x1b8>
 80014d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014da:	42a0      	cmp	r0, r4
 80014dc:	d046      	beq.n	800156c <HAL_GPIO_Init+0x1bc>
 80014de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e2:	42a0      	cmp	r0, r4
 80014e4:	d044      	beq.n	8001570 <HAL_GPIO_Init+0x1c0>
 80014e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014ea:	42a0      	cmp	r0, r4
 80014ec:	d042      	beq.n	8001574 <HAL_GPIO_Init+0x1c4>
 80014ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014f2:	42a0      	cmp	r0, r4
 80014f4:	bf14      	ite	ne
 80014f6:	240a      	movne	r4, #10
 80014f8:	2409      	moveq	r4, #9
 80014fa:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fc:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014fe:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001502:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001504:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8001508:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 800150c:	bf54      	ite	pl
 800150e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001510:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001512:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 8001514:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8001518:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 800151c:	bf54      	ite	pl
 800151e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001520:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001522:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001524:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8001528:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 800152c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8001530:	bf54      	ite	pl
 8001532:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001534:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001536:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8001538:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800153a:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 800153c:	bf54      	ite	pl
 800153e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001540:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 8001542:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001546:	3301      	adds	r3, #1
 8001548:	2b10      	cmp	r3, #16
 800154a:	f47f af3d 	bne.w	80013c8 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 800154e:	b005      	add	sp, #20
 8001550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001554:	2400      	movs	r4, #0
 8001556:	e7d0      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001558:	2401      	movs	r4, #1
 800155a:	e7ce      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 800155c:	2402      	movs	r4, #2
 800155e:	e7cc      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001560:	2403      	movs	r4, #3
 8001562:	e7ca      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001564:	2404      	movs	r4, #4
 8001566:	e7c8      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001568:	2405      	movs	r4, #5
 800156a:	e7c6      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 800156c:	2406      	movs	r4, #6
 800156e:	e7c4      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001570:	2407      	movs	r4, #7
 8001572:	e7c2      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001574:	2408      	movs	r4, #8
 8001576:	e7c0      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001578:	58020000 	.word	0x58020000
 800157c:	58024400 	.word	0x58024400
 8001580:	58000080 	.word	0x58000080

08001584 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001584:	6903      	ldr	r3, [r0, #16]
 8001586:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001588:	bf14      	ite	ne
 800158a:	2001      	movne	r0, #1
 800158c:	2000      	moveq	r0, #0
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	b10a      	cbz	r2, 8001596 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001592:	8301      	strh	r1, [r0, #24]
 8001594:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001596:	8341      	strh	r1, [r0, #26]
 8001598:	4770      	bx	lr
	...

0800159c <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_I2CEx_EnableFastModePlus+0x28>)
{
 800159e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80015a4:	f042 0202 	orr.w	r2, r2, #2
 80015a8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80015ba:	6853      	ldr	r3, [r2, #4]
 80015bc:	4318      	orrs	r0, r3
 80015be:	6050      	str	r0, [r2, #4]
}
 80015c0:	b002      	add	sp, #8
 80015c2:	4770      	bx	lr
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58000400 	.word	0x58000400

080015cc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80015cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80015ce:	4604      	mov	r4, r0
 80015d0:	b308      	cbz	r0, 8001616 <HAL_IWDG_Init+0x4a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80015d2:	6803      	ldr	r3, [r0, #0]
 80015d4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80015d8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80015da:	f245 5255 	movw	r2, #21845	; 0x5555
 80015de:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80015e0:	6842      	ldr	r2, [r0, #4]
 80015e2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80015e4:	6882      	ldr	r2, [r0, #8]
 80015e6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80015e8:	f7ff f84a 	bl	8000680 <HAL_GetTick>
 80015ec:	4605      	mov	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	68d8      	ldr	r0, [r3, #12]
 80015f2:	b928      	cbnz	r0, 8001600 <HAL_IWDG_Init+0x34>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 80015f4:	6919      	ldr	r1, [r3, #16]
 80015f6:	68e2      	ldr	r2, [r4, #12]
 80015f8:	4291      	cmp	r1, r2
 80015fa:	d008      	beq.n	800160e <HAL_IWDG_Init+0x42>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001600:	f7ff f83e 	bl	8000680 <HAL_GetTick>
 8001604:	1b40      	subs	r0, r0, r5
 8001606:	2830      	cmp	r0, #48	; 0x30
 8001608:	d9f1      	bls.n	80015ee <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 800160a:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800160e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
 8001618:	bd38      	pop	{r3, r4, r5, pc}

0800161a <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800161a:	6803      	ldr	r3, [r0, #0]
 800161c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8001620:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	6803      	ldr	r3, [r0, #0]
{
 800162c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	07d8      	lsls	r0, r3, #31
 8001630:	d45c      	bmi.n	80016ec <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	0799      	lsls	r1, r3, #30
 8001636:	f100 80af 	bmi.w	8001798 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	06d9      	lsls	r1, r3, #27
 800163e:	d525      	bpl.n	800168c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001640:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001648:	2a08      	cmp	r2, #8
 800164a:	d00b      	beq.n	8001664 <HAL_RCC_OscConfig+0x3c>
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001652:	2a18      	cmp	r2, #24
 8001654:	f040 80f7 	bne.w	8001846 <HAL_RCC_OscConfig+0x21e>
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	f040 80f1 	bne.w	8001846 <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001664:	4ba3      	ldr	r3, [pc, #652]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	05d2      	lsls	r2, r2, #23
 800166a:	d502      	bpl.n	8001672 <HAL_RCC_OscConfig+0x4a>
 800166c:	69ea      	ldr	r2, [r5, #28]
 800166e:	2a80      	cmp	r2, #128	; 0x80
 8001670:	d153      	bne.n	800171a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001672:	6858      	ldr	r0, [r3, #4]
 8001674:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001678:	fa92 f2a2 	rbit	r2, r2
 800167c:	fab2 f182 	clz	r1, r2
 8001680:	6a2a      	ldr	r2, [r5, #32]
 8001682:	408a      	lsls	r2, r1
 8001684:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	0719      	lsls	r1, r3, #28
 8001690:	f100 810b 	bmi.w	80018aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	069a      	lsls	r2, r3, #26
 8001698:	f100 8130 	bmi.w	80018fc <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	075c      	lsls	r4, r3, #29
 80016a0:	d51e      	bpl.n	80016e0 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016a2:	4c95      	ldr	r4, [pc, #596]	; (80018f8 <HAL_RCC_OscConfig+0x2d0>)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ac:	f7fe ffe8 	bl	8000680 <HAL_GetTick>
 80016b0:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	05da      	lsls	r2, r3, #23
 80016b6:	f140 8146 	bpl.w	8001946 <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	68ab      	ldr	r3, [r5, #8]
 80016bc:	4c8d      	ldr	r4, [pc, #564]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 80016be:	2b01      	cmp	r3, #1
 80016c0:	f040 8148 	bne.w	8001954 <HAL_RCC_OscConfig+0x32c>
 80016c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016d0:	f7fe ffd6 	bl	8000680 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	4e87      	ldr	r6, [pc, #540]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80016d6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80016da:	079b      	lsls	r3, r3, #30
 80016dc:	f140 8160 	bpl.w	80019a0 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	f040 8163 	bne.w	80019ae <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80016f4:	2a10      	cmp	r2, #16
 80016f6:	d009      	beq.n	800170c <HAL_RCC_OscConfig+0xe4>
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80016fe:	2a18      	cmp	r2, #24
 8001700:	d10d      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d108      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	039a      	lsls	r2, r3, #14
 8001712:	d58e      	bpl.n	8001632 <HAL_RCC_OscConfig+0xa>
 8001714:	686b      	ldr	r3, [r5, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d18b      	bne.n	8001632 <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
 800171c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	686b      	ldr	r3, [r5, #4]
 8001720:	4c74      	ldr	r4, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d112      	bne.n	800174e <HAL_RCC_OscConfig+0x126>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001730:	f7fe ffa6 	bl	8000680 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001734:	4c6f      	ldr	r4, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001736:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	039b      	lsls	r3, r3, #14
 800173c:	f53f af79 	bmi.w	8001632 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7fe ff9e 	bl	8000680 <HAL_GetTick>
 8001744:	1b80      	subs	r0, r0, r6
 8001746:	2864      	cmp	r0, #100	; 0x64
 8001748:	d9f6      	bls.n	8001738 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800174a:	2003      	movs	r0, #3
 800174c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174e:	b9a3      	cbnz	r3, 800177a <HAL_RCC_OscConfig+0x152>
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6023      	str	r3, [r4, #0]
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001760:	f7fe ff8e 	bl	8000680 <HAL_GetTick>
 8001764:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	039f      	lsls	r7, r3, #14
 800176a:	f57f af62 	bpl.w	8001632 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176e:	f7fe ff87 	bl	8000680 <HAL_GetTick>
 8001772:	1b80      	subs	r0, r0, r6
 8001774:	2864      	cmp	r0, #100	; 0x64
 8001776:	d9f6      	bls.n	8001766 <HAL_RCC_OscConfig+0x13e>
 8001778:	e7e7      	b.n	800174a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	d103      	bne.n	800178a <HAL_RCC_OscConfig+0x162>
 8001782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001786:	6023      	str	r3, [r4, #0]
 8001788:	e7ce      	b.n	8001728 <HAL_RCC_OscConfig+0x100>
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6023      	str	r3, [r4, #0]
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001796:	e7ca      	b.n	800172e <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 800179a:	68e9      	ldr	r1, [r5, #12]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	f012 0f38 	tst.w	r2, #56	; 0x38
 80017a2:	d007      	beq.n	80017b4 <HAL_RCC_OscConfig+0x18c>
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80017aa:	2a18      	cmp	r2, #24
 80017ac:	d128      	bne.n	8001800 <HAL_RCC_OscConfig+0x1d8>
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	079c      	lsls	r4, r3, #30
 80017b2:	d125      	bne.n	8001800 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	4a4f      	ldr	r2, [pc, #316]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	0758      	lsls	r0, r3, #29
 80017ba:	d501      	bpl.n	80017c0 <HAL_RCC_OscConfig+0x198>
 80017bc:	2900      	cmp	r1, #0
 80017be:	d0ac      	beq.n	800171a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017c0:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4c4c      	ldr	r4, [pc, #304]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017c4:	f023 0319 	bic.w	r3, r3, #25
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017cc:	f7fe ff58 	bl	8000680 <HAL_GetTick>
 80017d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	075b      	lsls	r3, r3, #29
 80017d6:	d50d      	bpl.n	80017f4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	6861      	ldr	r1, [r4, #4]
 80017da:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	fab3 f283 	clz	r2, r3
 80017e6:	692b      	ldr	r3, [r5, #16]
 80017e8:	4093      	lsls	r3, r2
 80017ea:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 80017ee:	4313      	orrs	r3, r2
 80017f0:	6063      	str	r3, [r4, #4]
 80017f2:	e722      	b.n	800163a <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7fe ff44 	bl	8000680 <HAL_GetTick>
 80017f8:	1b80      	subs	r0, r0, r6
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9e9      	bls.n	80017d2 <HAL_RCC_OscConfig+0x1aa>
 80017fe:	e7a4      	b.n	800174a <HAL_RCC_OscConfig+0x122>
 8001800:	4c3c      	ldr	r4, [pc, #240]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001802:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001804:	b179      	cbz	r1, 8001826 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001806:	f023 0319 	bic.w	r3, r3, #25
 800180a:	430b      	orrs	r3, r1
 800180c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800180e:	f7fe ff37 	bl	8000680 <HAL_GetTick>
 8001812:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	075f      	lsls	r7, r3, #29
 8001818:	d4de      	bmi.n	80017d8 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181a:	f7fe ff31 	bl	8000680 <HAL_GetTick>
 800181e:	1b80      	subs	r0, r0, r6
 8001820:	2802      	cmp	r0, #2
 8001822:	d9f7      	bls.n	8001814 <HAL_RCC_OscConfig+0x1ec>
 8001824:	e791      	b.n	800174a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800182c:	f7fe ff28 	bl	8000680 <HAL_GetTick>
 8001830:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	0758      	lsls	r0, r3, #29
 8001836:	f57f af00 	bpl.w	800163a <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7fe ff21 	bl	8000680 <HAL_GetTick>
 800183e:	1b80      	subs	r0, r0, r6
 8001840:	2802      	cmp	r0, #2
 8001842:	d9f6      	bls.n	8001832 <HAL_RCC_OscConfig+0x20a>
 8001844:	e781      	b.n	800174a <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001846:	69eb      	ldr	r3, [r5, #28]
 8001848:	4c2a      	ldr	r4, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 800184a:	b1eb      	cbz	r3, 8001888 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001852:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001854:	f7fe ff14 	bl	8000680 <HAL_GetTick>
 8001858:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	05df      	lsls	r7, r3, #23
 800185e:	d50d      	bpl.n	800187c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001860:	6861      	ldr	r1, [r4, #4]
 8001862:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	fab3 f283 	clz	r2, r3
 800186e:	6a2b      	ldr	r3, [r5, #32]
 8001870:	4093      	lsls	r3, r2
 8001872:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8001876:	4313      	orrs	r3, r2
 8001878:	6063      	str	r3, [r4, #4]
 800187a:	e707      	b.n	800168c <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800187c:	f7fe ff00 	bl	8000680 <HAL_GetTick>
 8001880:	1b80      	subs	r0, r0, r6
 8001882:	2802      	cmp	r0, #2
 8001884:	d9e9      	bls.n	800185a <HAL_RCC_OscConfig+0x232>
 8001886:	e760      	b.n	800174a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800188e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001890:	f7fe fef6 	bl	8000680 <HAL_GetTick>
 8001894:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	05d8      	lsls	r0, r3, #23
 800189a:	f57f aef7 	bpl.w	800168c <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800189e:	f7fe feef 	bl	8000680 <HAL_GetTick>
 80018a2:	1b80      	subs	r0, r0, r6
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9f6      	bls.n	8001896 <HAL_RCC_OscConfig+0x26e>
 80018a8:	e74f      	b.n	800174a <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018aa:	696b      	ldr	r3, [r5, #20]
 80018ac:	4c11      	ldr	r4, [pc, #68]	; (80018f4 <HAL_RCC_OscConfig+0x2cc>)
 80018ae:	b183      	cbz	r3, 80018d2 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 80018b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 80018b8:	f7fe fee2 	bl	8000680 <HAL_GetTick>
 80018bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80018c0:	079b      	lsls	r3, r3, #30
 80018c2:	f53f aee7 	bmi.w	8001694 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7fe fedb 	bl	8000680 <HAL_GetTick>
 80018ca:	1b80      	subs	r0, r0, r6
 80018cc:	2802      	cmp	r0, #2
 80018ce:	d9f6      	bls.n	80018be <HAL_RCC_OscConfig+0x296>
 80018d0:	e73b      	b.n	800174a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80018d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 80018da:	f7fe fed1 	bl	8000680 <HAL_GetTick>
 80018de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80018e2:	079f      	lsls	r7, r3, #30
 80018e4:	f57f aed6 	bpl.w	8001694 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e8:	f7fe feca 	bl	8000680 <HAL_GetTick>
 80018ec:	1b80      	subs	r0, r0, r6
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d9f6      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2b8>
 80018f2:	e72a      	b.n	800174a <HAL_RCC_OscConfig+0x122>
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80018fc:	69ab      	ldr	r3, [r5, #24]
 80018fe:	4c6e      	ldr	r4, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0x490>)
 8001900:	b183      	cbz	r3, 8001924 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001908:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800190a:	f7fe feb9 	bl	8000680 <HAL_GetTick>
 800190e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	0498      	lsls	r0, r3, #18
 8001914:	f53f aec2 	bmi.w	800169c <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001918:	f7fe feb2 	bl	8000680 <HAL_GetTick>
 800191c:	1b80      	subs	r0, r0, r6
 800191e:	2802      	cmp	r0, #2
 8001920:	d9f6      	bls.n	8001910 <HAL_RCC_OscConfig+0x2e8>
 8001922:	e712      	b.n	800174a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800192a:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800192c:	f7fe fea8 	bl	8000680 <HAL_GetTick>
 8001930:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	0499      	lsls	r1, r3, #18
 8001936:	f57f aeb1 	bpl.w	800169c <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800193a:	f7fe fea1 	bl	8000680 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	2802      	cmp	r0, #2
 8001942:	d9f6      	bls.n	8001932 <HAL_RCC_OscConfig+0x30a>
 8001944:	e701      	b.n	800174a <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7fe fe9b 	bl	8000680 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	2864      	cmp	r0, #100	; 0x64
 800194e:	f67f aeb0 	bls.w	80016b2 <HAL_RCC_OscConfig+0x8a>
 8001952:	e6fa      	b.n	800174a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	b9b3      	cbnz	r3, 8001984 <HAL_RCC_OscConfig+0x35c>
 8001956:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6723      	str	r3, [r4, #112]	; 0x70
 8001962:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 800196a:	f7fe fe89 	bl	8000680 <HAL_GetTick>
 800196e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001972:	0798      	lsls	r0, r3, #30
 8001974:	f57f aeb4 	bpl.w	80016e0 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7fe fe82 	bl	8000680 <HAL_GetTick>
 800197c:	1b80      	subs	r0, r0, r6
 800197e:	42b8      	cmp	r0, r7
 8001980:	d9f6      	bls.n	8001970 <HAL_RCC_OscConfig+0x348>
 8001982:	e6e2      	b.n	800174a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001984:	2b05      	cmp	r3, #5
 8001986:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001988:	d103      	bne.n	8001992 <HAL_RCC_OscConfig+0x36a>
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6723      	str	r3, [r4, #112]	; 0x70
 8001990:	e698      	b.n	80016c4 <HAL_RCC_OscConfig+0x9c>
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6723      	str	r3, [r4, #112]	; 0x70
 8001998:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	e694      	b.n	80016ca <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7fe fe6e 	bl	8000680 <HAL_GetTick>
 80019a4:	1bc0      	subs	r0, r0, r7
 80019a6:	42a0      	cmp	r0, r4
 80019a8:	f67f ae96 	bls.w	80016d8 <HAL_RCC_OscConfig+0xb0>
 80019ac:	e6cd      	b.n	800174a <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019ae:	4c42      	ldr	r4, [pc, #264]	; (8001ab8 <HAL_RCC_OscConfig+0x490>)
 80019b0:	6923      	ldr	r3, [r4, #16]
 80019b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b6:	2b18      	cmp	r3, #24
 80019b8:	f43f aeaf 	beq.w	800171a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 80019bc:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80019c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c4:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	d169      	bne.n	8001a9c <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 80019c8:	f7fe fe5a 	bl	8000680 <HAL_GetTick>
 80019cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	0199      	lsls	r1, r3, #6
 80019d2:	d45d      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80019d8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80019dc:	f023 0303 	bic.w	r3, r3, #3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80019e4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80019e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80019ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019ec:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80019ee:	3b01      	subs	r3, #1
 80019f0:	3a01      	subs	r2, #1
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	0412      	lsls	r2, r2, #16
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80019fc:	4313      	orrs	r3, r2
 80019fe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001a00:	3a01      	subs	r2, #1
 8001a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a06:	4313      	orrs	r3, r2
 8001a08:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	0612      	lsls	r2, r2, #24
 8001a0e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001a12:	4313      	orrs	r3, r2
 8001a14:	6323      	str	r3, [r4, #48]	; 0x30
 8001a16:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a1a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	fab3 f183 	clz	r1, r3
 8001a24:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001a28:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001a2a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a2e:	408b      	lsls	r3, r1
 8001a30:	4313      	orrs	r3, r2
 8001a32:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a36:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001a38:	f023 030c 	bic.w	r3, r3, #12
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a42:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001a44:	f023 0302 	bic.w	r3, r3, #2
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a62:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a74:	f7fe fe04 	bl	8000680 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a78:	4c0f      	ldr	r4, [pc, #60]	; (8001ab8 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001a7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	019a      	lsls	r2, r3, #6
 8001a80:	f53f ae32 	bmi.w	80016e8 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7fe fdfc 	bl	8000680 <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	d9f6      	bls.n	8001a7c <HAL_RCC_OscConfig+0x454>
 8001a8e:	e65c      	b.n	800174a <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7fe fdf6 	bl	8000680 <HAL_GetTick>
 8001a94:	1b80      	subs	r0, r0, r6
 8001a96:	2802      	cmp	r0, #2
 8001a98:	d999      	bls.n	80019ce <HAL_RCC_OscConfig+0x3a6>
 8001a9a:	e656      	b.n	800174a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fdf0 	bl	8000680 <HAL_GetTick>
 8001aa0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	019b      	lsls	r3, r3, #6
 8001aa6:	f57f ae1f 	bpl.w	80016e8 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7fe fde9 	bl	8000680 <HAL_GetTick>
 8001aae:	1b40      	subs	r0, r0, r5
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f6      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x47a>
 8001ab4:	e649      	b.n	800174a <HAL_RCC_OscConfig+0x122>
 8001ab6:	bf00      	nop
 8001ab8:	58024400 	.word	0x58024400

08001abc <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abc:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x124>)
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001ac4:	2a10      	cmp	r2, #16
{
 8001ac6:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac8:	d00e      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x2c>
 8001aca:	2a18      	cmp	r2, #24
 8001acc:	d00e      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x30>
 8001ace:	2a00      	cmp	r2, #0
 8001ad0:	f040 8084 	bne.w	8001bdc <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4843      	ldr	r0, [pc, #268]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ad8:	f012 0f20 	tst.w	r2, #32
 8001adc:	d07f      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001ae4:	40d8      	lsrs	r0, r3
 8001ae6:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ae8:	483f      	ldr	r0, [pc, #252]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001aea:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001aee:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001af4:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001af8:	f001 0101 	and.w	r1, r1, #1
 8001afc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8001bec <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001b00:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001b04:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b06:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001b0a:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8001b0e:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001b10:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001b14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x64>
 8001b1a:	d30e      	bcc.n	8001b3a <HAL_RCC_GetSysClockFreq+0x7e>
 8001b1c:	2a02      	cmp	r2, #2
 8001b1e:	d04c      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b28:	ee07 3a10 	vmov	s14, r3
 8001b2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b30:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b38:	e04b      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f012 0f20 	tst.w	r2, #32
 8001b40:	4a28      	ldr	r2, [pc, #160]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001b42:	d026      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b44:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b48:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b50:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001b52:	fbb2 f2f0 	udiv	r2, r2, r0
 8001b56:	ee07 2a10 	vmov	s14, r2
 8001b5a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001b5e:	ee07 3a10 	vmov	s14, r3
 8001b62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b66:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6e:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x124>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001b7a:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001b7c:	ee07 3a10 	vmov	s14, r3
 8001b80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001b84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b88:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001b8c:	ee17 0a90 	vmov	r0, s15
 8001b90:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b98:	ee07 3a10 	vmov	s14, r3
 8001b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ba0:	fbb2 f3f0 	udiv	r3, r2, r0
 8001ba4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bac:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb8:	e7db      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc2:	ee07 3a10 	vmov	s14, r3
 8001bc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bca:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001bce:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001bd2:	fbb2 f2f0 	udiv	r2, r2, r0
 8001bd6:	ee07 2a90 	vmov	s15, r2
 8001bda:	e7e9      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001bde:	bd10      	pop	{r4, pc}
 8001be0:	58024400 	.word	0x58024400
 8001be4:	03d09000 	.word	0x03d09000
 8001be8:	01312d00 	.word	0x01312d00
 8001bec:	39000000 	.word	0x39000000
 8001bf0:	003d0900 	.word	0x003d0900

08001bf4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bf4:	4a68      	ldr	r2, [pc, #416]	; (8001d98 <HAL_RCC_ClockConfig+0x1a4>)
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	428b      	cmp	r3, r1
{
 8001bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c06:	d342      	bcc.n	8001c8e <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	0797      	lsls	r7, r2, #30
 8001c0c:	d44c      	bmi.n	8001ca8 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0e:	07d6      	lsls	r6, r2, #31
 8001c10:	d452      	bmi.n	8001cb8 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c12:	4a61      	ldr	r2, [pc, #388]	; (8001d98 <HAL_RCC_ClockConfig+0x1a4>)
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	429d      	cmp	r5, r3
 8001c1c:	f0c0 80a8 	bcc.w	8001d70 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	0755      	lsls	r5, r2, #29
 8001c24:	f100 80af 	bmi.w	8001d86 <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	0710      	lsls	r0, r2, #28
 8001c2a:	d506      	bpl.n	8001c3a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c2c:	495b      	ldr	r1, [pc, #364]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001c2e:	6960      	ldr	r0, [r4, #20]
 8001c30:	69cb      	ldr	r3, [r1, #28]
 8001c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c36:	4303      	orrs	r3, r0
 8001c38:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	06d1      	lsls	r1, r2, #27
 8001c3c:	d506      	bpl.n	8001c4c <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c3e:	4957      	ldr	r1, [pc, #348]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001c40:	69a0      	ldr	r0, [r4, #24]
 8001c42:	69cb      	ldr	r3, [r1, #28]
 8001c44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c48:	4303      	orrs	r3, r0
 8001c4a:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c4c:	0693      	lsls	r3, r2, #26
 8001c4e:	d506      	bpl.n	8001c5e <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001c52:	69e1      	ldr	r1, [r4, #28]
 8001c54:	6a13      	ldr	r3, [r2, #32]
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001c5e:	f7ff ff2d 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	fa92 f2a2 	rbit	r2, r2
 8001c6e:	fab2 f282 	clz	r2, r2
 8001c72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c76:	40d3      	lsrs	r3, r2
 8001c78:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_RCC_ClockConfig+0x1ac>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	40d8      	lsrs	r0, r3
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c80:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7fe fcbc 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
}
 8001c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f023 0307 	bic.w	r3, r3, #7
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	4299      	cmp	r1, r3
 8001ca0:	d0b2      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	493c      	ldr	r1, [pc, #240]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001caa:	68e0      	ldr	r0, [r4, #12]
 8001cac:	698b      	ldr	r3, [r1, #24]
 8001cae:	f023 030f 	bic.w	r3, r3, #15
 8001cb2:	4303      	orrs	r3, r0
 8001cb4:	618b      	str	r3, [r1, #24]
 8001cb6:	e7aa      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cb8:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001cba:	68a1      	ldr	r1, [r4, #8]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	2902      	cmp	r1, #2
 8001ccc:	d11d      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	d0e6      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd6:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001cda:	4f30      	ldr	r7, [pc, #192]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cdc:	f022 0207 	bic.w	r2, r2, #7
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001ce4:	f7fe fccc 	bl	8000680 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce8:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8001cea:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d119      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d08b      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfa:	f7fe fcc1 	bl	8000680 <HAL_GetTick>
 8001cfe:	1b80      	subs	r0, r0, r6
 8001d00:	4540      	cmp	r0, r8
 8001d02:	d9f5      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0a:	2903      	cmp	r1, #3
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d12:	e7de      	b.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d14:	2901      	cmp	r1, #1
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001d18:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d1c:	e7d9      	b.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	f012 0f04 	tst.w	r2, #4
 8001d22:	e7d6      	b.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d2e:	2b18      	cmp	r3, #24
 8001d30:	f43f af6f 	beq.w	8001c12 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe fca4 	bl	8000680 <HAL_GetTick>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	4540      	cmp	r0, r8
 8001d3c:	d9f4      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x134>
 8001d3e:	e7e1      	b.n	8001d04 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d110      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	f43f af61 	beq.w	8001c12 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fc96 	bl	8000680 <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	4540      	cmp	r0, r8
 8001d58:	d9f4      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x150>
 8001d5a:	e7d3      	b.n	8001d04 <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe fc90 	bl	8000680 <HAL_GetTick>
 8001d60:	1b80      	subs	r0, r0, r6
 8001d62:	4540      	cmp	r0, r8
 8001d64:	d8ce      	bhi.n	8001d04 <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001d6c:	d1f6      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x168>
 8001d6e:	e750      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	432b      	orrs	r3, r5
 8001d78:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	429d      	cmp	r5, r3
 8001d82:	d18e      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
 8001d84:	e74c      	b.n	8001c20 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d86:	4905      	ldr	r1, [pc, #20]	; (8001d9c <HAL_RCC_ClockConfig+0x1a8>)
 8001d88:	6920      	ldr	r0, [r4, #16]
 8001d8a:	698b      	ldr	r3, [r1, #24]
 8001d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d90:	4303      	orrs	r3, r0
 8001d92:	618b      	str	r3, [r1, #24]
 8001d94:	e748      	b.n	8001c28 <HAL_RCC_ClockConfig+0x34>
 8001d96:	bf00      	nop
 8001d98:	52002000 	.word	0x52002000
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	08008620 	.word	0x08008620
 8001da4:	20000068 	.word	0x20000068

08001da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8001daa:	f000 fed5 	bl	8002b58 <HAL_RCCEx_GetD1SysClockFreq>
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x28>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	fa92 f2a2 	rbit	r2, r2
 8001db8:	fab2 f282 	clz	r2, r2
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	40d3      	lsrs	r3, r2
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	40d8      	lsrs	r0, r3
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_GetHCLKFreq+0x30>)
 8001dca:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001dcc:	bd08      	pop	{r3, pc}
 8001dce:	bf00      	nop
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	08008620 	.word	0x08008620
 8001dd8:	2000006c 	.word	0x2000006c

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8001dde:	f7ff ffe3 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de4:	2210      	movs	r2, #16
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	fa92 f2a2 	rbit	r2, r2
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df4:	40d3      	lsrs	r3, r2
 8001df6:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dfa:	40d8      	lsrs	r0, r3
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	58024400 	.word	0x58024400
 8001e04:	08008620 	.word	0x08008620

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8001e0a:	f7ff ffcd 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	fa92 f2a2 	rbit	r2, r2
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e22:	40d3      	lsrs	r3, r2
 8001e24:	4a02      	ldr	r2, [pc, #8]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e28:	40d8      	lsrs	r0, r3
 8001e2a:	bd08      	pop	{r3, pc}
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	08008620 	.word	0x08008620

08001e34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e36:	4c31      	ldr	r4, [pc, #196]	; (8001efc <RCCEx_PLL2_Config+0xc8>)
{
 8001e38:	4606      	mov	r6, r0
 8001e3a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d058      	beq.n	8001ef8 <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e4c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4e:	f7fe fc17 	bl	8000680 <HAL_GetTick>
 8001e52:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	011a      	lsls	r2, r3, #4
 8001e58:	d43a      	bmi.n	8001ed0 <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e5c:	6832      	ldr	r2, [r6, #0]
 8001e5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e62:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001e66:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e68:	68b3      	ldr	r3, [r6, #8]
 8001e6a:	68f2      	ldr	r2, [r6, #12]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	0412      	lsls	r2, r2, #16
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	6872      	ldr	r2, [r6, #4]
 8001e7e:	3a01      	subs	r2, #1
 8001e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e84:	4313      	orrs	r3, r2
 8001e86:	6932      	ldr	r2, [r6, #16]
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	0612      	lsls	r2, r2, #24
 8001e8c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001e90:	4313      	orrs	r3, r2
 8001e92:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e96:	6972      	ldr	r2, [r6, #20]
 8001e98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001ea0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ea2:	69b2      	ldr	r2, [r6, #24]
 8001ea4:	f023 0320 	bic.w	r3, r3, #32
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001eae:	b9b5      	cbnz	r5, 8001ede <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001eb6:	4c11      	ldr	r4, [pc, #68]	; (8001efc <RCCEx_PLL2_Config+0xc8>)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ebe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec0:	f7fe fbde 	bl	8000680 <HAL_GetTick>
 8001ec4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	d50f      	bpl.n	8001eec <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8001ecc:	2000      	movs	r0, #0
 8001ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001ed0:	f7fe fbd6 	bl	8000680 <HAL_GetTick>
 8001ed4:	1bc0      	subs	r0, r0, r7
 8001ed6:	2802      	cmp	r0, #2
 8001ed8:	d9bc      	bls.n	8001e54 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001eda:	2003      	movs	r0, #3
 8001edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001ede:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001ee0:	bf0c      	ite	eq
 8001ee2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001ee6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001eea:	e7e3      	b.n	8001eb4 <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001eec:	f7fe fbc8 	bl	8000680 <HAL_GetTick>
 8001ef0:	1b40      	subs	r0, r0, r5
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d9e7      	bls.n	8001ec6 <RCCEx_PLL2_Config+0x92>
 8001ef6:	e7f0      	b.n	8001eda <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
}
 8001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001efc:	58024400 	.word	0x58024400

08001f00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f02:	4c31      	ldr	r4, [pc, #196]	; (8001fc8 <RCCEx_PLL3_Config+0xc8>)
{
 8001f04:	4606      	mov	r6, r0
 8001f06:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d058      	beq.n	8001fc4 <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1a:	f7fe fbb1 	bl	8000680 <HAL_GetTick>
 8001f1e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	009a      	lsls	r2, r3, #2
 8001f24:	d43a      	bmi.n	8001f9c <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f28:	6832      	ldr	r2, [r6, #0]
 8001f2a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001f2e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001f32:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f34:	68b3      	ldr	r3, [r6, #8]
 8001f36:	68f2      	ldr	r2, [r6, #12]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	025b      	lsls	r3, r3, #9
 8001f3e:	0412      	lsls	r2, r2, #16
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001f46:	4313      	orrs	r3, r2
 8001f48:	6872      	ldr	r2, [r6, #4]
 8001f4a:	3a01      	subs	r2, #1
 8001f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f50:	4313      	orrs	r3, r2
 8001f52:	6932      	ldr	r2, [r6, #16]
 8001f54:	3a01      	subs	r2, #1
 8001f56:	0612      	lsls	r2, r2, #24
 8001f58:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001f60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f62:	6972      	ldr	r2, [r6, #20]
 8001f64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001f6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f6e:	69b2      	ldr	r2, [r6, #24]
 8001f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f74:	4313      	orrs	r3, r2
 8001f76:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001f7a:	b9b5      	cbnz	r5, 8001faa <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001f80:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001f82:	4c11      	ldr	r4, [pc, #68]	; (8001fc8 <RCCEx_PLL3_Config+0xc8>)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fb78 	bl	8000680 <HAL_GetTick>
 8001f90:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	d50f      	bpl.n	8001fb8 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8001f98:	2000      	movs	r0, #0
 8001f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f9c:	f7fe fb70 	bl	8000680 <HAL_GetTick>
 8001fa0:	1bc0      	subs	r0, r0, r7
 8001fa2:	2802      	cmp	r0, #2
 8001fa4:	d9bc      	bls.n	8001f20 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001faa:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001fac:	bf0c      	ite	eq
 8001fae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001fb2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	e7e3      	b.n	8001f80 <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001fb8:	f7fe fb62 	bl	8000680 <HAL_GetTick>
 8001fbc:	1b40      	subs	r0, r0, r5
 8001fbe:	2802      	cmp	r0, #2
 8001fc0:	d9e7      	bls.n	8001f92 <RCCEx_PLL3_Config+0x92>
 8001fc2:	e7f0      	b.n	8001fa6 <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
}
 8001fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc8:	58024400 	.word	0x58024400

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
{
 8001fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fd0:	6804      	ldr	r4, [r0, #0]
{
 8001fd2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fd4:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 8001fd8:	d014      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe0:	d018      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001fe2:	d802      	bhi.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fe4:	b183      	cbz	r3, 8002008 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001fe6:	2401      	movs	r4, #1
 8001fe8:	e01b      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fee:	d023      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001ff0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ff4:	d1f7      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001ff6:	4aa6      	ldr	r2, [pc, #664]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ff8:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8001ffa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ffc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002000:	430b      	orrs	r3, r1
 8002002:	6513      	str	r3, [r2, #80]	; 0x50
 8002004:	2400      	movs	r4, #0
 8002006:	e00c      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002008:	4aa1      	ldr	r2, [pc, #644]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800200a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002012:	e7f0      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002014:	2102      	movs	r1, #2
 8002016:	1d28      	adds	r0, r5, #4
 8002018:	f7ff ff0c 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800201c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800201e:	2800      	cmp	r0, #0
 8002020:	d0e9      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002022:	682b      	ldr	r3, [r5, #0]
 8002024:	05de      	lsls	r6, r3, #23
 8002026:	d53c      	bpl.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002028:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800202a:	2b04      	cmp	r3, #4
 800202c:	d834      	bhi.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800202e:	e8df f003 	tbb	[pc, r3]
 8002032:	1009      	.short	0x1009
 8002034:	0e2d      	.short	0x0e2d
 8002036:	0e          	.byte	0x0e
 8002037:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002038:	2102      	movs	r1, #2
 800203a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800203e:	f7ff ff5f 	bl	8001f00 <RCCEx_PLL3_Config>
 8002042:	e7eb      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002044:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002046:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800204e:	4626      	mov	r6, r4
 8002050:	e004      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002052:	2100      	movs	r1, #0
 8002054:	1d28      	adds	r0, r5, #4
 8002056:	f7ff feed 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800205a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800205c:	b9ee      	cbnz	r6, 800209a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800205e:	4a8c      	ldr	r2, [pc, #560]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002060:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8002062:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002064:	f023 0307 	bic.w	r3, r3, #7
 8002068:	430b      	orrs	r3, r1
 800206a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	0598      	lsls	r0, r3, #22
 8002070:	d527      	bpl.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002072:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	d043      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002078:	d815      	bhi.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d034      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d038      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 8002082:	2601      	movs	r6, #1
      status |= ret;
 8002084:	ea44 0006 	orr.w	r0, r4, r6
 8002088:	b2c4      	uxtb	r4, r0
 800208a:	e01a      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800208c:	2100      	movs	r1, #0
 800208e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002092:	f7ff ff35 	bl	8001f00 <RCCEx_PLL3_Config>
 8002096:	e7e0      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 8002098:	2601      	movs	r6, #1
      status |= ret;
 800209a:	ea44 0006 	orr.w	r0, r4, r6
 800209e:	b2c4      	uxtb	r4, r0
 80020a0:	e7e4      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80020a2:	4626      	mov	r6, r4
 80020a4:	e7e2      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 80020a6:	2bc0      	cmp	r3, #192	; 0xc0
 80020a8:	d002      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80020aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ae:	d1e8      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 80020b0:	2e00      	cmp	r6, #0
 80020b2:	d1e7      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80020b4:	4a76      	ldr	r2, [pc, #472]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020b6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80020b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80020ba:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80020be:	430b      	orrs	r3, r1
 80020c0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	0559      	lsls	r1, r3, #21
 80020c6:	d531      	bpl.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 80020c8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80020cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d0:	d04b      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80020d2:	d81b      	bhi.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x140>
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03c      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80020d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020dc:	d03f      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 80020de:	2601      	movs	r6, #1
      status |= ret;
 80020e0:	ea44 0006 	orr.w	r0, r4, r6
 80020e4:	b2c4      	uxtb	r4, r0
 80020e6:	e021      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e8:	4a69      	ldr	r2, [pc, #420]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80020f2:	e7dd      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020f4:	2100      	movs	r1, #0
 80020f6:	1d28      	adds	r0, r5, #4
 80020f8:	f7ff fe9c 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020fc:	4606      	mov	r6, r0
      break;
 80020fe:	e7d7      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002100:	2100      	movs	r1, #0
 8002102:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002106:	f7ff fefb 	bl	8001f00 <RCCEx_PLL3_Config>
 800210a:	e7f7      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 800210c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002110:	d002      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002116:	d1e2      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8002118:	2e00      	cmp	r6, #0
 800211a:	d1e1      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800211c:	4a5c      	ldr	r2, [pc, #368]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8002122:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002124:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002128:	430b      	orrs	r3, r1
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	051a      	lsls	r2, r3, #20
 8002130:	d531      	bpl.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002132:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8002136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800213a:	d045      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800213c:	d81b      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d036      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002142:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002146:	d039      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 8002148:	2601      	movs	r6, #1
      status |= ret;
 800214a:	ea44 0006 	orr.w	r0, r4, r6
 800214e:	b2c4      	uxtb	r4, r0
 8002150:	e021      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002152:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002154:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800215c:	e7dc      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800215e:	2100      	movs	r1, #0
 8002160:	1d28      	adds	r0, r5, #4
 8002162:	f7ff fe67 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002166:	4606      	mov	r6, r0
      break;
 8002168:	e7d6      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800216a:	2100      	movs	r1, #0
 800216c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002170:	f7ff fec6 	bl	8001f00 <RCCEx_PLL3_Config>
 8002174:	e7f7      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002176:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800217a:	d002      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800217c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002180:	d1e2      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 8002182:	2e00      	cmp	r6, #0
 8002184:	d1e1      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002186:	4a42      	ldr	r2, [pc, #264]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002188:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800218c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800218e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002192:	430b      	orrs	r3, r1
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	d528      	bpl.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 800219c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800219e:	2b10      	cmp	r3, #16
 80021a0:	d037      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80021a2:	d817      	bhi.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80021a4:	b1d3      	cbz	r3, 80021dc <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 80021a6:	2601      	movs	r6, #1
      status |= ret;
 80021a8:	ea44 0006 	orr.w	r0, r4, r6
 80021ac:	b2c4      	uxtb	r4, r0
 80021ae:	e01e      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021b0:	4a37      	ldr	r2, [pc, #220]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80021ba:	e7e2      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021bc:	2100      	movs	r1, #0
 80021be:	1d28      	adds	r0, r5, #4
 80021c0:	f7ff fe38 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021c4:	4606      	mov	r6, r0
      break;
 80021c6:	e7dc      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021c8:	2100      	movs	r1, #0
 80021ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80021ce:	f7ff fe97 	bl	8001f00 <RCCEx_PLL3_Config>
 80021d2:	e7f7      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d022      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x252>
 80021d8:	2b30      	cmp	r3, #48	; 0x30
 80021da:	d1e4      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 80021dc:	2e00      	cmp	r6, #0
 80021de:	d1e3      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021e0:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021e2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80021e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021ea:	430b      	orrs	r3, r1
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80021ee:	682b      	ldr	r3, [r5, #0]
 80021f0:	04df      	lsls	r7, r3, #19
 80021f2:	d529      	bpl.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80021f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80021f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fa:	d042      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80021fc:	d815      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d033      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8002202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002206:	d036      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 8002208:	2601      	movs	r6, #1
      status |= ret;
 800220a:	ea44 0006 	orr.w	r0, r4, r6
 800220e:	b2c4      	uxtb	r4, r0
 8002210:	e01a      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002212:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002214:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800221c:	e7de      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800221e:	2102      	movs	r1, #2
 8002220:	1d28      	adds	r0, r5, #4
 8002222:	f7ff fe07 	bl	8001e34 <RCCEx_PLL2_Config>
 8002226:	4606      	mov	r6, r0
      break;
 8002228:	e7d8      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 800222a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800222e:	d002      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002234:	d1e8      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 8002236:	2e00      	cmp	r6, #0
 8002238:	d1e7      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800223c:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800223e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002244:	430b      	orrs	r3, r1
 8002246:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	0498      	lsls	r0, r3, #18
 800224c:	d534      	bpl.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 800224e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002254:	d048      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002256:	d81d      	bhi.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002258:	b32b      	cbz	r3, 80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d03d      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 8002260:	2601      	movs	r6, #1
      status |= ret;
 8002262:	ea44 0006 	orr.w	r0, r4, r6
 8002266:	b2c4      	uxtb	r4, r0
 8002268:	e026      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800226c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800226e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002272:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002274:	e7df      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002276:	2100      	movs	r1, #0
 8002278:	1d28      	adds	r0, r5, #4
 800227a:	f7ff fddb 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800227e:	4606      	mov	r6, r0
      break;
 8002280:	e7d9      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002282:	2100      	movs	r1, #0
 8002284:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002288:	f7ff fe3a 	bl	8001f00 <RCCEx_PLL3_Config>
 800228c:	e7f7      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800228e:	bf00      	nop
 8002290:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8002294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002298:	d005      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800229a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229e:	d002      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80022a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022a4:	d1dc      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 80022a6:	2e00      	cmp	r6, #0
 80022a8:	d1db      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80022aa:	4aa0      	ldr	r2, [pc, #640]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80022ac:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80022ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80022b0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	0459      	lsls	r1, r3, #17
 80022bc:	d52d      	bpl.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022be:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80022c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022c6:	d04c      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x396>
 80022c8:	d814      	bhi.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80022ca:	b1e3      	cbz	r3, 8002306 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80022cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d0:	d041      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 80022d2:	2601      	movs	r6, #1
      status |= ret;
 80022d4:	ea44 0006 	orr.w	r0, r4, r6
 80022d8:	b2c4      	uxtb	r4, r0
 80022da:	e01e      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022dc:	2101      	movs	r1, #1
 80022de:	1d28      	adds	r0, r5, #4
 80022e0:	f7ff fda8 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022e4:	4606      	mov	r6, r0
      break;
 80022e6:	e7de      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022e8:	2101      	movs	r1, #1
 80022ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80022ee:	f7ff fe07 	bl	8001f00 <RCCEx_PLL3_Config>
 80022f2:	e7f7      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d005      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80022fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022fe:	d002      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002304:	d1e5      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 8002306:	2e00      	cmp	r6, #0
 8002308:	d1e4      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800230a:	4a88      	ldr	r2, [pc, #544]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800230c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8002310:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002312:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002316:	430b      	orrs	r3, r1
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800231a:	682b      	ldr	r3, [r5, #0]
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	d50f      	bpl.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 8002320:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8002322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002326:	d022      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8002328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800232c:	d025      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800232e:	bb53      	cbnz	r3, 8002386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 8002330:	bb56      	cbnz	r6, 8002388 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002332:	4a7e      	ldr	r2, [pc, #504]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002334:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8002336:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002338:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800233c:	430b      	orrs	r3, r1
 800233e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	d532      	bpl.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 8002346:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002348:	2b03      	cmp	r3, #3
 800234a:	f200 808a 	bhi.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800234e:	e8df f003 	tbb	[pc, r3]
 8002352:	1f24      	.short	0x1f24
 8002354:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002356:	2101      	movs	r1, #1
 8002358:	1d28      	adds	r0, r5, #4
 800235a:	f7ff fd6b 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800235e:	4606      	mov	r6, r0
      break;
 8002360:	e7d1      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002362:	2101      	movs	r1, #1
 8002364:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002368:	f7ff fdca 	bl	8001f00 <RCCEx_PLL3_Config>
 800236c:	e7f7      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800236e:	4a6f      	ldr	r2, [pc, #444]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002370:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002376:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002378:	e7da      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800237a:	2101      	movs	r1, #1
 800237c:	1d28      	adds	r0, r5, #4
 800237e:	f7ff fd59 	bl	8001e34 <RCCEx_PLL2_Config>
 8002382:	4606      	mov	r6, r0
      break;
 8002384:	e7d4      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 8002386:	2601      	movs	r6, #1
      status |= ret;
 8002388:	ea44 0006 	orr.w	r0, r4, r6
 800238c:	b2c4      	uxtb	r4, r0
 800238e:	e7d7      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002390:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800239a:	2e00      	cmp	r6, #0
 800239c:	d162      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800239e:	4a63      	ldr	r2, [pc, #396]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80023a0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80023a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	430b      	orrs	r3, r1
 80023aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	025f      	lsls	r7, r3, #9
 80023b0:	d542      	bpl.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b2:	4f5f      	ldr	r7, [pc, #380]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80023bc:	f7fe f960 	bl	8000680 <HAL_GetTick>
 80023c0:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	05d8      	lsls	r0, r3, #23
 80023c6:	d551      	bpl.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 80023c8:	2e00      	cmp	r6, #0
 80023ca:	d156      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80023cc:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80023ce:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80023d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023d4:	4042      	eors	r2, r0
 80023d6:	f412 7f40 	tst.w	r2, #768	; 0x300
 80023da:	d00b      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80023de:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80023e8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ea:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80023ec:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80023f0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80023f2:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80023f4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80023f8:	d108      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 80023fa:	f7fe f941 	bl	8000680 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	4f4b      	ldr	r7, [pc, #300]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 8002400:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002408:	0799      	lsls	r1, r3, #30
 800240a:	d53a      	bpl.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800240c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8002410:	4946      	ldr	r1, [pc, #280]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002412:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002416:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800241a:	d13d      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800241c:	6908      	ldr	r0, [r1, #16]
 800241e:	4a45      	ldr	r2, [pc, #276]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002420:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002424:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002428:	4302      	orrs	r2, r0
 800242a:	610a      	str	r2, [r1, #16]
 800242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002430:	4a3e      	ldr	r2, [pc, #248]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002432:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002434:	430b      	orrs	r3, r1
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	07da      	lsls	r2, r3, #31
 800243c:	d53f      	bpl.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 800243e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002440:	2b10      	cmp	r3, #16
 8002442:	d04d      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002444:	d82c      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002446:	b38b      	cbz	r3, 80024ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002448:	2b08      	cmp	r3, #8
 800244a:	d043      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 800244c:	2601      	movs	r6, #1
      status |= ret;
 800244e:	ea44 0006 	orr.w	r0, r4, r6
 8002452:	b2c4      	uxtb	r4, r0
 8002454:	e033      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002456:	2102      	movs	r1, #2
 8002458:	1d28      	adds	r0, r5, #4
 800245a:	f7ff fceb 	bl	8001e34 <RCCEx_PLL2_Config>
 800245e:	4606      	mov	r6, r0
      break;
 8002460:	e79b      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 8002462:	2601      	movs	r6, #1
      status |= ret;
 8002464:	ea44 0006 	orr.w	r0, r4, r6
 8002468:	b2c4      	uxtb	r4, r0
 800246a:	e79f      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7fe f908 	bl	8000680 <HAL_GetTick>
 8002470:	eba0 0008 	sub.w	r0, r0, r8
 8002474:	2864      	cmp	r0, #100	; 0x64
 8002476:	d9a4      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8002478:	2603      	movs	r6, #3
      status |= ret;
 800247a:	ea44 0006 	orr.w	r0, r4, r6
 800247e:	b2c4      	uxtb	r4, r0
 8002480:	e7da      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe f8fd 	bl	8000680 <HAL_GetTick>
 8002486:	eba0 0008 	sub.w	r0, r0, r8
 800248a:	4548      	cmp	r0, r9
 800248c:	d9bb      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 800248e:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 8002492:	2603      	movs	r6, #3
        status |= ret;
 8002494:	b2c4      	uxtb	r4, r0
 8002496:	e7cf      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002498:	690a      	ldr	r2, [r1, #16]
 800249a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800249e:	e7c4      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d003      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80024a4:	2b28      	cmp	r3, #40	; 0x28
 80024a6:	d001      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80024a8:	2b18      	cmp	r3, #24
 80024aa:	d1cf      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 80024ac:	2e00      	cmp	r6, #0
 80024ae:	d1ce      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80024b0:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80024b2:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80024b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80024be:	682b      	ldr	r3, [r5, #0]
 80024c0:	079b      	lsls	r3, r3, #30
 80024c2:	d520      	bpl.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80024c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d836      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80024ca:	e8df f003 	tbb	[pc, r3]
 80024ce:	0f14      	.short	0x0f14
 80024d0:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024d4:	2101      	movs	r1, #1
 80024d6:	1d28      	adds	r0, r5, #4
 80024d8:	f7ff fcac 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024dc:	4606      	mov	r6, r0
      break;
 80024de:	e7e5      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024e0:	2101      	movs	r1, #1
 80024e2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80024e6:	f7ff fd0b 	bl	8001f00 <RCCEx_PLL3_Config>
 80024ea:	e7f7      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024ec:	2101      	movs	r1, #1
 80024ee:	1d28      	adds	r0, r5, #4
 80024f0:	f7ff fca0 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024f4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80024f6:	bb06      	cbnz	r6, 800253a <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80024f8:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80024fa:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80024fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024fe:	f023 0307 	bic.w	r3, r3, #7
 8002502:	430b      	orrs	r3, r1
 8002504:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002506:	682b      	ldr	r3, [r5, #0]
 8002508:	075f      	lsls	r7, r3, #29
 800250a:	d528      	bpl.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800250c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002510:	2b05      	cmp	r3, #5
 8002512:	d83c      	bhi.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8002514:	e8df f003 	tbb	[pc, r3]
 8002518:	1a35151a 	.word	0x1a35151a
 800251c:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800251e:	2101      	movs	r1, #1
 8002520:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002524:	f7ff fcec 	bl	8001f00 <RCCEx_PLL3_Config>
 8002528:	e7e4      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800252a:	bf00      	nop
 800252c:	58024400 	.word	0x58024400
 8002530:	58024800 	.word	0x58024800
 8002534:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 8002538:	2601      	movs	r6, #1
      status |= ret;
 800253a:	ea44 0006 	orr.w	r0, r4, r6
 800253e:	b2c4      	uxtb	r4, r0
 8002540:	e7e1      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002542:	2101      	movs	r1, #1
 8002544:	1d28      	adds	r0, r5, #4
 8002546:	f7ff fc75 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800254a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800254c:	bb06      	cbnz	r6, 8002590 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800254e:	4a99      	ldr	r2, [pc, #612]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002550:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8002554:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	430b      	orrs	r3, r1
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	0698      	lsls	r0, r3, #26
 8002562:	d52c      	bpl.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002564:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800256c:	d03f      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x622>
 800256e:	d813      	bhi.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002570:	b1db      	cbz	r3, 80025aa <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8002572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002576:	d034      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 8002578:	2601      	movs	r6, #1
      status |= ret;
 800257a:	ea44 0006 	orr.w	r0, r4, r6
 800257e:	b2c4      	uxtb	r4, r0
 8002580:	e01d      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002582:	2101      	movs	r1, #1
 8002584:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002588:	f7ff fcba 	bl	8001f00 <RCCEx_PLL3_Config>
 800258c:	e7dd      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 800258e:	2601      	movs	r6, #1
      status |= ret;
 8002590:	ea44 0006 	orr.w	r0, r4, r6
 8002594:	b2c4      	uxtb	r4, r0
 8002596:	e7e2      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d005      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x5de>
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a2:	d002      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80025a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025a8:	d1e6      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	d1e5      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ae:	4a81      	ldr	r2, [pc, #516]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80025b0:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80025b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80025b6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80025ba:	430b      	orrs	r3, r1
 80025bc:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	0659      	lsls	r1, r3, #25
 80025c2:	d52d      	bpl.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025c4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80025c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025cc:	d042      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80025ce:	d814      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80025d0:	b1e3      	cbz	r3, 800260c <HAL_RCCEx_PeriphCLKConfig+0x640>
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d6:	d037      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 80025d8:	2601      	movs	r6, #1
      status |= ret;
 80025da:	ea44 0006 	orr.w	r0, r4, r6
 80025de:	b2c4      	uxtb	r4, r0
 80025e0:	e01e      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025e2:	2100      	movs	r1, #0
 80025e4:	1d28      	adds	r0, r5, #4
 80025e6:	f7ff fc25 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025ea:	4606      	mov	r6, r0
      break;
 80025ec:	e7dd      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025ee:	2102      	movs	r1, #2
 80025f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80025f4:	f7ff fc84 	bl	8001f00 <RCCEx_PLL3_Config>
 80025f8:	e7f7      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	d005      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002600:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002604:	d002      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800260a:	d1e5      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 800260c:	2e00      	cmp	r6, #0
 800260e:	d1e4      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002610:	4a68      	ldr	r2, [pc, #416]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002612:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8002616:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002618:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800261c:	430b      	orrs	r3, r1
 800261e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	061a      	lsls	r2, r3, #24
 8002624:	d52f      	bpl.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002626:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800262a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800262e:	f000 8095 	beq.w	800275c <HAL_RCCEx_PeriphCLKConfig+0x790>
 8002632:	d815      	bhi.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8002634:	b1eb      	cbz	r3, 8002672 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	f000 8089 	beq.w	8002750 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 800263e:	2601      	movs	r6, #1
      status |= ret;
 8002640:	ea44 0006 	orr.w	r0, r4, r6
 8002644:	b2c4      	uxtb	r4, r0
 8002646:	e01e      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002648:	2100      	movs	r1, #0
 800264a:	1d28      	adds	r0, r5, #4
 800264c:	f7ff fbf2 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002650:	4606      	mov	r6, r0
      break;
 8002652:	e7db      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002654:	2102      	movs	r1, #2
 8002656:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800265a:	f7ff fc51 	bl	8001f00 <RCCEx_PLL3_Config>
 800265e:	e7f7      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	d005      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8002666:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800266a:	d002      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800266c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002670:	d1e5      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 8002672:	2e00      	cmp	r6, #0
 8002674:	d1e4      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002676:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002678:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800267c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800267e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002682:	430b      	orrs	r3, r1
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	071b      	lsls	r3, r3, #28
 800268a:	d50b      	bpl.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800268c:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8002690:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002694:	d168      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002696:	2102      	movs	r1, #2
 8002698:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800269c:	f7ff fc30 	bl	8001f00 <RCCEx_PLL3_Config>
 80026a0:	4304      	orrs	r4, r0
 80026a2:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	06df      	lsls	r7, r3, #27
 80026a8:	d50b      	bpl.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80026aa:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80026ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80026b2:	d160      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026b4:	2102      	movs	r1, #2
 80026b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80026ba:	f7ff fc21 	bl	8001f00 <RCCEx_PLL3_Config>
 80026be:	4304      	orrs	r4, r0
 80026c0:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c2:	682b      	ldr	r3, [r5, #0]
 80026c4:	0318      	lsls	r0, r3, #12
 80026c6:	d517      	bpl.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 80026c8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80026cc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80026d0:	d058      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80026d2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80026d6:	d005      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x718>
 80026d8:	2900      	cmp	r1, #0
 80026da:	d159      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026dc:	1d28      	adds	r0, r5, #4
 80026de:	f7ff fba9 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026e2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d154      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e8:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80026ea:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80026ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026f0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	0359      	lsls	r1, r3, #13
 80026fc:	d519      	bpl.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 80026fe:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8002702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002706:	d048      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002708:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800270c:	d007      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x752>
 800270e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002712:	d149      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002716:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800271e:	2e00      	cmp	r6, #0
 8002720:	d143      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002722:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002724:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8002728:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800272a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800272e:	430b      	orrs	r3, r1
 8002730:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	03da      	lsls	r2, r3, #15
 8002736:	d54d      	bpl.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002738:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d03c      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	f000 8099 	beq.w	8002878 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 8002746:	2601      	movs	r6, #1
      status |= ret;
 8002748:	ea44 0006 	orr.w	r0, r4, r6
 800274c:	b2c4      	uxtb	r4, r0
 800274e:	e041      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002750:	2100      	movs	r1, #0
 8002752:	1d28      	adds	r0, r5, #4
 8002754:	f7ff fb6e 	bl	8001e34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002758:	4606      	mov	r6, r0
      break;
 800275a:	e78a      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800275c:	2102      	movs	r1, #2
 800275e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002762:	f7ff fbcd 	bl	8001f00 <RCCEx_PLL3_Config>
 8002766:	e7f7      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800276a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800276c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002770:	430b      	orrs	r3, r1
 8002772:	6553      	str	r3, [r2, #84]	; 0x54
 8002774:	e796      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002776:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002778:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800277a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277e:	430b      	orrs	r3, r1
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
 8002782:	e79e      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002784:	2102      	movs	r1, #2
 8002786:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800278a:	f7ff fbb9 	bl	8001f00 <RCCEx_PLL3_Config>
 800278e:	e7a8      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 8002790:	2601      	movs	r6, #1
      status |= ret;
 8002792:	ea44 0006 	orr.w	r0, r4, r6
 8002796:	b2c4      	uxtb	r4, r0
 8002798:	e7ae      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800279a:	2101      	movs	r1, #1
 800279c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80027a0:	f7ff fbae 	bl	8001f00 <RCCEx_PLL3_Config>
 80027a4:	4606      	mov	r6, r0
      break;
 80027a6:	e7ba      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 80027a8:	2601      	movs	r6, #1
      status |= ret;
 80027aa:	ea44 0006 	orr.w	r0, r4, r6
 80027ae:	b2c4      	uxtb	r4, r0
 80027b0:	e7bf      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x766>
 80027b2:	bf00      	nop
 80027b4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b8:	4a3b      	ldr	r2, [pc, #236]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80027ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80027c2:	2e00      	cmp	r6, #0
 80027c4:	d1c0      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80027c6:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80027c8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80027ca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	430b      	orrs	r3, r1
 80027d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	d506      	bpl.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027da:	2102      	movs	r1, #2
 80027dc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80027e0:	f7ff fb8e 	bl	8001f00 <RCCEx_PLL3_Config>
 80027e4:	4304      	orrs	r4, r0
 80027e6:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	039f      	lsls	r7, r3, #14
 80027ec:	d50e      	bpl.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 80027ee:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80027f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80027f4:	d051      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80027f6:	d845      	bhi.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d149      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 80027fc:	2e00      	cmp	r6, #0
 80027fe:	d148      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002800:	4829      	ldr	r0, [pc, #164]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002802:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002804:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002808:	430a      	orrs	r2, r1
 800280a:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800280c:	02de      	lsls	r6, r3, #11
 800280e:	d506      	bpl.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002810:	4925      	ldr	r1, [pc, #148]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002812:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8002814:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800281a:	4302      	orrs	r2, r0
 800281c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800281e:	00d8      	lsls	r0, r3, #3
 8002820:	d507      	bpl.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002822:	4921      	ldr	r1, [pc, #132]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002824:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8002828:	690a      	ldr	r2, [r1, #16]
 800282a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800282e:	4302      	orrs	r2, r0
 8002830:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002832:	0299      	lsls	r1, r3, #10
 8002834:	d506      	bpl.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002836:	491c      	ldr	r1, [pc, #112]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002838:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800283a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800283c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002840:	4302      	orrs	r2, r0
 8002842:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002844:	005a      	lsls	r2, r3, #1
 8002846:	d509      	bpl.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800284a:	6911      	ldr	r1, [r2, #16]
 800284c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002850:	6111      	str	r1, [r2, #16]
 8002852:	6911      	ldr	r1, [r2, #16]
 8002854:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8002858:	4301      	orrs	r1, r0
 800285a:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800285c:	2b00      	cmp	r3, #0
 800285e:	da06      	bge.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002862:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002864:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002866:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800286a:	430b      	orrs	r3, r1
 800286c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286e:	1c20      	adds	r0, r4, #0
 8002870:	bf18      	it	ne
 8002872:	2001      	movne	r0, #1
}
 8002874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002878:	2102      	movs	r1, #2
 800287a:	1d28      	adds	r0, r5, #4
 800287c:	f7ff fada 	bl	8001e34 <RCCEx_PLL2_Config>
 8002880:	4606      	mov	r6, r0
      break;
 8002882:	e79e      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 8002884:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002888:	d0b8      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x830>
 800288a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800288e:	d0b5      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8002890:	2601      	movs	r6, #1
      status |= ret;
 8002892:	ea44 0006 	orr.w	r0, r4, r6
 8002896:	b2c4      	uxtb	r4, r0
 8002898:	e7b8      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800289c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800289e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028a2:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80028a4:	e7aa      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x830>
 80028a6:	bf00      	nop
 80028a8:	58024400 	.word	0x58024400

080028ac <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80028ac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 80028ae:	f7ff fa7b 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80028b4:	2210      	movs	r2, #16
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028c4:	40d3      	lsrs	r3, r2
 80028c6:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80028ca:	40d8      	lsrs	r0, r3
 80028cc:	bd08      	pop	{r3, pc}
 80028ce:	bf00      	nop
 80028d0:	58024400 	.word	0x58024400
 80028d4:	08008620 	.word	0x08008620

080028d8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80028d8:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028da:	4c4a      	ldr	r4, [pc, #296]	; (8002a04 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 80028dc:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8002a08 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80028e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80028e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80028e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80028e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80028e8:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80028ec:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80028f0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80028f4:	4353      	muls	r3, r2
 80028f6:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028fa:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 80028fe:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002900:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002904:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8002908:	d002      	beq.n	8002910 <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 800290a:	d30e      	bcc.n	800292a <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 800290c:	2b02      	cmp	r3, #2
 800290e:	d068      	beq.n	80029e2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002912:	4a3e      	ldr	r2, [pc, #248]	; (8002a0c <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 8002914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002918:	ee07 3a10 	vmov	s14, r3
 800291c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002920:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002928:	e067      	b.n	80029fa <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 800292e:	f013 0f20 	tst.w	r3, #32
 8002932:	d042      	beq.n	80029ba <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002934:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002936:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002938:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002940:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002942:	fbb2 f2f1 	udiv	r2, r2, r1
 8002946:	ee07 2a10 	vmov	s14, r2
 800294a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800294e:	ee07 3a10 	vmov	s14, r3
 8002952:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002956:	eea6 7a25 	vfma.f32	s14, s12, s11
 800295a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800295e:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002962:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8002964:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002966:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800296a:	3301      	adds	r3, #1
 800296c:	ee07 3a10 	vmov	s14, r3
 8002970:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002974:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002978:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800297c:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8002980:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002982:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002986:	3301      	adds	r3, #1
 8002988:	ee07 3a10 	vmov	s14, r3
 800298c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002990:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002994:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002998:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 800299c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800299e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80029a2:	3301      	adds	r3, #1
 80029a4:	ee07 3a10 	vmov	s14, r3
 80029a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029b0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80029b4:	edc0 6a02 	vstr	s13, [r0, #8]
 80029b8:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80029ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c0:	ee07 3a10 	vmov	s14, r3
 80029c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029c8:	fbb2 f3f1 	udiv	r3, r2, r1
 80029cc:	eea6 7a25 	vfma.f32	s14, s12, s11
 80029d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d4:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80029d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029dc:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 80029e0:	e7bf      	b.n	8002962 <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80029e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 80029e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ea:	ee07 3a10 	vmov	s14, r3
 80029ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029f2:	eea6 7a25 	vfma.f32	s14, s12, s11
 80029f6:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 80029fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80029fe:	ee07 2a90 	vmov	s15, r2
 8002a02:	e7e9      	b.n	80029d8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8002a04:	58024400 	.word	0x58024400
 8002a08:	39000000 	.word	0x39000000
 8002a0c:	003d0900 	.word	0x003d0900
 8002a10:	03d09000 	.word	0x03d09000
 8002a14:	01312d00 	.word	0x01312d00

08002a18 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8002a18:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a1a:	4c4a      	ldr	r4, [pc, #296]	; (8002b44 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8002a1c:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8002b48 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8002a20:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002a22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002a26:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002a28:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002a30:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002a34:	4353      	muls	r3, r2
 8002a36:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a3a:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8002a3e:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002a40:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002a44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8002a48:	d002      	beq.n	8002a50 <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8002a4a:	d30e      	bcc.n	8002a6a <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d068      	beq.n	8002b22 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a52:	4a3e      	ldr	r2, [pc, #248]	; (8002b4c <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8002a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a58:	ee07 3a10 	vmov	s14, r3
 8002a5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a60:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a68:	e067      	b.n	8002b3a <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8002a6e:	f013 0f20 	tst.w	r3, #32
 8002a72:	d042      	beq.n	8002afa <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a74:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a78:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a80:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002a82:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a86:	ee07 2a10 	vmov	s14, r2
 8002a8a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002a8e:	ee07 3a10 	vmov	s14, r3
 8002a92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a96:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a9e:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8002aa4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002aa6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002aaa:	3301      	adds	r3, #1
 8002aac:	ee07 3a10 	vmov	s14, r3
 8002ab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ab4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ab8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002abc:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8002ac0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ac2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	ee07 3a10 	vmov	s14, r3
 8002acc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ad0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ad4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002ad8:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8002adc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ade:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	ee07 3a10 	vmov	s14, r3
 8002ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002aec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002af0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002af4:	edc0 6a02 	vstr	s13, [r0, #8]
 8002af8:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b00:	ee07 3a10 	vmov	s14, r3
 8002b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b08:	fbb2 f3f1 	udiv	r3, r2, r1
 8002b0c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b14:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8002b20:	e7bf      	b.n	8002aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b24:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	ee07 3a10 	vmov	s14, r3
 8002b2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b32:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002b36:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002b3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002b3e:	ee07 2a90 	vmov	s15, r2
 8002b42:	e7e9      	b.n	8002b18 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8002b44:	58024400 	.word	0x58024400
 8002b48:	39000000 	.word	0x39000000
 8002b4c:	003d0900 	.word	0x003d0900
 8002b50:	03d09000 	.word	0x03d09000
 8002b54:	01312d00 	.word	0x01312d00

08002b58 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8002b58:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002b5a:	f7fe ffaf 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8002b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b72:	40d3      	lsrs	r3, r2
 8002b74:	4a03      	ldr	r2, [pc, #12]	; (8002b84 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	40d8      	lsrs	r0, r3
 8002b7a:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002b7c:	6018      	str	r0, [r3, #0]
}
 8002b7e:	bd08      	pop	{r3, pc}
 8002b80:	58024400 	.word	0x58024400
 8002b84:	08008620 	.word	0x08008620
 8002b88:	20000068 	.word	0x20000068

08002b8c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8002b8c:	6803      	ldr	r3, [r0, #0]
 8002b8e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	f042 0208 	orr.w	r2, r2, #8
 8002b96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	f042 0210 	orr.w	r2, r2, #16
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 8002bae:	f022 0203 	bic.w	r2, r2, #3
 8002bb2:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN);
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002bba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bbc:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002bc0:	2a04      	cmp	r2, #4
 8002bc2:	d00b      	beq.n	8002bdc <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != RESET)
 8002bc4:	068a      	lsls	r2, r1, #26
 8002bc6:	d509      	bpl.n	8002bdc <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002bc8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	f042 0220 	orr.w	r2, r2, #32
 8002bda:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bdc:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002be0:	2a03      	cmp	r2, #3
 8002be2:	d00b      	beq.n	8002bfc <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8002be4:	064a      	lsls	r2, r1, #25
 8002be6:	d509      	bpl.n	8002bfc <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002be8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002bec:	f042 0204 	orr.w	r2, r2, #4
 8002bf0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != RESET)
 8002bfc:	058a      	lsls	r2, r1, #22
 8002bfe:	d509      	bpl.n	8002c14 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c00:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != RESET)
 8002c14:	05ca      	lsls	r2, r1, #23
 8002c16:	d509      	bpl.n	8002c2c <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c18:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002c1c:	f042 0208 	orr.w	r2, r2, #8
 8002c20:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = 0U;
 8002c32:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8002c36:	4770      	bx	lr

08002c38 <HAL_SPI_Init>:
{
 8002c38:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	b908      	cbnz	r0, 8002c42 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 8002c3e:	2001      	movs	r0, #1
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c42:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002c44:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c46:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_SPI_Init+0x110>)
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	68c3      	ldr	r3, [r0, #12]
 8002c4e:	d008      	beq.n	8002c62 <HAL_SPI_Init+0x2a>
 8002c50:	493e      	ldr	r1, [pc, #248]	; (8002d4c <HAL_SPI_Init+0x114>)
 8002c52:	428a      	cmp	r2, r1
 8002c54:	d005      	beq.n	8002c62 <HAL_SPI_Init+0x2a>
 8002c56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c5a:	428a      	cmp	r2, r1
 8002c5c:	d001      	beq.n	8002c62 <HAL_SPI_Init+0x2a>
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d8ed      	bhi.n	8002c3e <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occuppied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 8002c62:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize     >>SPI_CFG1_DSIZE_Pos) + 1;

  /* Convert data size to Byte */
  data_size = (data_size+7)/8;
 8002c64:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold>>SPI_CFG1_FTHLV_Pos) + 1;
 8002c66:	0949      	lsrs	r1, r1, #5
  data_size = (data_size+7)/8;
 8002c68:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8002c6a:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE )) ||
 8002c6e:	4936      	ldr	r1, [pc, #216]	; (8002d48 <HAL_SPI_Init+0x110>)
 8002c70:	428a      	cmp	r2, r1
 8002c72:	d066      	beq.n	8002d42 <HAL_SPI_Init+0x10a>
 8002c74:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8002c78:	428a      	cmp	r2, r1
 8002c7a:	d062      	beq.n	8002d42 <HAL_SPI_Init+0x10a>
 8002c7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c80:	428a      	cmp	r2, r1
 8002c82:	d05e      	beq.n	8002d42 <HAL_SPI_Init+0x10a>
 8002c84:	2b08      	cmp	r3, #8
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8002c86:	d8da      	bhi.n	8002c3e <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c88:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002c8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c90:	b923      	cbnz	r3, 8002c9c <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8002c92:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8002c96:	4620      	mov	r0, r4
 8002c98:	f005 faa6 	bl	80081e8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c9c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002cb0:	69a3      	ldr	r3, [r4, #24]
 8002cb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb6:	d107      	bne.n	8002cc8 <HAL_SPI_Init+0x90>
 8002cb8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002cbc:	d104      	bne.n	8002cc8 <HAL_SPI_Init+0x90>
 8002cbe:	b91d      	cbnz	r5, 8002cc8 <HAL_SPI_Init+0x90>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8002cc0:	6810      	ldr	r0, [r2, #0]
 8002cc2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002cc6:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8002cc8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cca:	69e0      	ldr	r0, [r4, #28]
 8002ccc:	4330      	orrs	r0, r6
 8002cce:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002cd0:	4330      	orrs	r0, r6
 8002cd2:	68e6      	ldr	r6, [r4, #12]
 8002cd4:	4330      	orrs	r0, r6
 8002cd6:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8002cd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002cda:	4303      	orrs	r3, r0
 8002cdc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	6920      	ldr	r0, [r4, #16]
 8002ce2:	432b      	orrs	r3, r5
 8002ce4:	4303      	orrs	r3, r0
 8002ce6:	6960      	ldr	r0, [r4, #20]
 8002ce8:	4303      	orrs	r3, r0
 8002cea:	6a20      	ldr	r0, [r4, #32]
 8002cec:	4303      	orrs	r3, r0
 8002cee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	4303      	orrs	r3, r0
 8002cf4:	68a0      	ldr	r0, [r4, #8]
 8002cf6:	4303      	orrs	r3, r0
 8002cf8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cfe:	4303      	orrs	r3, r0
 8002d00:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002d02:	b959      	cbnz	r1, 8002d1c <HAL_SPI_Init+0xe4>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002d04:	6893      	ldr	r3, [r2, #8]
 8002d06:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d0e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8002d10:	6893      	ldr	r3, [r2, #8]
 8002d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8002d24:	024b      	lsls	r3, r1, #9
 8002d26:	d505      	bpl.n	8002d34 <HAL_SPI_Init+0xfc>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002d28:	68d3      	ldr	r3, [r2, #12]
 8002d2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d34:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002d36:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d38:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8002d3c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8002d40:	bd70      	pop	{r4, r5, r6, pc}
      (( IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)) )
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	e79f      	b.n	8002c86 <HAL_SPI_Init+0x4e>
 8002d46:	bf00      	nop
 8002d48:	40013000 	.word	0x40013000
 8002d4c:	40003800 	.word	0x40003800

08002d50 <HAL_SPI_Transmit>:
{
 8002d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d54:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002d56:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4688      	mov	r8, r1
  __HAL_LOCK(hspi);
 8002d5e:	2b01      	cmp	r3, #1
{
 8002d60:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002d62:	d00c      	beq.n	8002d7e <HAL_SPI_Transmit+0x2e>
 8002d64:	2301      	movs	r3, #1
 8002d66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002d6a:	f7fd fc89 	bl	8000680 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002d6e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002d72:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d005      	beq.n	8002d84 <HAL_SPI_Transmit+0x34>
    __HAL_UNLOCK(hspi);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8002d7e:	2002      	movs	r0, #2
 8002d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8002d84:	f1b8 0f00 	cmp.w	r8, #0
 8002d88:	d000      	beq.n	8002d8c <HAL_SPI_Transmit+0x3c>
 8002d8a:	b92f      	cbnz	r7, 8002d98 <HAL_SPI_Transmit+0x48>
    __HAL_UNLOCK(hspi);
 8002d8c:	2300      	movs	r3, #0
    return errorcode;
 8002d8e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002d90:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8002d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d98:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d9a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8002d9e:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002da2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 8002dac:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
 8002dae:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->RxXferSize  = 0U;
 8002db2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = 0U;
 8002db6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8002dba:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 8002dbc:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	d103      	bne.n	8002dd0 <HAL_SPI_Transmit+0x80>
    SPI_1LINE_TX(hspi);
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	0c09      	lsrs	r1, r1, #16
 8002dd4:	0409      	lsls	r1, r1, #16
 8002dd6:	4339      	orrs	r1, r7
 8002dd8:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002de2:	6862      	ldr	r2, [r4, #4]
 8002de4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002de8:	d103      	bne.n	8002df2 <HAL_SPI_Transmit+0xa2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d82e      	bhi.n	8002e56 <HAL_SPI_Transmit+0x106>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df8:	2b07      	cmp	r3, #7
 8002dfa:	d875      	bhi.n	8002ee8 <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0U)
 8002dfc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02c      	beq.n	8002e60 <HAL_SPI_Transmit+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	6953      	ldr	r3, [r2, #20]
 8002e0a:	079f      	lsls	r7, r3, #30
 8002e0c:	f140 809d 	bpl.w	8002f4a <HAL_SPI_Transmit+0x1fa>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8002e10:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e1a:	d97d      	bls.n	8002f18 <HAL_SPI_Transmit+0x1c8>
 8002e1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002e1e:	2940      	cmp	r1, #64	; 0x40
 8002e20:	d97a      	bls.n	8002f18 <HAL_SPI_Transmit+0x1c8>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8002e26:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8002e28:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 8002e2a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002e2e:	3b04      	subs	r3, #4
          hspi->TxXferCount-=2;
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8002e36:	e7e1      	b.n	8002dfc <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	6953      	ldr	r3, [r2, #20]
 8002e3c:	079f      	lsls	r7, r3, #30
 8002e3e:	d523      	bpl.n	8002e88 <HAL_SPI_Transmit+0x138>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002e40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e42:	f853 1b04 	ldr.w	r1, [r3], #4
 8002e46:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8002e48:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8002e4a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 8002e56:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_SPI_Transmit+0xe8>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	6953      	ldr	r3, [r2, #20]
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	d57c      	bpl.n	8002f62 <HAL_SPI_Transmit+0x212>
  SPI_CloseTransfer(hspi);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff fe8f 	bl	8002b8c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 8002e7e:	3000      	adds	r0, #0
 8002e80:	bf18      	it	ne
 8002e82:	2001      	movne	r0, #1
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002e88:	b985      	cbnz	r5, 8002eac <HAL_SPI_Transmit+0x15c>
          SPI_CloseTransfer(hspi);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff fe7e 	bl	8002b8c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8002e90:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 8002e92:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 8002e94:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002e98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8002ea4:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 8002ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002eac:	1c68      	adds	r0, r5, #1
 8002eae:	d0d2      	beq.n	8002e56 <HAL_SPI_Transmit+0x106>
 8002eb0:	f7fd fbe6 	bl	8000680 <HAL_GetTick>
 8002eb4:	1b80      	subs	r0, r0, r6
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d8cd      	bhi.n	8002e56 <HAL_SPI_Transmit+0x106>
 8002eba:	e7e6      	b.n	8002e8a <HAL_SPI_Transmit+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	6953      	ldr	r3, [r2, #20]
 8002ec0:	0799      	lsls	r1, r3, #30
 8002ec2:	d51f      	bpl.n	8002f04 <HAL_SPI_Transmit+0x1b4>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002ec4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ece:	d911      	bls.n	8002ef4 <HAL_SPI_Transmit+0x1a4>
 8002ed0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ed2:	b179      	cbz	r1, 8002ef4 <HAL_SPI_Transmit+0x1a4>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002ed4:	f853 1b04 	ldr.w	r1, [r3], #4
 8002ed8:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8002eda:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8002edc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002ee0:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0U)
 8002ee8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e4      	bne.n	8002ebc <HAL_SPI_Transmit+0x16c>
 8002ef2:	e7b5      	b.n	8002e60 <HAL_SPI_Transmit+0x110>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002ef8:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efa:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8002efc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002f00:	3b01      	subs	r3, #1
 8002f02:	e7ee      	b.n	8002ee2 <HAL_SPI_Transmit+0x192>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	d0c0      	beq.n	8002e8a <HAL_SPI_Transmit+0x13a>
 8002f08:	1c6b      	adds	r3, r5, #1
 8002f0a:	d0ed      	beq.n	8002ee8 <HAL_SPI_Transmit+0x198>
 8002f0c:	f7fd fbb8 	bl	8000680 <HAL_GetTick>
 8002f10:	1b80      	subs	r0, r0, r6
 8002f12:	4285      	cmp	r5, r0
 8002f14:	d8e8      	bhi.n	8002ee8 <HAL_SPI_Transmit+0x198>
 8002f16:	e7b8      	b.n	8002e8a <HAL_SPI_Transmit+0x13a>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002f18:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8002f1c:	b289      	uxth	r1, r1
 8002f1e:	2901      	cmp	r1, #1
 8002f20:	d909      	bls.n	8002f36 <HAL_SPI_Transmit+0x1e6>
 8002f22:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002f24:	b139      	cbz	r1, 8002f36 <HAL_SPI_Transmit+0x1e6>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8002f26:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002f2a:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2c:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8002f2e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002f32:	3b02      	subs	r3, #2
 8002f34:	e77c      	b.n	8002e30 <HAL_SPI_Transmit+0xe0>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f3e:	3301      	adds	r3, #1
 8002f40:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8002f42:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002f46:	3b01      	subs	r3, #1
 8002f48:	e772      	b.n	8002e30 <HAL_SPI_Transmit+0xe0>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	d09d      	beq.n	8002e8a <HAL_SPI_Transmit+0x13a>
 8002f4e:	1c68      	adds	r0, r5, #1
 8002f50:	f43f af54 	beq.w	8002dfc <HAL_SPI_Transmit+0xac>
 8002f54:	f7fd fb94 	bl	8000680 <HAL_GetTick>
 8002f58:	1b80      	subs	r0, r0, r6
 8002f5a:	4285      	cmp	r5, r0
 8002f5c:	f63f af4e 	bhi.w	8002dfc <HAL_SPI_Transmit+0xac>
 8002f60:	e793      	b.n	8002e8a <HAL_SPI_Transmit+0x13a>
    if(Timeout != HAL_MAX_DELAY)
 8002f62:	1c69      	adds	r1, r5, #1
 8002f64:	f43f af7d 	beq.w	8002e62 <HAL_SPI_Transmit+0x112>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f68:	b12d      	cbz	r5, 8002f76 <HAL_SPI_Transmit+0x226>
 8002f6a:	f7fd fb89 	bl	8000680 <HAL_GetTick>
 8002f6e:	1b80      	subs	r0, r0, r6
 8002f70:	4285      	cmp	r5, r0
 8002f72:	f4bf af75 	bcs.w	8002e60 <HAL_SPI_Transmit+0x110>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f76:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002f82:	e771      	b.n	8002e68 <HAL_SPI_Transmit+0x118>

08002f84 <HAL_SPI_TransmitReceive>:
{
 8002f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f88:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002f8a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4688      	mov	r8, r1
  __HAL_LOCK(hspi);
 8002f92:	2b01      	cmp	r3, #1
{
 8002f94:	4691      	mov	r9, r2
 8002f96:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8002f98:	d016      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x44>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002fa0:	f7fd fb6e 	bl	8000680 <HAL_GetTick>
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 8002fa4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002fa8:	4606      	mov	r6, r0
  if (!((hspi->State == HAL_SPI_STATE_READY) || \
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00f      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x4a>
 8002fae:	6863      	ldr	r3, [r4, #4]
 8002fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb4:	d105      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x3e>
        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX))))
 8002fb6:	68a3      	ldr	r3, [r4, #8]
 8002fb8:	b91b      	cbnz	r3, 8002fc2 <HAL_SPI_TransmitReceive+0x3e>
 8002fba:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d005      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x4a>
    __HAL_UNLOCK(hspi);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8002fc8:	2002      	movs	r0, #2
 8002fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fce:	f1b8 0f00 	cmp.w	r8, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x58>
 8002fd4:	f1b9 0f00 	cmp.w	r9, #0
 8002fd8:	d000      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x58>
 8002fda:	b92f      	cbnz	r7, 8002fe8 <HAL_SPI_TransmitReceive+0x64>
    __HAL_UNLOCK(hspi);
 8002fdc:	2300      	movs	r3, #0
    return errorcode;
 8002fde:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002fe0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8002fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fe8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d002      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x72>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ff0:	2305      	movs	r3, #5
 8002ff2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff6:	2300      	movs	r3, #0
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002ff8:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ffa:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8003002:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8003006:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800300a:	684a      	ldr	r2, [r1, #4]
  hspi->RxISR       = NULL;
 800300c:	6723      	str	r3, [r4, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800300e:	0c12      	lsrs	r2, r2, #16
  hspi->TxISR       = NULL;
 8003010:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxXferSize  = Size;
 8003012:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003016:	0412      	lsls	r2, r2, #16
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003018:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800301c:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003020:	433a      	orrs	r2, r7
 8003022:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8003024:	680b      	ldr	r3, [r1, #0]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800302c:	6863      	ldr	r3, [r4, #4]
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003032:	d103      	bne.n	800303c <HAL_SPI_TransmitReceive+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003034:	680b      	ldr	r3, [r1, #0]
 8003036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800303c:	68e3      	ldr	r3, [r4, #12]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	f200 8089 	bhi.w	8003156 <HAL_SPI_TransmitReceive+0x1d2>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003044:	2b07      	cmp	r3, #7
 8003046:	f200 80e1 	bhi.w	800320c <HAL_SPI_TransmitReceive+0x288>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800304a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800304e:	b29b      	uxth	r3, r3
 8003050:	b92b      	cbnz	r3, 800305e <HAL_SPI_TransmitReceive+0xda>
 8003052:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8088 	beq.w	800316e <HAL_SPI_TransmitReceive+0x1ea>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800305e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003062:	b29b      	uxth	r3, r3
 8003064:	b1c3      	cbz	r3, 8003098 <HAL_SPI_TransmitReceive+0x114>
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	6953      	ldr	r3, [r2, #20]
 800306a:	079f      	lsls	r7, r3, #30
 800306c:	d514      	bpl.n	8003098 <HAL_SPI_TransmitReceive+0x114>
        if ((hspi->TxXferCount > 3U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800306e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b03      	cmp	r3, #3
 8003076:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003078:	f240 80e3 	bls.w	8003242 <HAL_SPI_TransmitReceive+0x2be>
 800307c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800307e:	2940      	cmp	r1, #64	; 0x40
 8003080:	f240 80df 	bls.w	8003242 <HAL_SPI_TransmitReceive+0x2be>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003084:	f853 1b04 	ldr.w	r1, [r3], #4
 8003088:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800308a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=4;
 800308c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003090:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 8003092:	b29b      	uxth	r3, r3
 8003094:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 8003098:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800309c:	b29b      	uxth	r3, r3
 800309e:	b1a3      	cbz	r3, 80030ca <HAL_SPI_TransmitReceive+0x146>
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	6953      	ldr	r3, [r2, #20]
 80030a4:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80030a8:	d00f      	beq.n	80030ca <HAL_SPI_TransmitReceive+0x146>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80030aa:	6953      	ldr	r3, [r2, #20]
 80030ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80030b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b2:	f000 80df 	beq.w	8003274 <HAL_SPI_TransmitReceive+0x2f0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80030b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030b8:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80030bc:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 80030be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80030c2:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80030ca:	1c68      	adds	r0, r5, #1
 80030cc:	d0bd      	beq.n	800304a <HAL_SPI_TransmitReceive+0xc6>
 80030ce:	f7fd fad7 	bl	8000680 <HAL_GetTick>
 80030d2:	1b80      	subs	r0, r0, r6
 80030d4:	4285      	cmp	r5, r0
 80030d6:	d8b8      	bhi.n	800304a <HAL_SPI_TransmitReceive+0xc6>
 80030d8:	e02c      	b.n	8003134 <HAL_SPI_TransmitReceive+0x1b0>
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80030da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b173      	cbz	r3, 8003100 <HAL_SPI_TransmitReceive+0x17c>
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	6953      	ldr	r3, [r2, #20]
 80030e6:	079b      	lsls	r3, r3, #30
 80030e8:	d50a      	bpl.n	8003100 <HAL_SPI_TransmitReceive+0x17c>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80030ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030ec:	f853 1b04 	ldr.w	r1, [r3], #4
 80030f0:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80030f2:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 80030f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 8003100:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003104:	b29b      	uxth	r3, r3
 8003106:	b173      	cbz	r3, 8003126 <HAL_SPI_TransmitReceive+0x1a2>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	423a      	tst	r2, r7
 800310e:	d00a      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x1a2>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003114:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8003118:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800311a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800311e:	3b01      	subs	r3, #1
 8003120:	b29b      	uxth	r3, r3
 8003122:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003126:	1c68      	adds	r0, r5, #1
 8003128:	d017      	beq.n	800315a <HAL_SPI_TransmitReceive+0x1d6>
 800312a:	f7fd faa9 	bl	8000680 <HAL_GetTick>
 800312e:	1b80      	subs	r0, r0, r6
 8003130:	4285      	cmp	r5, r0
 8003132:	d812      	bhi.n	800315a <HAL_SPI_TransmitReceive+0x1d6>
        SPI_CloseTransfer(hspi);
 8003134:	4620      	mov	r0, r4
 8003136:	f7ff fd29 	bl	8002b8c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800313a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800313c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800313e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003142:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800314e:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 8003152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT)))
 8003156:	f248 0708 	movw	r7, #32776	; 0x8008
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800315a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ba      	bne.n	80030da <HAL_SPI_TransmitReceive+0x156>
 8003164:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1b5      	bne.n	80030da <HAL_SPI_TransmitReceive+0x156>
  while((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	6953      	ldr	r3, [r2, #20]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	f140 8096 	bpl.w	80032a4 <HAL_SPI_TransmitReceive+0x320>
  SPI_CloseTransfer(hspi);
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff fd07 	bl	8002b8c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800317e:	2300      	movs	r3, #0
 8003180:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8003184:	2301      	movs	r3, #1
 8003186:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 800318e:	3000      	adds	r0, #0
 8003190:	bf18      	it	ne
 8003192:	2001      	movne	r0, #1
 8003194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003198:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800319c:	b29b      	uxth	r3, r3
 800319e:	b1b3      	cbz	r3, 80031ce <HAL_SPI_TransmitReceive+0x24a>
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	6953      	ldr	r3, [r2, #20]
 80031a4:	0799      	lsls	r1, r3, #30
 80031a6:	d512      	bpl.n	80031ce <HAL_SPI_TransmitReceive+0x24a>
        if ( (hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80031a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031b2:	d936      	bls.n	8003222 <HAL_SPI_TransmitReceive+0x29e>
 80031b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80031b6:	2900      	cmp	r1, #0
 80031b8:	d033      	beq.n	8003222 <HAL_SPI_TransmitReceive+0x29e>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80031ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80031be:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80031c0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 80031c2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80031c6:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if ((hspi->RxXferCount > 0U) && (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL)))
 80031ce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	b19b      	cbz	r3, 80031fe <HAL_SPI_TransmitReceive+0x27a>
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	6953      	ldr	r3, [r2, #20]
 80031da:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80031de:	d00e      	beq.n	80031fe <HAL_SPI_TransmitReceive+0x27a>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80031e0:	6953      	ldr	r3, [r2, #20]
 80031e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031e8:	d023      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x2ae>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80031ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ec:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80031f0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 80031f2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80031f6:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80031fe:	1c6b      	adds	r3, r5, #1
 8003200:	d004      	beq.n	800320c <HAL_SPI_TransmitReceive+0x288>
 8003202:	f7fd fa3d 	bl	8000680 <HAL_GetTick>
 8003206:	1b80      	subs	r0, r0, r6
 8003208:	4285      	cmp	r5, r0
 800320a:	d993      	bls.n	8003134 <HAL_SPI_TransmitReceive+0x1b0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1c0      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x214>
 8003216:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1bb      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x214>
 8003220:	e7a5      	b.n	800316e <HAL_SPI_TransmitReceive+0x1ea>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003222:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003226:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003228:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800322a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800322e:	3b01      	subs	r3, #1
 8003230:	e7ca      	b.n	80031c8 <HAL_SPI_TransmitReceive+0x244>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003232:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003234:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003238:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800323a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800323e:	3b01      	subs	r3, #1
 8003240:	e7da      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x274>
        else if ((hspi->TxXferCount > 1U) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003242:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8003246:	b289      	uxth	r1, r1
 8003248:	2901      	cmp	r1, #1
 800324a:	d909      	bls.n	8003260 <HAL_SPI_TransmitReceive+0x2dc>
 800324c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800324e:	b139      	cbz	r1, 8003260 <HAL_SPI_TransmitReceive+0x2dc>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003254:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003256:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount-=2;
 8003258:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800325c:	3b02      	subs	r3, #2
 800325e:	e718      	b.n	8003092 <HAL_SPI_TransmitReceive+0x10e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003266:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003268:	3301      	adds	r3, #1
 800326a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800326c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003270:	3b01      	subs	r3, #1
 8003272:	e70e      	b.n	8003092 <HAL_SPI_TransmitReceive+0x10e>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 8003274:	6951      	ldr	r1, [r2, #20]
 8003276:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800327a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800327e:	d907      	bls.n	8003290 <HAL_SPI_TransmitReceive+0x30c>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003280:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003282:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003286:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 8003288:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800328c:	3b02      	subs	r3, #2
 800328e:	e719      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x140>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003290:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8003294:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003298:	3301      	adds	r3, #1
 800329a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800329c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80032a0:	3b01      	subs	r3, #1
 80032a2:	e70f      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x140>
    if(Timeout != HAL_MAX_DELAY)
 80032a4:	1c69      	adds	r1, r5, #1
 80032a6:	f43f af63 	beq.w	8003170 <HAL_SPI_TransmitReceive+0x1ec>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80032aa:	b12d      	cbz	r5, 80032b8 <HAL_SPI_TransmitReceive+0x334>
 80032ac:	f7fd f9e8 	bl	8000680 <HAL_GetTick>
 80032b0:	1b80      	subs	r0, r0, r6
 80032b2:	4285      	cmp	r5, r0
 80032b4:	f4bf af5b 	bcs.w	800316e <HAL_SPI_TransmitReceive+0x1ea>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80032c4:	e758      	b.n	8003178 <HAL_SPI_TransmitReceive+0x1f4>

080032c6 <HAL_SPI_Receive>:
{
 80032c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80032ca:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032cc:	6843      	ldr	r3, [r0, #4]
{
 80032ce:	4604      	mov	r4, r0
 80032d0:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 80032d6:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032d8:	d10c      	bne.n	80032f4 <HAL_SPI_Receive+0x2e>
 80032da:	6883      	ldr	r3, [r0, #8]
 80032dc:	b953      	cbnz	r3, 80032f4 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032de:	2304      	movs	r3, #4
 80032e0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032e4:	4613      	mov	r3, r2
 80032e6:	9500      	str	r5, [sp, #0]
 80032e8:	460a      	mov	r2, r1
 80032ea:	f7ff fe4b 	bl	8002f84 <HAL_SPI_TransmitReceive>
}
 80032ee:	b002      	add	sp, #8
 80032f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80032f4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d00c      	beq.n	8003316 <HAL_SPI_Receive+0x50>
 80032fc:	2301      	movs	r3, #1
 80032fe:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003302:	f7fd f9bd 	bl	8000680 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003306:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800330a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800330c:	2b01      	cmp	r3, #1
 800330e:	d004      	beq.n	800331a <HAL_SPI_Receive+0x54>
    __HAL_UNLOCK(hspi);
 8003310:	2300      	movs	r3, #0
 8003312:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8003316:	2002      	movs	r0, #2
 8003318:	e7e9      	b.n	80032ee <HAL_SPI_Receive+0x28>
  if ((pData == NULL) || (Size == 0U))
 800331a:	f1b8 0f00 	cmp.w	r8, #0
 800331e:	d000      	beq.n	8003322 <HAL_SPI_Receive+0x5c>
 8003320:	b927      	cbnz	r7, 800332c <HAL_SPI_Receive+0x66>
    __HAL_UNLOCK(hspi);
 8003322:	2300      	movs	r3, #0
    return errorcode;
 8003324:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8003326:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800332a:	e7e0      	b.n	80032ee <HAL_SPI_Receive+0x28>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800332c:	2304      	movs	r3, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800332e:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8003332:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003336:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333a:	2300      	movs	r3, #0
 800333c:	6821      	ldr	r1, [r4, #0]
 800333e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = NULL;
 8003342:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->RxXferCount = Size;
 8003344:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
  hspi->TxXferSize  = 0U;
 8003348:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = 0U;
 800334c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 8003350:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 8003352:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68a3      	ldr	r3, [r4, #8]
 8003356:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800335a:	d103      	bne.n	8003364 <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 800335c:	680b      	ldr	r3, [r1, #0]
 800335e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003362:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003364:	684b      	ldr	r3, [r1, #4]
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	433b      	orrs	r3, r7
 800336c:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800336e:	680b      	ldr	r3, [r1, #0]
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337c:	d103      	bne.n	8003386 <HAL_SPI_Receive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800337e:	680b      	ldr	r3, [r1, #0]
 8003380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003384:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d857      	bhi.n	800343c <HAL_SPI_Receive+0x176>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800338c:	2b07      	cmp	r3, #7
 800338e:	d86c      	bhi.n	800346a <HAL_SPI_Receive+0x1a4>
    while (hspi->RxXferCount > 0U)
 8003390:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003394:	b29b      	uxth	r3, r3
 8003396:	b34b      	cbz	r3, 80033ec <HAL_SPI_Receive+0x126>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 80033a0:	f000 8093 	beq.w	80034ca <HAL_SPI_Receive+0x204>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80033aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033ac:	d075      	beq.n	800349a <HAL_SPI_Receive+0x1d4>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount-=4;
 80033b4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80033b8:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=4;
 80033ba:	3b04      	subs	r3, #4
          hspi->RxXferCount-=2;
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80033c2:	e7e5      	b.n	8003390 <HAL_SPI_Receive+0xca>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	423a      	tst	r2, r7
 80033ca:	d01e      	beq.n	800340a <HAL_SPI_Receive+0x144>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80033cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033d0:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80033d4:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 80033d6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 80033e2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1eb      	bne.n	80033c4 <HAL_SPI_Receive+0xfe>
  SPI_CloseTransfer(hspi);
 80033ec:	4620      	mov	r0, r4
 80033ee:	f7ff fbcd 	bl	8002b8c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 80033f2:	2300      	movs	r3, #0
 80033f4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fe:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003402:	3000      	adds	r0, #0
 8003404:	bf18      	it	ne
 8003406:	2001      	movne	r0, #1
 8003408:	e771      	b.n	80032ee <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800340a:	b97d      	cbnz	r5, 800342c <HAL_SPI_Receive+0x166>
          SPI_CloseTransfer(hspi);
 800340c:	4620      	mov	r0, r4
 800340e:	f7ff fbbd 	bl	8002b8c <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8003412:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 8003414:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 8003416:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800341a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003426:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 800342a:	e760      	b.n	80032ee <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800342c:	1c69      	adds	r1, r5, #1
 800342e:	d0d8      	beq.n	80033e2 <HAL_SPI_Receive+0x11c>
 8003430:	f7fd f926 	bl	8000680 <HAL_GetTick>
 8003434:	1b80      	subs	r0, r0, r6
 8003436:	4285      	cmp	r5, r0
 8003438:	d8d3      	bhi.n	80033e2 <HAL_SPI_Receive+0x11c>
 800343a:	e7e7      	b.n	800340c <HAL_SPI_Receive+0x146>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_EOT))
 800343c:	f248 0708 	movw	r7, #32776	; 0x8008
 8003440:	e7cf      	b.n	80033e2 <HAL_SPI_Receive+0x11c>
      if (hspi->Instance->SR & (SPI_FLAG_RXWNE|SPI_FLAG_FRLVL))
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	6953      	ldr	r3, [r2, #20]
 8003446:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800344a:	d01c      	beq.n	8003486 <HAL_SPI_Receive+0x1c0>
        if (hspi->Instance->SR & SPI_FLAG_RXWNE)
 800344c:	6953      	ldr	r3, [r2, #20]
 800344e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003454:	d00f      	beq.n	8003476 <HAL_SPI_Receive+0x1b0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003456:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003458:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800345c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 800345e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003462:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 8003464:	b29b      	uxth	r3, r3
 8003466:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0U)
 800346a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e6      	bne.n	8003442 <HAL_SPI_Receive+0x17c>
 8003474:	e7ba      	b.n	80033ec <HAL_SPI_Receive+0x126>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003476:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003478:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800347c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800347e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003482:	3b01      	subs	r3, #1
 8003484:	e7ee      	b.n	8003464 <HAL_SPI_Receive+0x19e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003486:	2d00      	cmp	r5, #0
 8003488:	d0c0      	beq.n	800340c <HAL_SPI_Receive+0x146>
 800348a:	1c6a      	adds	r2, r5, #1
 800348c:	d0ed      	beq.n	800346a <HAL_SPI_Receive+0x1a4>
 800348e:	f7fd f8f7 	bl	8000680 <HAL_GetTick>
 8003492:	1b80      	subs	r0, r0, r6
 8003494:	4285      	cmp	r5, r0
 8003496:	d8e8      	bhi.n	800346a <HAL_SPI_Receive+0x1a4>
 8003498:	e7b8      	b.n	800340c <HAL_SPI_Receive+0x146>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_FRLVL_QUARTER_FULL)
 800349a:	6959      	ldr	r1, [r3, #20]
 800349c:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 80034a0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80034a4:	d907      	bls.n	80034b6 <HAL_SPI_Receive+0x1f0>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80034a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034a8:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount-=2;
 80034ac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034b0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount-=2;
 80034b2:	3b02      	subs	r3, #2
 80034b4:	e782      	b.n	80033bc <HAL_SPI_Receive+0xf6>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80034b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ba:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80034bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034be:	3301      	adds	r3, #1
 80034c0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80034c2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80034c6:	3b01      	subs	r3, #1
 80034c8:	e778      	b.n	80033bc <HAL_SPI_Receive+0xf6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	d09e      	beq.n	800340c <HAL_SPI_Receive+0x146>
 80034ce:	1c6b      	adds	r3, r5, #1
 80034d0:	f43f af5e 	beq.w	8003390 <HAL_SPI_Receive+0xca>
 80034d4:	f7fd f8d4 	bl	8000680 <HAL_GetTick>
 80034d8:	1b80      	subs	r0, r0, r6
 80034da:	4285      	cmp	r5, r0
 80034dc:	f63f af58 	bhi.w	8003390 <HAL_SPI_Receive+0xca>
 80034e0:	e794      	b.n	800340c <HAL_SPI_Receive+0x146>

080034e2 <HAL_SPI_TxCpltCallback>:
 80034e2:	4770      	bx	lr

080034e4 <HAL_SPI_RxCpltCallback>:
 80034e4:	4770      	bx	lr

080034e6 <HAL_SPI_TxRxCpltCallback>:
 80034e6:	4770      	bx	lr

080034e8 <HAL_SPI_ErrorCallback>:
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 80034ec:	6803      	ldr	r3, [r0, #0]
{
 80034ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t itsource = hspi->Instance->IER;
 80034f2:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
 80034f6:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 80034f8:	f8d3 9014 	ldr.w	r9, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80034fc:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8003500:	ea0a 0509 	and.w	r5, sl, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 8003504:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 8003508:	f005 0741 	and.w	r7, r5, #65	; 0x41
  HAL_SPI_StateTypeDef State = hspi->State;
 800350c:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXNE))
 800350e:	2f01      	cmp	r7, #1
 8003510:	d10a      	bne.n	8003528 <HAL_SPI_IRQHandler+0x3c>
    hspi->RxISR(hspi);
 8003512:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003514:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXE))
 8003516:	f005 0322 	and.w	r3, r5, #34	; 0x22
 800351a:	2b02      	cmp	r3, #2
 800351c:	d106      	bne.n	800352c <HAL_SPI_IRQHandler+0x40>
    hspi->TxISR(hspi);
 800351e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003520:	4620      	mov	r0, r4
}
 8003522:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hspi->TxISR(hspi);
 8003526:	4718      	bx	r3
  uint32_t handled  = 0;
 8003528:	2700      	movs	r7, #0
 800352a:	e7f4      	b.n	8003516 <HAL_SPI_IRQHandler+0x2a>
  if (handled != 0)
 800352c:	2f00      	cmp	r7, #0
 800352e:	d166      	bne.n	80035fe <HAL_SPI_IRQHandler+0x112>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8003530:	072f      	lsls	r7, r5, #28
 8003532:	d566      	bpl.n	8003602 <HAL_SPI_IRQHandler+0x116>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003534:	6823      	ldr	r3, [r4, #0]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 8003536:	f418 4f40 	tst.w	r8, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	f042 0208 	orr.w	r2, r2, #8
 8003540:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	f042 0210 	orr.w	r2, r2, #16
 8003548:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003550:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	f022 0208 	bic.w	r2, r2, #8
 8003558:	611a      	str	r2, [r3, #16]
    if( HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN) ||                       // IT based transfer is done
 800355a:	d00e      	beq.n	800357a <HAL_SPI_IRQHandler+0x8e>
 800355c:	2e04      	cmp	r6, #4
 800355e:	d009      	beq.n	8003574 <HAL_SPI_IRQHandler+0x88>
       ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8003560:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003562:	69d2      	ldr	r2, [r2, #28]
 8003564:	b14a      	cbz	r2, 800357a <HAL_SPI_IRQHandler+0x8e>
 8003566:	2e03      	cmp	r6, #3
 8003568:	d104      	bne.n	8003574 <HAL_SPI_IRQHandler+0x88>
      HAL_SPI_TxCpltCallback(hspi);
 800356a:	4620      	mov	r0, r4
 800356c:	f7ff ffb9 	bl	80034e2 <HAL_SPI_TxCpltCallback>
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)) )   // DMA is used in normal mode
 8003574:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003576:	69d2      	ldr	r2, [r2, #28]
 8003578:	bb8a      	cbnz	r2, 80035de <HAL_SPI_IRQHandler+0xf2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8003580:	d01b      	beq.n	80035ba <HAL_SPI_IRQHandler+0xce>
      SPI_CloseTransfer(hspi);
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff fb02 	bl	8002b8c <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8003588:	2301      	movs	r3, #1
 800358a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003592:	b323      	cbz	r3, 80035de <HAL_SPI_IRQHandler+0xf2>
        HAL_SPI_ErrorCallback(hspi);
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff ffa7 	bl	80034e8 <HAL_SPI_ErrorCallback>
 800359a:	e030      	b.n	80035fe <HAL_SPI_IRQHandler+0x112>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800359c:	68e1      	ldr	r1, [r4, #12]
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	290f      	cmp	r1, #15
 80035a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a4:	d90f      	bls.n	80035c6 <HAL_SPI_IRQHandler+0xda>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80035a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035a8:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80035ac:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80035ae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0)
 80035ba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1eb      	bne.n	800359c <HAL_SPI_IRQHandler+0xb0>
 80035c4:	e7dd      	b.n	8003582 <HAL_SPI_IRQHandler+0x96>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c6:	2907      	cmp	r1, #7
 80035c8:	d903      	bls.n	80035d2 <HAL_SPI_IRQHandler+0xe6>
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80035ca:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80035cc:	f823 2b02 	strh.w	r2, [r3], #2
 80035d0:	e7ec      	b.n	80035ac <HAL_SPI_IRQHandler+0xc0>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80035d2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80035d6:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80035d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035da:	3301      	adds	r3, #1
 80035dc:	e7e6      	b.n	80035ac <HAL_SPI_IRQHandler+0xc0>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80035de:	2e05      	cmp	r6, #5
 80035e0:	d104      	bne.n	80035ec <HAL_SPI_IRQHandler+0x100>
      HAL_SPI_TxRxCpltCallback(hspi);
 80035e2:	4620      	mov	r0, r4
 80035e4:	f7ff ff7f 	bl	80034e6 <HAL_SPI_TxRxCpltCallback>
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80035ec:	2e04      	cmp	r6, #4
 80035ee:	d104      	bne.n	80035fa <HAL_SPI_IRQHandler+0x10e>
      HAL_SPI_RxCpltCallback(hspi);
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff ff77 	bl	80034e4 <HAL_SPI_RxCpltCallback>
 80035f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80035fa:	2e03      	cmp	r6, #3
 80035fc:	d0b5      	beq.n	800356a <HAL_SPI_IRQHandler+0x7e>
 80035fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT) && HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP ))
 8003602:	f01a 0f08 	tst.w	sl, #8
 8003606:	d009      	beq.n	800361c <HAL_SPI_IRQHandler+0x130>
 8003608:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800360c:	d006      	beq.n	800361c <HAL_SPI_IRQHandler+0x130>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	6993      	ldr	r3, [r2, #24]
 8003612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003616:	6193      	str	r3, [r2, #24]
    return;
 8003618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != RESET)
 800361c:	f415 7f58 	tst.w	r5, #864	; 0x360
 8003620:	d0ed      	beq.n	80035fe <HAL_SPI_IRQHandler+0x112>
    if ((trigger & SPI_FLAG_OVR) != RESET)
 8003622:	0668      	lsls	r0, r5, #25
 8003624:	d50a      	bpl.n	800363c <HAL_SPI_IRQHandler+0x150>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003626:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800362a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003634:	6993      	ldr	r3, [r2, #24]
 8003636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != RESET)
 800363c:	05a9      	lsls	r1, r5, #22
 800363e:	d50a      	bpl.n	8003656 <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003640:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003644:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800364e:	6993      	ldr	r3, [r2, #24]
 8003650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003654:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != RESET)
 8003656:	05ea      	lsls	r2, r5, #23
 8003658:	d50a      	bpl.n	8003670 <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800365a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800365e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003668:	6993      	ldr	r3, [r2, #24]
 800366a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != RESET)
 8003670:	06ab      	lsls	r3, r5, #26
 8003672:	d50a      	bpl.n	800368a <HAL_SPI_IRQHandler+0x19e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003674:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003678:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003682:	6993      	ldr	r3, [r2, #24]
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800368a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0b5      	beq.n	80035fe <HAL_SPI_IRQHandler+0x112>
      __HAL_SPI_DISABLE(hspi);
 8003692:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 8003694:	f418 4f40 	tst.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 80036a6:	f022 0203 	bic.w	r2, r2, #3
 80036aa:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN|SPI_CFG1_RXDMAEN))
 80036ac:	d012      	beq.n	80036d4 <HAL_SPI_IRQHandler+0x1e8>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80036ae:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80036b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80036b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80036b6:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80036b8:	b118      	cbz	r0, 80036c2 <HAL_SPI_IRQHandler+0x1d6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_SPI_IRQHandler+0x1f0>)
 80036bc:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80036be:	f7fd f99b 	bl	80009f8 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 80036c2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d09a      	beq.n	80035fe <HAL_SPI_IRQHandler+0x112>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_SPI_IRQHandler+0x1f0>)
}
 80036ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036ce:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80036d0:	f7fd b992 	b.w	80009f8 <HAL_DMA_Abort_IT>
        hspi->State = HAL_SPI_STATE_READY;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 80036da:	e75b      	b.n	8003594 <HAL_SPI_IRQHandler+0xa8>
 80036dc:	080036e1 	.word	0x080036e1

080036e0 <SPI_DMAAbortOnError>:
{
 80036e0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = 0U;
 80036ea:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80036f4:	f7ff fef8 	bl	80034e8 <HAL_SPI_ErrorCallback>
 80036f8:	bd08      	pop	{r3, pc}

080036fa <HAL_TIM_PeriodElapsedCallback>:
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_OC_DelayElapsedCallback>:
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_IC_CaptureCallback>:
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_TriggerCallback>:
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003704:	6803      	ldr	r3, [r0, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	0791      	lsls	r1, r2, #30
{
 800370a:	b510      	push	{r4, lr}
 800370c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800370e:	d50f      	bpl.n	8003730 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	0792      	lsls	r2, r2, #30
 8003714:	d50c      	bpl.n	8003730 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003716:	f06f 0202 	mvn.w	r2, #2
 800371a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371c:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800371e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003720:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003722:	0799      	lsls	r1, r3, #30
 8003724:	f000 8085 	beq.w	8003832 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003728:	f7ff ffe9 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372c:	2300      	movs	r3, #0
 800372e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	0752      	lsls	r2, r2, #29
 8003736:	d510      	bpl.n	800375a <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	0750      	lsls	r0, r2, #29
 800373c:	d50d      	bpl.n	800375a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800373e:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003746:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003748:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800374a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800374c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003750:	d075      	beq.n	800383e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003752:	f7ff ffd4 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	2300      	movs	r3, #0
 8003758:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	0711      	lsls	r1, r2, #28
 8003760:	d50f      	bpl.n	8003782 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	0712      	lsls	r2, r2, #28
 8003766:	d50c      	bpl.n	8003782 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003768:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800376c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003770:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003772:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003774:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003776:	079b      	lsls	r3, r3, #30
 8003778:	d067      	beq.n	800384a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	f7ff ffc0 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	2300      	movs	r3, #0
 8003780:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	06d0      	lsls	r0, r2, #27
 8003788:	d510      	bpl.n	80037ac <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	06d1      	lsls	r1, r2, #27
 800378e:	d50d      	bpl.n	80037ac <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003790:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003798:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800379a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800379c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800379e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037a2:	d058      	beq.n	8003856 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80037a4:	f7ff ffab 	bl	80036fe <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	2300      	movs	r3, #0
 80037aa:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	07d2      	lsls	r2, r2, #31
 80037b2:	d508      	bpl.n	80037c6 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	07d0      	lsls	r0, r2, #31
 80037b8:	d505      	bpl.n	80037c6 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037ba:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80037be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	f7ff ff9a 	bl	80036fa <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	0611      	lsls	r1, r2, #24
 80037cc:	d508      	bpl.n	80037e0 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	0612      	lsls	r2, r2, #24
 80037d2:	d505      	bpl.n	80037e0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80037d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80037dc:	f000 f8eb 	bl	80039b6 <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	05d0      	lsls	r0, r2, #23
 80037e6:	d508      	bpl.n	80037fa <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	0611      	lsls	r1, r2, #24
 80037ec:	d505      	bpl.n	80037fa <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80037f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	f000 f8de 	bl	80039b6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	0652      	lsls	r2, r2, #25
 8003800:	d508      	bpl.n	8003814 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	0650      	lsls	r0, r2, #25
 8003806:	d505      	bpl.n	8003814 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003808:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800380c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800380e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003810:	f7ff ff77 	bl	8003702 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	0691      	lsls	r1, r2, #26
 800381a:	d522      	bpl.n	8003862 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	0692      	lsls	r2, r2, #26
 8003820:	d51f      	bpl.n	8003862 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003822:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003826:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003828:	611a      	str	r2, [r3, #16]
    }
  }
}
 800382a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800382e:	f000 b8c1 	b.w	80039b4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	f7ff ff63 	bl	80036fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff ff62 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
 800383c:	e776      	b.n	800372c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	f7ff ff5d 	bl	80036fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff ff5c 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
 8003848:	e785      	b.n	8003756 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	f7ff ff57 	bl	80036fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ff56 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
 8003854:	e793      	b.n	800377e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	f7ff ff51 	bl	80036fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff ff50 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
 8003860:	e7a2      	b.n	80037a8 <HAL_TIM_IRQHandler+0xa4>
 8003862:	bd10      	pop	{r4, pc}

08003864 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <TIM_Base_SetConfig+0xc8>)
  tmpcr1 = TIMx->CR1;
 8003866:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003868:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800386a:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386c:	d012      	beq.n	8003894 <TIM_Base_SetConfig+0x30>
 800386e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003872:	d00f      	beq.n	8003894 <TIM_Base_SetConfig+0x30>
 8003874:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003878:	4290      	cmp	r0, r2
 800387a:	d00b      	beq.n	8003894 <TIM_Base_SetConfig+0x30>
 800387c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003880:	4290      	cmp	r0, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0x30>
 8003884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003888:	4290      	cmp	r0, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x30>
 800388c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003890:	4290      	cmp	r0, r2
 8003892:	d119      	bne.n	80038c8 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003894:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800389a:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <TIM_Base_SetConfig+0xc8>)
 800389e:	4290      	cmp	r0, r2
 80038a0:	d01d      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038a6:	d01a      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038a8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038ac:	4290      	cmp	r0, r2
 80038ae:	d016      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038b4:	4290      	cmp	r0, r2
 80038b6:	d012      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038bc:	4290      	cmp	r0, r2
 80038be:	d00e      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038c0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038c4:	4290      	cmp	r0, r2
 80038c6:	d00a      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <TIM_Base_SetConfig+0xcc>)
 80038ca:	4290      	cmp	r0, r2
 80038cc:	d007      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038d2:	4290      	cmp	r0, r2
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0x7a>
 80038d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038da:	4290      	cmp	r0, r2
 80038dc:	d103      	bne.n	80038e6 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	68ca      	ldr	r2, [r1, #12]
 80038e4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e6:	694a      	ldr	r2, [r1, #20]
 80038e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f2:	688b      	ldr	r3, [r1, #8]
 80038f4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80038f6:	880b      	ldrh	r3, [r1, #0]
 80038f8:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <TIM_Base_SetConfig+0xc8>)
 80038fc:	4298      	cmp	r0, r3
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0xbc>
 8003900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003904:	4298      	cmp	r0, r3
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0xbc>
 8003908:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800390c:	4298      	cmp	r0, r3
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0xbc>
 8003910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003914:	4298      	cmp	r0, r3
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0xbc>
 8003918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391c:	4298      	cmp	r0, r3
 800391e:	d101      	bne.n	8003924 <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	8a0b      	ldrh	r3, [r1, #16]
 8003922:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003924:	2301      	movs	r3, #1
 8003926:	6143      	str	r3, [r0, #20]
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40014000 	.word	0x40014000

08003934 <HAL_TIM_Base_Init>:
{ 
 8003934:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003936:	4604      	mov	r4, r0
 8003938:	b1a0      	cbz	r0, 8003964 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800393a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800393e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003942:	b91b      	cbnz	r3, 800394c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003944:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003948:	f004 fcb8 	bl	80082bc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800394c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8003952:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003956:	f7ff ff85 	bl	8003864 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800395a:	2301      	movs	r3, #1
  return HAL_OK;
 800395c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800395e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003962:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003964:	2001      	movs	r0, #1
}
 8003966:	bd10      	pop	{r4, pc}

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003968:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
{
 800396e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003970:	d01c      	beq.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003972:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003974:	4d0e      	ldr	r5, [pc, #56]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003976:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003978:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800397a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800397c:	d003      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800397e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003982:	42aa      	cmp	r2, r5
 8003984:	d103      	bne.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003986:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800398a:	684d      	ldr	r5, [r1, #4]
 800398c:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003994:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003996:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800399a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800399c:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800399e:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80039a0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80039a2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80039a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80039ac:	2002      	movs	r0, #2
} 
 80039ae:	bd30      	pop	{r4, r5, pc}
 80039b0:	40010000 	.word	0x40010000

080039b4 <HAL_TIMEx_CommutationCallback>:
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	4770      	bx	lr

080039b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039bc:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 80039be:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 80039c0:	6805      	ldr	r5, [r0, #0]
{
 80039c2:	b087      	sub	sp, #28
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 80039c4:	68a3      	ldr	r3, [r4, #8]
 80039c6:	6922      	ldr	r2, [r4, #16]
 80039c8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039ca:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039cc:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 80039ce:	4313      	orrs	r3, r2
 80039d0:	6962      	ldr	r2, [r4, #20]
 80039d2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039d4:	4ab3      	ldr	r2, [pc, #716]	; (8003ca4 <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 80039d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039d8:	4032      	ands	r2, r6
 80039da:	4313      	orrs	r3, r2

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039dc:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039de:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e0:	686b      	ldr	r3, [r5, #4]
 80039e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039e6:	4313      	orrs	r3, r2
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ea:	606b      	str	r3, [r5, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ec:	4bae      	ldr	r3, [pc, #696]	; (8003ca8 <UART_SetConfig+0x2f0>)
 80039ee:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039f0:	bf1c      	itt	ne
 80039f2:	6a23      	ldrne	r3, [r4, #32]
 80039f4:	431a      	orrne	r2, r3
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 80039f6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 80039fa:	bf02      	ittt	eq
 80039fc:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 80039fe:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8003a00:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8003a02:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8003a04:	bf08      	it	eq
 8003a06:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a08:	68ab      	ldr	r3, [r5, #8]
 8003a0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8003a16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a18:	f023 030f 	bic.w	r3, r3, #15
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	62eb      	str	r3, [r5, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a20:	4ba2      	ldr	r3, [pc, #648]	; (8003cac <UART_SetConfig+0x2f4>)
 8003a22:	429d      	cmp	r5, r3
 8003a24:	d11c      	bne.n	8003a60 <UART_SetConfig+0xa8>
 8003a26:	4ba2      	ldr	r3, [pc, #648]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2e:	2b28      	cmp	r3, #40	; 0x28
 8003a30:	f200 825e 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003a34:	4a9f      	ldr	r2, [pc, #636]	; (8003cb4 <UART_SetConfig+0x2fc>)
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a36:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	f040 81e6 	bne.w	8003e0c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	f000 81ba 	beq.w	8003dba <UART_SetConfig+0x402>
 8003a46:	f200 816e 	bhi.w	8003d26 <UART_SetConfig+0x36e>
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f000 8197 	beq.w	8003d7e <UART_SetConfig+0x3c6>
 8003a50:	f0c0 817d 	bcc.w	8003d4e <UART_SetConfig+0x396>
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	f000 8195 	beq.w	8003d84 <UART_SetConfig+0x3cc>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	e186      	b.n	8003d6e <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a60:	4b95      	ldr	r3, [pc, #596]	; (8003cb8 <UART_SetConfig+0x300>)
 8003a62:	429d      	cmp	r5, r3
 8003a64:	d108      	bne.n	8003a78 <UART_SetConfig+0xc0>
 8003a66:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	f200 823e 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003a74:	4a91      	ldr	r2, [pc, #580]	; (8003cbc <UART_SetConfig+0x304>)
 8003a76:	e7de      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003a78:	4b91      	ldr	r3, [pc, #580]	; (8003cc0 <UART_SetConfig+0x308>)
 8003a7a:	429d      	cmp	r5, r3
 8003a7c:	d108      	bne.n	8003a90 <UART_SetConfig+0xd8>
 8003a7e:	4b8c      	ldr	r3, [pc, #560]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	f200 8232 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003a8c:	4a8d      	ldr	r2, [pc, #564]	; (8003cc4 <UART_SetConfig+0x30c>)
 8003a8e:	e7d2      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003a90:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <UART_SetConfig+0x310>)
 8003a92:	429d      	cmp	r5, r3
 8003a94:	d108      	bne.n	8003aa8 <UART_SetConfig+0xf0>
 8003a96:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	f200 8226 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003aa4:	4a89      	ldr	r2, [pc, #548]	; (8003ccc <UART_SetConfig+0x314>)
 8003aa6:	e7c6      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003aa8:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <UART_SetConfig+0x318>)
 8003aaa:	429d      	cmp	r5, r3
 8003aac:	d108      	bne.n	8003ac0 <UART_SetConfig+0x108>
 8003aae:	4b80      	ldr	r3, [pc, #512]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	f200 821a 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003abc:	4a85      	ldr	r2, [pc, #532]	; (8003cd4 <UART_SetConfig+0x31c>)
 8003abe:	e7ba      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003ac0:	4b85      	ldr	r3, [pc, #532]	; (8003cd8 <UART_SetConfig+0x320>)
 8003ac2:	429d      	cmp	r5, r3
 8003ac4:	d108      	bne.n	8003ad8 <UART_SetConfig+0x120>
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ace:	2b28      	cmp	r3, #40	; 0x28
 8003ad0:	f200 820e 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003ad4:	4a81      	ldr	r2, [pc, #516]	; (8003cdc <UART_SetConfig+0x324>)
 8003ad6:	e7ae      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003ad8:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <UART_SetConfig+0x328>)
 8003ada:	429d      	cmp	r5, r3
 8003adc:	d108      	bne.n	8003af0 <UART_SetConfig+0x138>
 8003ade:	4b74      	ldr	r3, [pc, #464]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	f200 8202 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003aec:	4a7d      	ldr	r2, [pc, #500]	; (8003ce4 <UART_SetConfig+0x32c>)
 8003aee:	e7a2      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003af0:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <UART_SetConfig+0x330>)
 8003af2:	429d      	cmp	r5, r3
 8003af4:	d108      	bne.n	8003b08 <UART_SetConfig+0x150>
 8003af6:	4b6e      	ldr	r3, [pc, #440]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	f200 81f6 	bhi.w	8003ef0 <UART_SetConfig+0x538>
 8003b04:	4a79      	ldr	r2, [pc, #484]	; (8003cec <UART_SetConfig+0x334>)
 8003b06:	e796      	b.n	8003a36 <UART_SetConfig+0x7e>
 8003b08:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <UART_SetConfig+0x2f0>)
 8003b0a:	429d      	cmp	r5, r3
 8003b0c:	f040 81f0 	bne.w	8003ef0 <UART_SetConfig+0x538>
 8003b10:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b16:	f002 0207 	and.w	r2, r2, #7
 8003b1a:	2a05      	cmp	r2, #5
 8003b1c:	d901      	bls.n	8003b22 <UART_SetConfig+0x16a>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
      break;
    }
  }

  return ret;
 8003b20:	e080      	b.n	8003c24 <UART_SetConfig+0x26c>
 8003b22:	4973      	ldr	r1, [pc, #460]	; (8003cf0 <UART_SetConfig+0x338>)
 8003b24:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 8003b26:	2d08      	cmp	r5, #8
 8003b28:	d02f      	beq.n	8003b8a <UART_SetConfig+0x1d2>
 8003b2a:	d808      	bhi.n	8003b3e <UART_SetConfig+0x186>
 8003b2c:	2d02      	cmp	r5, #2
 8003b2e:	d021      	beq.n	8003b74 <UART_SetConfig+0x1bc>
 8003b30:	2d04      	cmp	r5, #4
 8003b32:	d1f4      	bne.n	8003b1e <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b34:	4668      	mov	r0, sp
 8003b36:	f7fe fecf 	bl	80028d8 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8003b3a:	9801      	ldr	r0, [sp, #4]
      break;
 8003b3c:	e01c      	b.n	8003b78 <UART_SetConfig+0x1c0>
    switch (clocksource)
 8003b3e:	2d20      	cmp	r5, #32
 8003b40:	d005      	beq.n	8003b4e <UART_SetConfig+0x196>
 8003b42:	2d40      	cmp	r5, #64	; 0x40
 8003b44:	d01c      	beq.n	8003b80 <UART_SetConfig+0x1c8>
 8003b46:	2d10      	cmp	r5, #16
 8003b48:	d1e9      	bne.n	8003b1e <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 8003b4a:	486a      	ldr	r0, [pc, #424]	; (8003cf4 <UART_SetConfig+0x33c>)
 8003b4c:	e001      	b.n	8003b52 <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8003b52:	6866      	ldr	r6, [r4, #4]
 8003b54:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003b58:	4283      	cmp	r3, r0
 8003b5a:	d8e0      	bhi.n	8003b1e <UART_SetConfig+0x166>
 8003b5c:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8003b60:	d8dd      	bhi.n	8003b1e <UART_SetConfig+0x166>
        switch (clocksource)
 8003b62:	2d08      	cmp	r5, #8
 8003b64:	d078      	beq.n	8003c58 <UART_SetConfig+0x2a0>
 8003b66:	d81a      	bhi.n	8003b9e <UART_SetConfig+0x1e6>
 8003b68:	2d02      	cmp	r5, #2
 8003b6a:	d038      	beq.n	8003bde <UART_SetConfig+0x226>
 8003b6c:	2d04      	cmp	r5, #4
 8003b6e:	d05d      	beq.n	8003c2c <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e04f      	b.n	8003c14 <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8003b74:	f7fe fe9a 	bl	80028ac <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d1ea      	bne.n	8003b52 <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
      break;
 8003b7e:	e051      	b.n	8003c24 <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b80:	a803      	add	r0, sp, #12
 8003b82:	f7fe ff49 	bl	8002a18 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8003b86:	9804      	ldr	r0, [sp, #16]
      break;
 8003b88:	e7f6      	b.n	8003b78 <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	485a      	ldr	r0, [pc, #360]	; (8003cf8 <UART_SetConfig+0x340>)
 8003b8e:	f012 0f20 	tst.w	r2, #32
 8003b92:	d0de      	beq.n	8003b52 <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b9a:	40d8      	lsrs	r0, r3
 8003b9c:	e7d9      	b.n	8003b52 <UART_SetConfig+0x19a>
        switch (clocksource)
 8003b9e:	2d20      	cmp	r5, #32
 8003ba0:	f000 80b0 	beq.w	8003d04 <UART_SetConfig+0x34c>
 8003ba4:	2d40      	cmp	r5, #64	; 0x40
 8003ba6:	d04c      	beq.n	8003c42 <UART_SetConfig+0x28a>
 8003ba8:	2d10      	cmp	r5, #16
 8003baa:	d1e1      	bne.n	8003b70 <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003bac:	4b53      	ldr	r3, [pc, #332]	; (8003cfc <UART_SetConfig+0x344>)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bb2:	4850      	ldr	r0, [pc, #320]	; (8003cf4 <UART_SetConfig+0x33c>)
 8003bb4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f7fc fb99 	bl	80002f0 <__aeabi_uldivmod>
 8003bbe:	4632      	mov	r2, r6
 8003bc0:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003bca:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003bce:	0870      	lsrs	r0, r6, #1
 8003bd0:	eb18 0500 	adds.w	r5, r8, r0
 8003bd4:	f149 0600 	adc.w	r6, r9, #0
 8003bd8:	4628      	mov	r0, r5
 8003bda:	4631      	mov	r1, r6
 8003bdc:	e017      	b.n	8003c0e <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003bde:	f7fe fe65 	bl	80028ac <HAL_RCCEx_GetD3PCLK1Freq>
 8003be2:	4b46      	ldr	r3, [pc, #280]	; (8003cfc <UART_SetConfig+0x344>)
 8003be4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003be6:	6865      	ldr	r5, [r4, #4]
 8003be8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003bec:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f7fc fb7e 	bl	80002f0 <__aeabi_uldivmod>
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	020f      	lsls	r7, r1, #8
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	0206      	lsls	r6, r0, #8
 8003bfc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003c00:	0868      	lsrs	r0, r5, #1
 8003c02:	eb16 0800 	adds.w	r8, r6, r0
 8003c06:	f147 0900 	adc.w	r9, r7, #0
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003c0e:	f7fc fb6f 	bl	80002f0 <__aeabi_uldivmod>
          break;
 8003c12:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8003c14:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003c18:	4a39      	ldr	r2, [pc, #228]	; (8003d00 <UART_SetConfig+0x348>)
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	f63f af7f 	bhi.w	8003b1e <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	60d0      	str	r0, [r2, #12]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	b007      	add	sp, #28
 8003c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c2c:	4668      	mov	r0, sp
 8003c2e:	f7fe fe53 	bl	80028d8 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003c32:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <UART_SetConfig+0x344>)
 8003c34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c36:	6865      	ldr	r5, [r4, #4]
 8003c38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9801      	ldr	r0, [sp, #4]
 8003c40:	e7d5      	b.n	8003bee <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c42:	a803      	add	r0, sp, #12
 8003c44:	f7fe fee8 	bl	8002a18 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003c48:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <UART_SetConfig+0x344>)
 8003c4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c4c:	6865      	ldr	r5, [r4, #4]
 8003c4e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c52:	2300      	movs	r3, #0
 8003c54:	9804      	ldr	r0, [sp, #16]
 8003c56:	e7ca      	b.n	8003bee <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c58:	4915      	ldr	r1, [pc, #84]	; (8003cb0 <UART_SetConfig+0x2f8>)
 8003c5a:	0877      	lsrs	r7, r6, #1
 8003c5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c5e:	680d      	ldr	r5, [r1, #0]
 8003c60:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <UART_SetConfig+0x344>)
 8003c62:	f015 0520 	ands.w	r5, r5, #32
 8003c66:	d017      	beq.n	8003c98 <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8003c68:	6809      	ldr	r1, [r1, #0]
 8003c6a:	4823      	ldr	r0, [pc, #140]	; (8003cf8 <UART_SetConfig+0x340>)
 8003c6c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003c70:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c74:	2300      	movs	r3, #0
 8003c76:	40c8      	lsrs	r0, r1
 8003c78:	2100      	movs	r1, #0
 8003c7a:	f7fc fb39 	bl	80002f0 <__aeabi_uldivmod>
 8003c7e:	4632      	mov	r2, r6
 8003c80:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003c84:	2300      	movs	r3, #0
 8003c86:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003c8a:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003c8e:	eb18 0007 	adds.w	r0, r8, r7
 8003c92:	f149 0100 	adc.w	r1, r9, #0
 8003c96:	e7ba      	b.n	8003c0e <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003c98:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4816      	ldr	r0, [pc, #88]	; (8003cf8 <UART_SetConfig+0x340>)
 8003ca0:	e7ea      	b.n	8003c78 <UART_SetConfig+0x2c0>
 8003ca2:	bf00      	nop
 8003ca4:	cfff69f3 	.word	0xcfff69f3
 8003ca8:	58000c00 	.word	0x58000c00
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	0800855b 	.word	0x0800855b
 8003cb8:	40004400 	.word	0x40004400
 8003cbc:	08008584 	.word	0x08008584
 8003cc0:	40004800 	.word	0x40004800
 8003cc4:	08008584 	.word	0x08008584
 8003cc8:	40004c00 	.word	0x40004c00
 8003ccc:	08008584 	.word	0x08008584
 8003cd0:	40005000 	.word	0x40005000
 8003cd4:	08008584 	.word	0x08008584
 8003cd8:	40011400 	.word	0x40011400
 8003cdc:	0800855b 	.word	0x0800855b
 8003ce0:	40007800 	.word	0x40007800
 8003ce4:	08008584 	.word	0x08008584
 8003ce8:	40007c00 	.word	0x40007c00
 8003cec:	08008584 	.word	0x08008584
 8003cf0:	0800858a 	.word	0x0800858a
 8003cf4:	003d0900 	.word	0x003d0900
 8003cf8:	03d09000 	.word	0x03d09000
 8003cfc:	08008590 	.word	0x08008590
 8003d00:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003d04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d06:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <UART_SetConfig+0x544>)
 8003d0c:	0870      	lsrs	r0, r6, #1
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d14:	4632      	mov	r2, r6
 8003d16:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003d1a:	fbb5 f5f3 	udiv	r5, r5, r3
 8003d1e:	2300      	movs	r3, #0
 8003d20:	fbe5 0106 	umlal	r0, r1, r5, r6
 8003d24:	e773      	b.n	8003c0e <UART_SetConfig+0x256>
    switch (clocksource)
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d068      	beq.n	8003dfc <UART_SetConfig+0x444>
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d03b      	beq.n	8003da6 <UART_SetConfig+0x3ee>
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	f47f ae93 	bne.w	8003a5a <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003d34:	4b71      	ldr	r3, [pc, #452]	; (8003efc <UART_SetConfig+0x544>)
 8003d36:	4a72      	ldr	r2, [pc, #456]	; (8003f00 <UART_SetConfig+0x548>)
 8003d38:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003d3c:	6860      	ldr	r0, [r4, #4]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	0842      	lsrs	r2, r0, #1
 8003d44:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003d48:	fbb2 f2f0 	udiv	r2, r2, r0
 8003d4c:	e00d      	b.n	8003d6a <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003d4e:	f7fe f845 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003d52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d54:	4a69      	ldr	r2, [pc, #420]	; (8003efc <UART_SetConfig+0x544>)
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003d5c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003d60:	085a      	lsrs	r2, r3, #1
 8003d62:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003d6e:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d72:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8003d76:	6820      	ldr	r0, [r4, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60c2      	str	r2, [r0, #12]
 8003d7c:	e752      	b.n	8003c24 <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003d7e:	f7fe f843 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 8003d82:	e7e6      	b.n	8003d52 <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d84:	4668      	mov	r0, sp
 8003d86:	f7fe fda7 	bl	80028d8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003d8a:	4b5c      	ldr	r3, [pc, #368]	; (8003efc <UART_SetConfig+0x544>)
 8003d8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d8e:	6861      	ldr	r1, [r4, #4]
 8003d90:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003d94:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9a:	084a      	lsrs	r2, r1, #1
 8003d9c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003da0:	fbb2 f2f1 	udiv	r2, r2, r1
 8003da4:	e7e1      	b.n	8003d6a <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003da6:	a803      	add	r0, sp, #12
 8003da8:	f7fe fe36 	bl	8002a18 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <UART_SetConfig+0x544>)
 8003dae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003db0:	6861      	ldr	r1, [r4, #4]
 8003db2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	e7ed      	b.n	8003d96 <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dba:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <UART_SetConfig+0x54c>)
 8003dbc:	4852      	ldr	r0, [pc, #328]	; (8003f08 <UART_SetConfig+0x550>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	6865      	ldr	r5, [r4, #4]
 8003dc2:	f013 0320 	ands.w	r3, r3, #32
 8003dc6:	4e4d      	ldr	r6, [pc, #308]	; (8003efc <UART_SetConfig+0x544>)
 8003dc8:	d00d      	beq.n	8003de6 <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003dd0:	40d0      	lsrs	r0, r2
 8003dd2:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8003dd6:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003dda:	086a      	lsrs	r2, r5, #1
 8003ddc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003de0:	fbb2 f2f5 	udiv	r2, r2, r5
 8003de4:	e7c1      	b.n	8003d6a <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003de6:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8003dea:	fbb0 f0f2 	udiv	r0, r0, r2
 8003dee:	086a      	lsrs	r2, r5, #1
 8003df0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003df4:	fbb2 f2f5 	udiv	r2, r2, r5
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	e7b8      	b.n	8003d6e <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003dfc:	4b3f      	ldr	r3, [pc, #252]	; (8003efc <UART_SetConfig+0x544>)
 8003dfe:	6865      	ldr	r5, [r4, #4]
 8003e00:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003e04:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e08:	b280      	uxth	r0, r0
 8003e0a:	e7e6      	b.n	8003dda <UART_SetConfig+0x422>
    switch (clocksource)
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d046      	beq.n	8003e9e <UART_SetConfig+0x4e6>
 8003e10:	d818      	bhi.n	8003e44 <UART_SetConfig+0x48c>
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d035      	beq.n	8003e82 <UART_SetConfig+0x4ca>
 8003e16:	d324      	bcc.n	8003e62 <UART_SetConfig+0x4aa>
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	f47f ae80 	bne.w	8003b1e <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e1e:	4668      	mov	r0, sp
 8003e20:	f7fe fd5a 	bl	80028d8 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003e24:	4b35      	ldr	r3, [pc, #212]	; (8003efc <UART_SetConfig+0x544>)
 8003e26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e28:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003e2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003e30:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003e32:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e36:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	60cb      	str	r3, [r1, #12]
 8003e42:	e69b      	b.n	8003b7c <UART_SetConfig+0x1c4>
    switch (clocksource)
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d04c      	beq.n	8003ee2 <UART_SetConfig+0x52a>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d01d      	beq.n	8003e88 <UART_SetConfig+0x4d0>
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	f47f ae66 	bne.w	8003b1e <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003e52:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <UART_SetConfig+0x544>)
 8003e54:	6862      	ldr	r2, [r4, #4]
 8003e56:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8003e5a:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e60:	e008      	b.n	8003e74 <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003e62:	f7fd ffbb 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003e66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <UART_SetConfig+0x544>)
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003e70:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003e74:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	60eb      	str	r3, [r5, #12]
 8003e80:	e67c      	b.n	8003b7c <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003e82:	f7fd ffc1 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 8003e86:	e7ee      	b.n	8003e66 <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e88:	a803      	add	r0, sp, #12
 8003e8a:	f7fe fdc5 	bl	8002a18 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <UART_SetConfig+0x544>)
 8003e90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e92:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003e96:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003e9a:	9b04      	ldr	r3, [sp, #16]
 8003e9c:	e7c9      	b.n	8003e32 <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e9e:	4e19      	ldr	r6, [pc, #100]	; (8003f04 <UART_SetConfig+0x54c>)
 8003ea0:	6860      	ldr	r0, [r4, #4]
 8003ea2:	6833      	ldr	r3, [r6, #0]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <UART_SetConfig+0x550>)
 8003ea6:	f013 0320 	ands.w	r3, r3, #32
 8003eaa:	4c14      	ldr	r4, [pc, #80]	; (8003efc <UART_SetConfig+0x544>)
 8003eac:	d00e      	beq.n	8003ecc <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8003eae:	6833      	ldr	r3, [r6, #0]
 8003eb0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003eb4:	40da      	lsrs	r2, r3
 8003eb6:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 8003eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebe:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8003ec2:	fbb2 f2f0 	udiv	r2, r2, r0
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	60ea      	str	r2, [r5, #12]
 8003eca:	e657      	b.n	8003b7c <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003ecc:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8003ed0:	fbb2 f2f1 	udiv	r2, r2, r1
 8003ed4:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8003ed8:	fbb2 f2f0 	udiv	r2, r2, r0
 8003edc:	b292      	uxth	r2, r2
 8003ede:	60ea      	str	r2, [r5, #12]
 8003ee0:	e6a0      	b.n	8003c24 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <UART_SetConfig+0x544>)
 8003ee4:	6862      	ldr	r2, [r4, #4]
 8003ee6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	e7b5      	b.n	8003e5c <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ef4:	f47f ae13 	bne.w	8003b1e <UART_SetConfig+0x166>
 8003ef8:	e5af      	b.n	8003a5a <UART_SetConfig+0xa2>
 8003efa:	bf00      	nop
 8003efc:	08008590 	.word	0x08008590
 8003f00:	003d0900 	.word	0x003d0900
 8003f04:	58024400 	.word	0x58024400
 8003f08:	03d09000 	.word	0x03d09000

08003f0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f0e:	07da      	lsls	r2, r3, #31
{
 8003f10:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f12:	d506      	bpl.n	8003f22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f14:	6801      	ldr	r1, [r0, #0]
 8003f16:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003f18:	684a      	ldr	r2, [r1, #4]
 8003f1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003f1e:	4322      	orrs	r2, r4
 8003f20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f22:	079c      	lsls	r4, r3, #30
 8003f24:	d506      	bpl.n	8003f34 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	6801      	ldr	r1, [r0, #0]
 8003f28:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003f2a:	684a      	ldr	r2, [r1, #4]
 8003f2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f30:	4322      	orrs	r2, r4
 8003f32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f34:	0759      	lsls	r1, r3, #29
 8003f36:	d506      	bpl.n	8003f46 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f38:	6801      	ldr	r1, [r0, #0]
 8003f3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003f3c:	684a      	ldr	r2, [r1, #4]
 8003f3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f42:	4322      	orrs	r2, r4
 8003f44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f46:	071a      	lsls	r2, r3, #28
 8003f48:	d506      	bpl.n	8003f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4a:	6801      	ldr	r1, [r0, #0]
 8003f4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f4e:	684a      	ldr	r2, [r1, #4]
 8003f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f54:	4322      	orrs	r2, r4
 8003f56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f58:	06dc      	lsls	r4, r3, #27
 8003f5a:	d506      	bpl.n	8003f6a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f5c:	6801      	ldr	r1, [r0, #0]
 8003f5e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003f60:	688a      	ldr	r2, [r1, #8]
 8003f62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f66:	4322      	orrs	r2, r4
 8003f68:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6a:	0699      	lsls	r1, r3, #26
 8003f6c:	d506      	bpl.n	8003f7c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f6e:	6801      	ldr	r1, [r0, #0]
 8003f70:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003f72:	688a      	ldr	r2, [r1, #8]
 8003f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f78:	4322      	orrs	r2, r4
 8003f7a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f7c:	065a      	lsls	r2, r3, #25
 8003f7e:	d510      	bpl.n	8003fa2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f80:	6801      	ldr	r1, [r0, #0]
 8003f82:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8003f84:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f86:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f8e:	ea42 0204 	orr.w	r2, r2, r4
 8003f92:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f94:	d105      	bne.n	8003fa2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f96:	684a      	ldr	r2, [r1, #4]
 8003f98:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003f9a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003f9e:	4322      	orrs	r2, r4
 8003fa0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	d506      	bpl.n	8003fb4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003faa:	6853      	ldr	r3, [r2, #4]
 8003fac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6053      	str	r3, [r2, #4]
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fba:	9d06      	ldr	r5, [sp, #24]
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	460f      	mov	r7, r1
 8003fc0:	4616      	mov	r6, r2
 8003fc2:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	69ca      	ldr	r2, [r1, #28]
 8003fc8:	ea37 0302 	bics.w	r3, r7, r2
 8003fcc:	bf0c      	ite	eq
 8003fce:	2201      	moveq	r2, #1
 8003fd0:	2200      	movne	r2, #0
 8003fd2:	42b2      	cmp	r2, r6
 8003fd4:	d002      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003fd6:	2000      	movs	r0, #0
}
 8003fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003fdc:	1c6b      	adds	r3, r5, #1
 8003fde:	d0f2      	beq.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003fe0:	b99d      	cbnz	r5, 800400a <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003fe4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8004000:	2300      	movs	r3, #0
 8004002:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8004006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800400a:	f7fc fb39 	bl	8000680 <HAL_GetTick>
 800400e:	eba0 0008 	sub.w	r0, r0, r8
 8004012:	4285      	cmp	r5, r0
 8004014:	d2d6      	bcs.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xe>
 8004016:	e7e4      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x2c>

08004018 <UART_CheckIdleState>:
{
 8004018:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	2600      	movs	r6, #0
{
 800401c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004020:	f7fc fb2e 	bl	8000680 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004024:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004026:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	071a      	lsls	r2, r3, #28
 800402c:	d417      	bmi.n	800405e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	075b      	lsls	r3, r3, #29
 8004034:	d50a      	bpl.n	800404c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403a:	2200      	movs	r2, #0
 800403c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004040:	4620      	mov	r0, r4
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	462b      	mov	r3, r5
 8004046:	f7ff ffb6 	bl	8003fb6 <UART_WaitOnFlagUntilTimeout>
 800404a:	b9a0      	cbnz	r0, 8004076 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 800404c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800404e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004050:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8004054:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 800405c:	e00c      	b.n	8004078 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004062:	4632      	mov	r2, r6
 8004064:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	4603      	mov	r3, r0
 800406c:	4620      	mov	r0, r4
 800406e:	f7ff ffa2 	bl	8003fb6 <UART_WaitOnFlagUntilTimeout>
 8004072:	2800      	cmp	r0, #0
 8004074:	d0db      	beq.n	800402e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004076:	2003      	movs	r0, #3
}
 8004078:	b002      	add	sp, #8
 800407a:	bd70      	pop	{r4, r5, r6, pc}

0800407c <HAL_UART_Init>:
{
 800407c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800407e:	4604      	mov	r4, r0
 8004080:	b360      	cbz	r0, 80040dc <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004082:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8004086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800408a:	b91b      	cbnz	r3, 8004094 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800408c:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004090:	f004 f936 	bl	8008300 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004094:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004096:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004098:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800409a:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a6:	f7ff fc87 	bl	80039b8 <UART_SetConfig>
 80040aa:	2801      	cmp	r0, #1
 80040ac:	d016      	beq.n	80040dc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040b0:	b113      	cbz	r3, 80040b8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7ff ff2a 	bl	8003f0c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b8:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80040ba:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
}
 80040d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80040d6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80040d8:	f7ff bf9e 	b.w	8004018 <UART_CheckIdleState>
}
 80040dc:	2001      	movs	r0, #1
 80040de:	bd10      	pop	{r4, pc}

080040e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80040e2:	f000 ff15 	bl	8004f10 <vTaskStartScheduler>
  
  return osOK;
}
 80040e6:	2000      	movs	r0, #0
 80040e8:	bd08      	pop	{r3, pc}

080040ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040ea:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ec:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80040f0:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f2:	8a02      	ldrh	r2, [r0, #16]
{
 80040f4:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 80040f6:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f8:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 80040fc:	bf14      	ite	ne
 80040fe:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004100:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004102:	a803      	add	r0, sp, #12
 8004104:	9400      	str	r4, [sp, #0]
 8004106:	9001      	str	r0, [sp, #4]
 8004108:	4628      	mov	r0, r5
 800410a:	f000 fe31 	bl	8004d70 <xTaskCreate>
 800410e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004110:	bf0c      	ite	eq
 8004112:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8004114:	2000      	movne	r0, #0
}
 8004116:	b005      	add	sp, #20
 8004118:	bd30      	pop	{r4, r5, pc}

0800411a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800411a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800411c:	f001 f9c8 	bl	80054b0 <xTaskGetSchedulerState>
 8004120:	2801      	cmp	r0, #1
 8004122:	d003      	beq.n	800412c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004128:	f000 b90c 	b.w	8004344 <xPortSysTickHandler>
 800412c:	bd08      	pop	{r3, pc}

0800412e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004132:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004136:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004138:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800413c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800413e:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004140:	6003      	str	r3, [r0, #0]
 8004142:	4770      	bx	lr

08004144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	6103      	str	r3, [r0, #16]
 8004148:	4770      	bx	lr

0800414a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800414a:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800414c:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800414e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004150:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004156:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004158:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800415a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800415c:	3301      	adds	r3, #1
 800415e:	6003      	str	r3, [r0, #0]
 8004160:	4770      	bx	lr

08004162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004162:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004164:	1c53      	adds	r3, r2, #1
{
 8004166:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004168:	d10a      	bne.n	8004180 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800416a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004170:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004172:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004174:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004176:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004178:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800417a:	3301      	adds	r3, #1
 800417c:	6003      	str	r3, [r0, #0]
 800417e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004180:	f100 0308 	add.w	r3, r0, #8
 8004184:	685c      	ldr	r4, [r3, #4]
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	42aa      	cmp	r2, r5
 800418a:	d3ef      	bcc.n	800416c <vListInsert+0xa>
 800418c:	4623      	mov	r3, r4
 800418e:	e7f9      	b.n	8004184 <vListInsert+0x22>

08004190 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004190:	6841      	ldr	r1, [r0, #4]
 8004192:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004194:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004196:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004198:	6882      	ldr	r2, [r0, #8]
 800419a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041a0:	bf08      	it	eq
 80041a2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80041a4:	2200      	movs	r2, #0
 80041a6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	3801      	subs	r0, #1
 80041ac:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80041ae:	4770      	bx	lr

080041b0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <prvTaskExitError+0x34>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	d00a      	beq.n	80041ce <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	b672      	cpsid	i
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	b662      	cpsie	i
 80041cc:	e7fe      	b.n	80041cc <prvTaskExitError+0x1c>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	b672      	cpsid	i
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	b662      	cpsie	i
 80041e2:	e7fe      	b.n	80041e2 <prvTaskExitError+0x32>
 80041e4:	20000008 	.word	0x20000008

080041e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80041e8:	4806      	ldr	r0, [pc, #24]	; (8004204 <prvPortStartFirstTask+0x1c>)
 80041ea:	6800      	ldr	r0, [r0, #0]
 80041ec:	6800      	ldr	r0, [r0, #0]
 80041ee:	f380 8808 	msr	MSP, r0
 80041f2:	b662      	cpsie	i
 80041f4:	b661      	cpsie	f
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	df00      	svc	0
 8004200:	bf00      	nop
 8004202:	0000      	.short	0x0000
 8004204:	e000ed08 	.word	0xe000ed08

08004208 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004208:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004218 <vPortEnableVFP+0x10>
 800420c:	6801      	ldr	r1, [r0, #0]
 800420e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004212:	6001      	str	r1, [r0, #0]
 8004214:	4770      	bx	lr
 8004216:	0000      	.short	0x0000
 8004218:	e000ed88 	.word	0xe000ed88

0800421c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800421c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004220:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004224:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004228:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800422a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800422e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004230:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004232:	f06f 0302 	mvn.w	r3, #2
 8004236:	6203      	str	r3, [r0, #32]
}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	080041b1 	.word	0x080041b1

08004240 <SVC_Handler>:
	__asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	20003cb0 	.word	0x20003cb0

08004264 <vPortEnterCritical>:
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	b672      	cpsid	i
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	b662      	cpsie	i
	uxCriticalNesting++;
 8004278:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <vPortEnterCritical+0x44>)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800427e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004282:	d10f      	bne.n	80042a4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <vPortEnterCritical+0x48>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f013 0fff 	tst.w	r3, #255	; 0xff
 800428c:	d00a      	beq.n	80042a4 <vPortEnterCritical+0x40>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	b672      	cpsid	i
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	b662      	cpsie	i
 80042a2:	e7fe      	b.n	80042a2 <vPortEnterCritical+0x3e>
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000008 	.word	0x20000008
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <vPortExitCritical+0x28>)
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	b953      	cbnz	r3, 80042cc <vPortExitCritical+0x1c>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	b672      	cpsid	i
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	b662      	cpsie	i
 80042ca:	e7fe      	b.n	80042ca <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80042cc:	3b01      	subs	r3, #1
 80042ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042d0:	b90b      	cbnz	r3, 80042d6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	4770      	bx	lr
 80042d8:	20000008 	.word	0x20000008
 80042dc:	00000000 	.word	0x00000000

080042e0 <PendSV_Handler>:
	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f01e 0f10 	tst.w	lr, #16
 80042f0:	bf08      	it	eq
 80042f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004304:	b672      	cpsid	i
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	b662      	cpsie	i
 8004314:	f000 ffbc 	bl	8005290 <vTaskSwitchContext>
 8004318:	f04f 0000 	mov.w	r0, #0
 800431c:	f380 8811 	msr	BASEPRI, r0
 8004320:	bc08      	pop	{r3}
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	f01e 0f10 	tst.w	lr, #16
 800432e:	bf08      	it	eq
 8004330:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004334:	f380 8809 	msr	PSP, r0
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <pxCurrentTCBConst>:
 8004340:	20003cb0 	.word	0x20003cb0

08004344 <xPortSysTickHandler>:
{
 8004344:	b508      	push	{r3, lr}
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	b672      	cpsid	i
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800435a:	f000 fe2b 	bl	8004fb4 <xTaskIncrementTick>
 800435e:	b118      	cbz	r0, 8004368 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <xPortSysTickHandler+0x2c>)
 8004366:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004368:	2300      	movs	r3, #0
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	bd08      	pop	{r3, pc}
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <vPortSetupTimerInterrupt+0x1c>)
 8004376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <vPortSetupTimerInterrupt+0x20>)
 8004382:	3b01      	subs	r3, #1
 8004384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004386:	2207      	movs	r2, #7
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <vPortSetupTimerInterrupt+0x24>)
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000068 	.word	0x20000068
 8004394:	e000e014 	.word	0xe000e014
 8004398:	e000e010 	.word	0xe000e010

0800439c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800439c:	4b23      	ldr	r3, [pc, #140]	; (800442c <xPortStartScheduler+0x90>)
{
 800439e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043a0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043a8:	22ff      	movs	r2, #255	; 0xff
 80043aa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043ac:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043ae:	4a20      	ldr	r2, [pc, #128]	; (8004430 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043be:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c0:	2207      	movs	r2, #7
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <xPortStartScheduler+0x98>)
 80043c4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80043ca:	1e54      	subs	r4, r2, #1
 80043cc:	0600      	lsls	r0, r0, #24
 80043ce:	d423      	bmi.n	8004418 <xPortStartScheduler+0x7c>
 80043d0:	b101      	cbz	r1, 80043d4 <xPortStartScheduler+0x38>
 80043d2:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80043dc:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043de:	9b01      	ldr	r3, [sp, #4]
 80043e0:	4a12      	ldr	r2, [pc, #72]	; (800442c <xPortStartScheduler+0x90>)
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <xPortStartScheduler+0x9c>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80043ee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80043f6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80043f8:	f7ff ffbc 	bl	8004374 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80043fc:	2200      	movs	r2, #0
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <xPortStartScheduler+0xa0>)
 8004400:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004402:	f7ff ff01 	bl	8004208 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <xPortStartScheduler+0xa4>)
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800440e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004410:	f7ff feea 	bl	80041e8 <prvPortStartFirstTask>
	prvTaskExitError();
 8004414:	f7ff fecc 	bl	80041b0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004418:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800441c:	2101      	movs	r1, #1
 800441e:	0052      	lsls	r2, r2, #1
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	f88d 2003 	strb.w	r2, [sp, #3]
 8004426:	4622      	mov	r2, r4
 8004428:	e7cd      	b.n	80043c6 <xPortStartScheduler+0x2a>
 800442a:	bf00      	nop
 800442c:	e000e400 	.word	0xe000e400
 8004430:	20000090 	.word	0x20000090
 8004434:	20000094 	.word	0x20000094
 8004438:	e000ed20 	.word	0xe000ed20
 800443c:	20000008 	.word	0x20000008
 8004440:	e000ef34 	.word	0xe000ef34

08004444 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004444:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004448:	2b0f      	cmp	r3, #15
 800444a:	d910      	bls.n	800446e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <vPortValidateInterruptPriority+0x54>)
 800444e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004450:	4a12      	ldr	r2, [pc, #72]	; (800449c <vPortValidateInterruptPriority+0x58>)
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d90a      	bls.n	800446e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	b672      	cpsid	i
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	b662      	cpsie	i
 800446c:	e7fe      	b.n	800446c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <vPortValidateInterruptPriority+0x5c>)
 8004470:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <vPortValidateInterruptPriority+0x60>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800447a:	4293      	cmp	r3, r2
 800447c:	d90a      	bls.n	8004494 <vPortValidateInterruptPriority+0x50>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	b672      	cpsid	i
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	b662      	cpsie	i
 8004492:	e7fe      	b.n	8004492 <vPortValidateInterruptPriority+0x4e>
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e3f0 	.word	0xe000e3f0
 800449c:	20000090 	.word	0x20000090
 80044a0:	e000ed0c 	.word	0xe000ed0c
 80044a4:	20000094 	.word	0x20000094

080044a8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <prvInsertBlockIntoFreeList+0x40>)
{
 80044aa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4282      	cmp	r2, r0
 80044b0:	d318      	bcc.n	80044e4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044b2:	685c      	ldr	r4, [r3, #4]
 80044b4:	1919      	adds	r1, r3, r4
 80044b6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044b8:	bf01      	itttt	eq
 80044ba:	6841      	ldreq	r1, [r0, #4]
 80044bc:	4618      	moveq	r0, r3
 80044be:	1909      	addeq	r1, r1, r4
 80044c0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044c2:	6844      	ldr	r4, [r0, #4]
 80044c4:	1901      	adds	r1, r0, r4
 80044c6:	428a      	cmp	r2, r1
 80044c8:	d107      	bne.n	80044da <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ca:	4908      	ldr	r1, [pc, #32]	; (80044ec <prvInsertBlockIntoFreeList+0x44>)
 80044cc:	6809      	ldr	r1, [r1, #0]
 80044ce:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044d0:	bf1f      	itttt	ne
 80044d2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044d4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044d6:	1909      	addne	r1, r1, r4
 80044d8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044da:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044dc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044de:	bf18      	it	ne
 80044e0:	6018      	strne	r0, [r3, #0]
 80044e2:	bd10      	pop	{r4, pc}
 80044e4:	4613      	mov	r3, r2
 80044e6:	e7e1      	b.n	80044ac <prvInsertBlockIntoFreeList+0x4>
 80044e8:	20003ca8 	.word	0x20003ca8
 80044ec:	20000098 	.word	0x20000098

080044f0 <pvPortMalloc>:
{
 80044f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80044f6:	f000 fd4f 	bl	8004f98 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80044fa:	4940      	ldr	r1, [pc, #256]	; (80045fc <pvPortMalloc+0x10c>)
 80044fc:	4d40      	ldr	r5, [pc, #256]	; (8004600 <pvPortMalloc+0x110>)
 80044fe:	680b      	ldr	r3, [r1, #0]
 8004500:	bb0b      	cbnz	r3, 8004546 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004502:	4a40      	ldr	r2, [pc, #256]	; (8004604 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004504:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004506:	4e40      	ldr	r6, [pc, #256]	; (8004608 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004508:	bf1b      	ittet	ne
 800450a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800450c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004510:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004514:	f020 0007 	bicne.w	r0, r0, #7
 8004518:	bf1c      	itt	ne
 800451a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800451c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800451e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004520:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004522:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004524:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8004526:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004528:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800452c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800452e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004530:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8004532:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004534:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004538:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800453a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800453c:	4b34      	ldr	r3, [pc, #208]	; (8004610 <pvPortMalloc+0x120>)
 800453e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004544:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004546:	682f      	ldr	r7, [r5, #0]
 8004548:	4227      	tst	r7, r4
 800454a:	d116      	bne.n	800457a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800454c:	2c00      	cmp	r4, #0
 800454e:	d042      	beq.n	80045d6 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8004550:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004554:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004556:	bf1c      	itt	ne
 8004558:	f023 0307 	bicne.w	r3, r3, #7
 800455c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800455e:	b163      	cbz	r3, 800457a <pvPortMalloc+0x8a>
 8004560:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <pvPortMalloc+0x120>)
 8004562:	6816      	ldr	r6, [r2, #0]
 8004564:	4690      	mov	r8, r2
 8004566:	42b3      	cmp	r3, r6
 8004568:	d807      	bhi.n	800457a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800456a:	4a27      	ldr	r2, [pc, #156]	; (8004608 <pvPortMalloc+0x118>)
 800456c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456e:	6868      	ldr	r0, [r5, #4]
 8004570:	4283      	cmp	r3, r0
 8004572:	d804      	bhi.n	800457e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004574:	6809      	ldr	r1, [r1, #0]
 8004576:	428d      	cmp	r5, r1
 8004578:	d107      	bne.n	800458a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800457a:	2400      	movs	r4, #0
 800457c:	e02b      	b.n	80045d6 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457e:	682c      	ldr	r4, [r5, #0]
 8004580:	2c00      	cmp	r4, #0
 8004582:	d0f7      	beq.n	8004574 <pvPortMalloc+0x84>
 8004584:	462a      	mov	r2, r5
 8004586:	4625      	mov	r5, r4
 8004588:	e7f1      	b.n	800456e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800458a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800458c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800458e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004590:	1ac2      	subs	r2, r0, r3
 8004592:	2a10      	cmp	r2, #16
 8004594:	d911      	bls.n	80045ba <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004596:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004598:	0741      	lsls	r1, r0, #29
 800459a:	d00a      	beq.n	80045b2 <pvPortMalloc+0xc2>
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	b672      	cpsid	i
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	b662      	cpsie	i
 80045b0:	e7fe      	b.n	80045b0 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045b2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045b4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045b6:	f7ff ff77 	bl	80044a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045ba:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045bc:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045be:	4913      	ldr	r1, [pc, #76]	; (800460c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045c2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80045c6:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c8:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045cc:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ce:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045d0:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045d2:	bf38      	it	cc
 80045d4:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80045d6:	f000 fd81 	bl	80050dc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045da:	0763      	lsls	r3, r4, #29
 80045dc:	d00a      	beq.n	80045f4 <pvPortMalloc+0x104>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	b672      	cpsid	i
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	b662      	cpsie	i
 80045f2:	e7fe      	b.n	80045f2 <pvPortMalloc+0x102>
}
 80045f4:	4620      	mov	r0, r4
 80045f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045fa:	bf00      	nop
 80045fc:	20000098 	.word	0x20000098
 8004600:	20003c9c 	.word	0x20003c9c
 8004604:	2000009c 	.word	0x2000009c
 8004608:	20003ca8 	.word	0x20003ca8
 800460c:	20003ca4 	.word	0x20003ca4
 8004610:	20003ca0 	.word	0x20003ca0

08004614 <vPortFree>:
{
 8004614:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004616:	4604      	mov	r4, r0
 8004618:	2800      	cmp	r0, #0
 800461a:	d032      	beq.n	8004682 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <vPortFree+0x70>)
 800461e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	4213      	tst	r3, r2
 8004626:	d10a      	bne.n	800463e <vPortFree+0x2a>
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	b672      	cpsid	i
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	b662      	cpsie	i
 800463c:	e7fe      	b.n	800463c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800463e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004642:	b151      	cbz	r1, 800465a <vPortFree+0x46>
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	b672      	cpsid	i
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	b662      	cpsie	i
 8004658:	e7fe      	b.n	8004658 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800465a:	ea23 0302 	bic.w	r3, r3, r2
 800465e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004662:	f000 fc99 	bl	8004f98 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <vPortFree+0x74>)
 8004668:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800466c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004670:	6811      	ldr	r1, [r2, #0]
 8004672:	440b      	add	r3, r1
 8004674:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004676:	f7ff ff17 	bl	80044a8 <prvInsertBlockIntoFreeList>
}
 800467a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800467e:	f000 bd2d 	b.w	80050dc <xTaskResumeAll>
 8004682:	bd10      	pop	{r4, pc}
 8004684:	20003c9c 	.word	0x20003c9c
 8004688:	20003ca0 	.word	0x20003ca0

0800468c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004690:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004692:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004694:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004696:	b942      	cbnz	r2, 80046aa <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004698:	6805      	ldr	r5, [r0, #0]
 800469a:	b99d      	cbnz	r5, 80046c4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800469c:	6840      	ldr	r0, [r0, #4]
 800469e:	f000 ff5d 	bl	800555c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80046a2:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80046a4:	3601      	adds	r6, #1
 80046a6:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80046aa:	b96d      	cbnz	r5, 80046c8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80046ac:	6880      	ldr	r0, [r0, #8]
 80046ae:	f003 feff 	bl	80084b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80046b2:	68a3      	ldr	r3, [r4, #8]
 80046b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046b6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b8:	6862      	ldr	r2, [r4, #4]
 80046ba:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80046bc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046be:	d301      	bcc.n	80046c4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80046c4:	2000      	movs	r0, #0
 80046c6:	e7ed      	b.n	80046a4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c8:	68c0      	ldr	r0, [r0, #12]
 80046ca:	f003 fef1 	bl	80084b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d0:	68e2      	ldr	r2, [r4, #12]
 80046d2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046d6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046da:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046dc:	bf3e      	ittt	cc
 80046de:	6862      	ldrcc	r2, [r4, #4]
 80046e0:	189b      	addcc	r3, r3, r2
 80046e2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80046e4:	2d02      	cmp	r5, #2
 80046e6:	d1ed      	bne.n	80046c4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046e8:	b10e      	cbz	r6, 80046ee <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80046ea:	3e01      	subs	r6, #1
 80046ec:	e7ea      	b.n	80046c4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80046ee:	4630      	mov	r0, r6
 80046f0:	e7d8      	b.n	80046a4 <prvCopyDataToQueue+0x18>

080046f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046f2:	4603      	mov	r3, r0
 80046f4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80046f8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046fa:	b162      	cbz	r2, 8004716 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046fc:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046fe:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004700:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004702:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004704:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8004706:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800470a:	bf24      	itt	cs
 800470c:	6819      	ldrcs	r1, [r3, #0]
 800470e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004710:	68d9      	ldr	r1, [r3, #12]
 8004712:	f003 becd 	b.w	80084b0 <memcpy>
}
 8004716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800471a:	4770      	bx	lr

0800471c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004720:	f7ff fda0 	bl	8004264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004724:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004728:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800472c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800472e:	2d00      	cmp	r5, #0
 8004730:	dc14      	bgt.n	800475c <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004732:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004734:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8004738:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800473c:	f7ff fdb8 	bl	80042b0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004740:	f7ff fd90 	bl	8004264 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004744:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004748:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800474a:	2d00      	cmp	r5, #0
 800474c:	dc12      	bgt.n	8004774 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800474e:	23ff      	movs	r3, #255	; 0xff
 8004750:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004758:	f7ff bdaa 	b.w	80042b0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0e7      	beq.n	8004732 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004762:	4630      	mov	r0, r6
 8004764:	f000 fe0c 	bl	8005380 <xTaskRemoveFromEventList>
 8004768:	b108      	cbz	r0, 800476e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800476a:	f000 fe9b 	bl	80054a4 <vTaskMissedYield>
 800476e:	3d01      	subs	r5, #1
 8004770:	b26d      	sxtb	r5, r5
 8004772:	e7dc      	b.n	800472e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0e9      	beq.n	800474e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800477a:	4630      	mov	r0, r6
 800477c:	f000 fe00 	bl	8005380 <xTaskRemoveFromEventList>
 8004780:	b108      	cbz	r0, 8004786 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004782:	f000 fe8f 	bl	80054a4 <vTaskMissedYield>
 8004786:	3d01      	subs	r5, #1
 8004788:	b26d      	sxtb	r5, r5
 800478a:	e7de      	b.n	800474a <prvUnlockQueue+0x2e>

0800478c <xQueueGenericReset>:
{
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004790:	4604      	mov	r4, r0
 8004792:	b950      	cbnz	r0, 80047aa <xQueueGenericReset+0x1e>
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	b672      	cpsid	i
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	b662      	cpsie	i
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80047aa:	f7ff fd5b 	bl	8004264 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b6:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047b8:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047ba:	1a1b      	subs	r3, r3, r0
 80047bc:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047be:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047c0:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047c2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047c4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047c6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80047c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80047d0:	b995      	cbnz	r5, 80047f8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	b163      	cbz	r3, 80047f0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d6:	f104 0010 	add.w	r0, r4, #16
 80047da:	f000 fdd1 	bl	8005380 <xTaskRemoveFromEventList>
 80047de:	b138      	cbz	r0, 80047f0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80047e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <xQueueGenericReset+0x80>)
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80047f0:	f7ff fd5e 	bl	80042b0 <vPortExitCritical>
}
 80047f4:	2001      	movs	r0, #1
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047f8:	f104 0010 	add.w	r0, r4, #16
 80047fc:	f7ff fc97 	bl	800412e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004800:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004804:	f7ff fc93 	bl	800412e <vListInitialise>
 8004808:	e7f2      	b.n	80047f0 <xQueueGenericReset+0x64>
 800480a:	bf00      	nop
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <xQueueGenericCreate>:
	{
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004814:	4606      	mov	r6, r0
 8004816:	b950      	cbnz	r0, 800482e <xQueueGenericCreate+0x1e>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	b672      	cpsid	i
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	b662      	cpsie	i
 800482c:	e7fe      	b.n	800482c <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004830:	3048      	adds	r0, #72	; 0x48
 8004832:	f7ff fe5d 	bl	80044f0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004836:	4604      	mov	r4, r0
 8004838:	b138      	cbz	r0, 800484a <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800483a:	b945      	cbnz	r5, 800484e <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800483c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800483e:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004840:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8004842:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004844:	4620      	mov	r0, r4
 8004846:	f7ff ffa1 	bl	800478c <xQueueGenericReset>
	}
 800484a:	4620      	mov	r0, r4
 800484c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800484e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004852:	6003      	str	r3, [r0, #0]
 8004854:	e7f3      	b.n	800483e <xQueueGenericCreate+0x2e>
	...

08004858 <xQueueGenericSend>:
{
 8004858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	4689      	mov	r9, r1
 800485e:	9201      	str	r2, [sp, #4]
 8004860:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004862:	4604      	mov	r4, r0
 8004864:	b950      	cbnz	r0, 800487c <xQueueGenericSend+0x24>
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	b672      	cpsid	i
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	b662      	cpsie	i
 800487a:	e7fe      	b.n	800487a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800487c:	2900      	cmp	r1, #0
 800487e:	f040 808c 	bne.w	800499a <xQueueGenericSend+0x142>
 8004882:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8088 	beq.w	800499a <xQueueGenericSend+0x142>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	b672      	cpsid	i
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	b662      	cpsie	i
 800489e:	e7fe      	b.n	800489e <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a0:	9e01      	ldr	r6, [sp, #4]
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	f000 8084 	beq.w	80049b0 <xQueueGenericSend+0x158>
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	b672      	cpsid	i
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	b662      	cpsie	i
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80048be:	9d01      	ldr	r5, [sp, #4]
 80048c0:	b91d      	cbnz	r5, 80048ca <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 80048c2:	f7ff fcf5 	bl	80042b0 <vPortExitCritical>
			return errQUEUE_FULL;
 80048c6:	2000      	movs	r0, #0
 80048c8:	e058      	b.n	800497c <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 80048ca:	b916      	cbnz	r6, 80048d2 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 80048cc:	a802      	add	r0, sp, #8
 80048ce:	f000 fd9b 	bl	8005408 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80048d2:	f7ff fced 	bl	80042b0 <vPortExitCritical>
		vTaskSuspendAll();
 80048d6:	f000 fb5f 	bl	8004f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048da:	f7ff fcc3 	bl	8004264 <vPortEnterCritical>
 80048de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048e2:	2bff      	cmp	r3, #255	; 0xff
 80048e4:	d101      	bne.n	80048ea <xQueueGenericSend+0x92>
 80048e6:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80048ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048ee:	2bff      	cmp	r3, #255	; 0xff
 80048f0:	d101      	bne.n	80048f6 <xQueueGenericSend+0x9e>
 80048f2:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80048f6:	f7ff fcdb 	bl	80042b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048fa:	a901      	add	r1, sp, #4
 80048fc:	a802      	add	r0, sp, #8
 80048fe:	f000 fd93 	bl	8005428 <xTaskCheckForTimeOut>
 8004902:	2800      	cmp	r0, #0
 8004904:	d143      	bne.n	800498e <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004906:	f7ff fcad 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800490a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800490c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800490e:	f7ff fccf 	bl	80042b0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004912:	42ae      	cmp	r6, r5
 8004914:	d135      	bne.n	8004982 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004916:	9901      	ldr	r1, [sp, #4]
 8004918:	f104 0010 	add.w	r0, r4, #16
 800491c:	f000 fcf4 	bl	8005308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004920:	4620      	mov	r0, r4
 8004922:	f7ff fefb 	bl	800471c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004926:	f000 fbd9 	bl	80050dc <xTaskResumeAll>
 800492a:	b938      	cbnz	r0, 800493c <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800492c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004930:	f8ca 3000 	str.w	r3, [sl]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800493e:	f7ff fc91 	bl	8004264 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004946:	429a      	cmp	r2, r3
 8004948:	d301      	bcc.n	800494e <xQueueGenericSend+0xf6>
 800494a:	2f02      	cmp	r7, #2
 800494c:	d1b7      	bne.n	80048be <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800494e:	463a      	mov	r2, r7
 8004950:	4649      	mov	r1, r9
 8004952:	4620      	mov	r0, r4
 8004954:	f7ff fe9a 	bl	800468c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800495a:	b11b      	cbz	r3, 8004964 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800495c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004960:	f000 fd0e 	bl	8005380 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004964:	b138      	cbz	r0, 8004976 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <xQueueGenericSend+0x178>)
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004976:	f7ff fc9b 	bl	80042b0 <vPortExitCritical>
				return pdPASS;
 800497a:	2001      	movs	r0, #1
}
 800497c:	b004      	add	sp, #16
 800497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff feca 	bl	800471c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004988:	f000 fba8 	bl	80050dc <xTaskResumeAll>
 800498c:	e7d6      	b.n	800493c <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff fec4 	bl	800471c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004994:	f000 fba2 	bl	80050dc <xTaskResumeAll>
 8004998:	e795      	b.n	80048c6 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800499a:	2f02      	cmp	r7, #2
 800499c:	d102      	bne.n	80049a4 <xQueueGenericSend+0x14c>
 800499e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10a      	bne.n	80049ba <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049a4:	f000 fd84 	bl	80054b0 <xTaskGetSchedulerState>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	f43f af79 	beq.w	80048a0 <xQueueGenericSend+0x48>
 80049ae:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80049b0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80049b4:	f8df a018 	ldr.w	sl, [pc, #24]	; 80049d0 <xQueueGenericSend+0x178>
 80049b8:	e7c1      	b.n	800493e <xQueueGenericSend+0xe6>
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	b672      	cpsid	i
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	b662      	cpsie	i
 80049ce:	e7fe      	b.n	80049ce <xQueueGenericSend+0x176>
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <xQueueGenericSendFromISR>:
{
 80049d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d8:	4688      	mov	r8, r1
 80049da:	4691      	mov	r9, r2
 80049dc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80049de:	4604      	mov	r4, r0
 80049e0:	b950      	cbnz	r0, 80049f8 <xQueueGenericSendFromISR+0x24>
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	b672      	cpsid	i
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	b662      	cpsie	i
 80049f6:	e7fe      	b.n	80049f6 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f8:	bb19      	cbnz	r1, 8004a42 <xQueueGenericSendFromISR+0x6e>
 80049fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049fc:	b30b      	cbz	r3, 8004a42 <xQueueGenericSendFromISR+0x6e>
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	b672      	cpsid	i
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	b662      	cpsie	i
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a18:	f000 fcb2 	bl	8005380 <xTaskRemoveFromEventList>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d036      	beq.n	8004a8e <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004a20:	f1b9 0f00 	cmp.w	r9, #0
 8004a24:	d033      	beq.n	8004a8e <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a26:	2001      	movs	r0, #1
 8004a28:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004a2c:	f386 8811 	msr	BASEPRI, r6
}
 8004a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a34:	3501      	adds	r5, #1
 8004a36:	b26d      	sxtb	r5, r5
 8004a38:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004a3c:	e027      	b.n	8004a8e <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e7f4      	b.n	8004a2c <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a42:	2f02      	cmp	r7, #2
 8004a44:	d102      	bne.n	8004a4c <xQueueGenericSendFromISR+0x78>
 8004a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d122      	bne.n	8004a92 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a4c:	f7ff fcfa 	bl	8004444 <vPortValidateInterruptPriority>
	__asm volatile
 8004a50:	f3ef 8611 	mrs	r6, BASEPRI
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	b672      	cpsid	i
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d301      	bcc.n	8004a74 <xQueueGenericSendFromISR+0xa0>
 8004a70:	2f02      	cmp	r7, #2
 8004a72:	d1e4      	bne.n	8004a3e <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a74:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a78:	463a      	mov	r2, r7
 8004a7a:	4641      	mov	r1, r8
 8004a7c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a7e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a80:	f7ff fe04 	bl	800468c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004a84:	1c6b      	adds	r3, r5, #1
 8004a86:	d1d5      	bne.n	8004a34 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1c2      	bne.n	8004a14 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e7cc      	b.n	8004a2c <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	b672      	cpsid	i
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	b662      	cpsie	i
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueGenericSendFromISR+0xd2>

08004aa8 <xQueueGenericReceive>:
{
 8004aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	4688      	mov	r8, r1
 8004aae:	9201      	str	r2, [sp, #4]
 8004ab0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	b950      	cbnz	r0, 8004acc <xQueueGenericReceive+0x24>
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	b672      	cpsid	i
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	b662      	cpsie	i
 8004aca:	e7fe      	b.n	8004aca <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004acc:	2900      	cmp	r1, #0
 8004ace:	f040 80a9 	bne.w	8004c24 <xQueueGenericReceive+0x17c>
 8004ad2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80a5 	beq.w	8004c24 <xQueueGenericReceive+0x17c>
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	b672      	cpsid	i
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	b662      	cpsie	i
 8004aee:	e7fe      	b.n	8004aee <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004af0:	9e01      	ldr	r6, [sp, #4]
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	f000 809c 	beq.w	8004c30 <xQueueGenericReceive+0x188>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	e7fe      	b.n	8004b0c <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004b10:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d06d      	beq.n	8004bf2 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b1a:	e05f      	b.n	8004bdc <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b1c:	9d01      	ldr	r5, [sp, #4]
 8004b1e:	b91d      	cbnz	r5, 8004b28 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8004b20:	f7ff fbc6 	bl	80042b0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004b24:	4628      	mov	r0, r5
 8004b26:	e067      	b.n	8004bf8 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8004b28:	b916      	cbnz	r6, 8004b30 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8004b2a:	a802      	add	r0, sp, #8
 8004b2c:	f000 fc6c 	bl	8005408 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b30:	f7ff fbbe 	bl	80042b0 <vPortExitCritical>
		vTaskSuspendAll();
 8004b34:	f000 fa30 	bl	8004f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b38:	f7ff fb94 	bl	8004264 <vPortEnterCritical>
 8004b3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b40:	2bff      	cmp	r3, #255	; 0xff
 8004b42:	d101      	bne.n	8004b48 <xQueueGenericReceive+0xa0>
 8004b44:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004b48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004b4c:	2bff      	cmp	r3, #255	; 0xff
 8004b4e:	d101      	bne.n	8004b54 <xQueueGenericReceive+0xac>
 8004b50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b54:	f7ff fbac 	bl	80042b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b58:	a901      	add	r1, sp, #4
 8004b5a:	a802      	add	r0, sp, #8
 8004b5c:	f000 fc64 	bl	8005428 <xTaskCheckForTimeOut>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d152      	bne.n	8004c0a <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8004b64:	f7ff fb7e 	bl	8004264 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b68:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004b6a:	f7ff fba1 	bl	80042b0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	d145      	bne.n	8004bfe <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	b933      	cbnz	r3, 8004b84 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8004b76:	f7ff fb75 	bl	8004264 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b7a:	6860      	ldr	r0, [r4, #4]
 8004b7c:	f000 fca8 	bl	80054d0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004b80:	f7ff fb96 	bl	80042b0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b84:	9901      	ldr	r1, [sp, #4]
 8004b86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b8a:	f000 fbbd 	bl	8005308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f7ff fdc4 	bl	800471c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b94:	f000 faa2 	bl	80050dc <xTaskResumeAll>
 8004b98:	b938      	cbnz	r0, 8004baa <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8004b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b9e:	f8ca 3000 	str.w	r3, [sl]
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004bac:	f7ff fb5a 	bl	8004264 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	d0b2      	beq.n	8004b1c <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004bba:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bbc:	f7ff fd99 	bl	80046f2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004bc0:	f1b9 0f00 	cmp.w	r9, #0
 8004bc4:	d1a3      	bne.n	8004b0e <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004bc6:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bc8:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004bca:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bcc:	b913      	cbnz	r3, 8004bd4 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004bce:	f000 fd19 	bl	8005604 <pvTaskIncrementMutexHeldCount>
 8004bd2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	b163      	cbz	r3, 8004bf2 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bdc:	f000 fbd0 	bl	8005380 <xTaskRemoveFromEventList>
 8004be0:	b138      	cbz	r0, 8004bf2 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <xQueueGenericReceive+0x190>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004bf2:	f7ff fb5d 	bl	80042b0 <vPortExitCritical>
				return pdPASS;
 8004bf6:	2001      	movs	r0, #1
}
 8004bf8:	b004      	add	sp, #16
 8004bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7ff fd8c 	bl	800471c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c04:	f000 fa6a 	bl	80050dc <xTaskResumeAll>
 8004c08:	e7cf      	b.n	8004baa <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7ff fd86 	bl	800471c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c10:	f000 fa64 	bl	80050dc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004c14:	f7ff fb26 	bl	8004264 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004c1a:	f7ff fb49 	bl	80042b0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	d1c3      	bne.n	8004baa <xQueueGenericReceive+0x102>
 8004c22:	e77f      	b.n	8004b24 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c24:	f000 fc44 	bl	80054b0 <xTaskGetSchedulerState>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f43f af61 	beq.w	8004af0 <xQueueGenericReceive+0x48>
 8004c2e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004c30:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004c32:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004c38 <xQueueGenericReceive+0x190>
 8004c36:	e7b9      	b.n	8004bac <xQueueGenericReceive+0x104>
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c3c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c3e:	4a07      	ldr	r2, [pc, #28]	; (8004c5c <vQueueAddToRegistry+0x20>)
	{
 8004c40:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c42:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8004c46:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8004c4a:	b91d      	cbnz	r5, 8004c54 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c50:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c52:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c54:	3301      	adds	r3, #1
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d1f3      	bne.n	8004c42 <vQueueAddToRegistry+0x6>
 8004c5a:	bd30      	pop	{r4, r5, pc}
 8004c5c:	200040cc 	.word	0x200040cc

08004c60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4604      	mov	r4, r0
 8004c64:	460d      	mov	r5, r1
 8004c66:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c68:	f7ff fafc 	bl	8004264 <vPortEnterCritical>
 8004c6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c70:	2bff      	cmp	r3, #255	; 0xff
 8004c72:	d102      	bne.n	8004c7a <vQueueWaitForMessageRestricted+0x1a>
 8004c74:	2300      	movs	r3, #0
 8004c76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c7e:	2bff      	cmp	r3, #255	; 0xff
 8004c80:	d102      	bne.n	8004c88 <vQueueWaitForMessageRestricted+0x28>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c88:	f7ff fb12 	bl	80042b0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c8e:	b92b      	cbnz	r3, 8004c9c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c90:	4632      	mov	r2, r6
 8004c92:	4629      	mov	r1, r5
 8004c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c98:	f000 fb52 	bl	8005340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c9c:	4620      	mov	r0, r4
	}
 8004c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8004ca2:	f7ff bd3b 	b.w	800471c <prvUnlockQueue>
	...

08004ca8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca8:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <prvResetNextTaskUnblockTime+0x1c>)
 8004caa:	6813      	ldr	r3, [r2, #0]
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <prvResetNextTaskUnblockTime+0x20>)
 8004cb0:	b919      	cbnz	r1, 8004cba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cbe:	68d2      	ldr	r2, [r2, #12]
 8004cc0:	6852      	ldr	r2, [r2, #4]
 8004cc2:	e7f8      	b.n	8004cb6 <prvResetNextTaskUnblockTime+0xe>
 8004cc4:	20003cb4 	.word	0x20003cb4
 8004cc8:	20003d8c 	.word	0x20003d8c

08004ccc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8004cd0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd2:	4e1b      	ldr	r6, [pc, #108]	; (8004d40 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004cd4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8004cd6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd8:	6830      	ldr	r0, [r6, #0]
 8004cda:	3004      	adds	r0, #4
 8004cdc:	f7ff fa58 	bl	8004190 <uxListRemove>
 8004ce0:	4633      	mov	r3, r6
 8004ce2:	b940      	cbnz	r0, 8004cf6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ce4:	6831      	ldr	r1, [r6, #0]
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	4e16      	ldr	r6, [pc, #88]	; (8004d44 <prvAddCurrentTaskToDelayedList+0x78>)
 8004cea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004cec:	6832      	ldr	r2, [r6, #0]
 8004cee:	4088      	lsls	r0, r1
 8004cf0:	ea22 0200 	bic.w	r2, r2, r0
 8004cf4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cf6:	1c62      	adds	r2, r4, #1
 8004cf8:	d107      	bne.n	8004d0a <prvAddCurrentTaskToDelayedList+0x3e>
 8004cfa:	b137      	cbz	r7, 8004d0a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	4812      	ldr	r0, [pc, #72]	; (8004d48 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004d00:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d06:	f7ff ba20 	b.w	800414a <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d0a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d0c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004d0e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d10:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004d12:	d907      	bls.n	8004d24 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d14:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <prvAddCurrentTaskToDelayedList+0x80>)
 8004d16:	6810      	ldr	r0, [r2, #0]
 8004d18:	6819      	ldr	r1, [r3, #0]
}
 8004d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d1e:	3104      	adds	r1, #4
 8004d20:	f7ff ba1f 	b.w	8004162 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d24:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <prvAddCurrentTaskToDelayedList+0x84>)
 8004d26:	6810      	ldr	r0, [r2, #0]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	3104      	adds	r1, #4
 8004d2c:	f7ff fa19 	bl	8004162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <prvAddCurrentTaskToDelayedList+0x88>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4294      	cmp	r4, r2
 8004d36:	d200      	bcs.n	8004d3a <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8004d38:	601c      	str	r4, [r3, #0]
 8004d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d3c:	20003dd4 	.word	0x20003dd4
 8004d40:	20003cb0 	.word	0x20003cb0
 8004d44:	20003d5c 	.word	0x20003d5c
 8004d48:	20003dac 	.word	0x20003dac
 8004d4c:	20003cb8 	.word	0x20003cb8
 8004d50:	20003cb4 	.word	0x20003cb4
 8004d54:	20003d8c 	.word	0x20003d8c

08004d58 <prvTaskIsTaskSuspended.part.0>:
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	b672      	cpsid	i
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	b662      	cpsie	i
 8004d6c:	e7fe      	b.n	8004d6c <prvTaskIsTaskSuspended.part.0+0x14>
	...

08004d70 <xTaskCreate>:
	{
 8004d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d74:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004d78:	4680      	mov	r8, r0
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7e:	4650      	mov	r0, sl
	{
 8004d80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d82:	f7ff fbb5 	bl	80044f0 <pvPortMalloc>
			if( pxStack != NULL )
 8004d86:	4605      	mov	r5, r0
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f000 8096 	beq.w	8004eba <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d8e:	2054      	movs	r0, #84	; 0x54
 8004d90:	f7ff fbae 	bl	80044f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004d94:	4604      	mov	r4, r0
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f000 808c 	beq.w	8004eb4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d9c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004da0:	6305      	str	r5, [r0, #48]	; 0x30
 8004da2:	1e7b      	subs	r3, r7, #1
 8004da4:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004da8:	4455      	add	r5, sl
 8004daa:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004dac:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004db0:	7859      	ldrb	r1, [r3, #1]
 8004db2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004db6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004dba:	b109      	cbz	r1, 8004dc0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dbc:	42bb      	cmp	r3, r7
 8004dbe:	d1f7      	bne.n	8004db0 <xTaskCreate+0x40>
 8004dc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dc2:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dc6:	1d27      	adds	r7, r4, #4
 8004dc8:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dca:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dce:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8004dd0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004dd4:	bf28      	it	cs
 8004dd6:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004dd8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004dda:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004de0:	f7ff f9b0 	bl	8004144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004de4:	f104 0018 	add.w	r0, r4, #24
 8004de8:	f7ff f9ac 	bl	8004144 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004dec:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004df0:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004df2:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df4:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004df6:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004df8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dfa:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dfc:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e00:	f7ff fa0c 	bl	800421c <pxPortInitialiseStack>
 8004e04:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004e06:	b106      	cbz	r6, 8004e0a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e08:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004e0a:	f7ff fa2b 	bl	8004264 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004e0e:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004e10:	4e32      	ldr	r6, [pc, #200]	; (8004edc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004f08 <xTaskCreate+0x198>
 8004e18:	3201      	adds	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004e1c:	6835      	ldr	r5, [r6, #0]
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d14e      	bne.n	8004ec0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8004e22:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d11d      	bne.n	8004e66 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e2a:	eb08 0005 	add.w	r0, r8, r5
 8004e2e:	3514      	adds	r5, #20
 8004e30:	f7ff f97d 	bl	800412e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e34:	2d8c      	cmp	r5, #140	; 0x8c
 8004e36:	d1f8      	bne.n	8004e2a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004e38:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004f0c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004e3c:	4d28      	ldr	r5, [pc, #160]	; (8004ee0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004e3e:	4648      	mov	r0, r9
 8004e40:	f7ff f975 	bl	800412e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e44:	4628      	mov	r0, r5
 8004e46:	f7ff f972 	bl	800412e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e4a:	4826      	ldr	r0, [pc, #152]	; (8004ee4 <xTaskCreate+0x174>)
 8004e4c:	f7ff f96f 	bl	800412e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <xTaskCreate+0x178>)
 8004e52:	f7ff f96c 	bl	800412e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004e56:	4825      	ldr	r0, [pc, #148]	; (8004eec <xTaskCreate+0x17c>)
 8004e58:	f7ff f969 	bl	800412e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e5c:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <xTaskCreate+0x180>)
 8004e5e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <xTaskCreate+0x184>)
 8004e64:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004e66:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004e68:	2501      	movs	r5, #1
 8004e6a:	4924      	ldr	r1, [pc, #144]	; (8004efc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004e6c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004e6e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004e70:	3301      	adds	r3, #1
 8004e72:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004e74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e76:	fa05 f302 	lsl.w	r3, r5, r2
 8004e7a:	4303      	orrs	r3, r0
 8004e7c:	2014      	movs	r0, #20
 8004e7e:	600b      	str	r3, [r1, #0]
 8004e80:	4639      	mov	r1, r7
 8004e82:	fb00 8002 	mla	r0, r0, r2, r8
 8004e86:	f7ff f960 	bl	800414a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004e8a:	f7ff fa11 	bl	80042b0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <xTaskCreate+0x190>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	b163      	cbz	r3, 8004eae <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e94:	6833      	ldr	r3, [r6, #0]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d207      	bcs.n	8004eae <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <xTaskCreate+0x194>)
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	f3bf 8f6f 	isb	sy
	}
 8004eae:	4628      	mov	r0, r5
 8004eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f7ff fbad 	bl	8004614 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eba:	f04f 35ff 	mov.w	r5, #4294967295
 8004ebe:	e7f6      	b.n	8004eae <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004ec0:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <xTaskCreate+0x190>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ce      	bne.n	8004e66 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d8c9      	bhi.n	8004e66 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8004ed2:	6034      	str	r4, [r6, #0]
 8004ed4:	e7c7      	b.n	8004e66 <xTaskCreate+0xf6>
 8004ed6:	bf00      	nop
 8004ed8:	20003d48 	.word	0x20003d48
 8004edc:	20003cb0 	.word	0x20003cb0
 8004ee0:	20003d74 	.word	0x20003d74
 8004ee4:	20003d94 	.word	0x20003d94
 8004ee8:	20003dc0 	.word	0x20003dc0
 8004eec:	20003dac 	.word	0x20003dac
 8004ef0:	20003cb4 	.word	0x20003cb4
 8004ef4:	20003cb8 	.word	0x20003cb8
 8004ef8:	20003d58 	.word	0x20003d58
 8004efc:	20003d5c 	.word	0x20003d5c
 8004f00:	20003da8 	.word	0x20003da8
 8004f04:	e000ed04 	.word	0xe000ed04
 8004f08:	20003cbc 	.word	0x20003cbc
 8004f0c:	20003d60 	.word	0x20003d60

08004f10 <vTaskStartScheduler>:
{
 8004f10:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <vTaskStartScheduler+0x70>)
 8004f14:	2400      	movs	r4, #0
 8004f16:	2280      	movs	r2, #128	; 0x80
 8004f18:	491a      	ldr	r1, [pc, #104]	; (8004f84 <vTaskStartScheduler+0x74>)
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	9400      	str	r4, [sp, #0]
 8004f20:	4819      	ldr	r0, [pc, #100]	; (8004f88 <vTaskStartScheduler+0x78>)
 8004f22:	f7ff ff25 	bl	8004d70 <xTaskCreate>
		if( xReturn == pdPASS )
 8004f26:	2801      	cmp	r0, #1
 8004f28:	d11a      	bne.n	8004f60 <vTaskStartScheduler+0x50>
			xReturn = xTimerCreateTimerTask();
 8004f2a:	f000 fbc1 	bl	80056b0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004f2e:	2801      	cmp	r0, #1
 8004f30:	d116      	bne.n	8004f60 <vTaskStartScheduler+0x50>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f46:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <vTaskStartScheduler+0x7c>)
 8004f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <vTaskStartScheduler+0x80>)
 8004f50:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <vTaskStartScheduler+0x84>)
 8004f54:	601c      	str	r4, [r3, #0]
}
 8004f56:	b002      	add	sp, #8
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004f5c:	f7ff ba1e 	b.w	800439c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f60:	3001      	adds	r0, #1
 8004f62:	d10a      	bne.n	8004f7a <vTaskStartScheduler+0x6a>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	e7fe      	b.n	8004f78 <vTaskStartScheduler+0x68>
}
 8004f7a:	b002      	add	sp, #8
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	bf00      	nop
 8004f80:	20003d88 	.word	0x20003d88
 8004f84:	080085a8 	.word	0x080085a8
 8004f88:	0800521d 	.word	0x0800521d
 8004f8c:	20003d8c 	.word	0x20003d8c
 8004f90:	20003da8 	.word	0x20003da8
 8004f94:	20003dd4 	.word	0x20003dd4

08004f98 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004f98:	4a02      	ldr	r2, [pc, #8]	; (8004fa4 <vTaskSuspendAll+0xc>)
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20003d54 	.word	0x20003d54

08004fa8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004fa8:	4b01      	ldr	r3, [pc, #4]	; (8004fb0 <xTaskGetTickCount+0x8>)
 8004faa:	6818      	ldr	r0, [r3, #0]
}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20003dd4 	.word	0x20003dd4

08004fb4 <xTaskIncrementTick>:
{
 8004fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb8:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <xTaskIncrementTick+0xfc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d155      	bne.n	800506c <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004fc0:	4b3c      	ldr	r3, [pc, #240]	; (80050b4 <xTaskIncrementTick+0x100>)
 8004fc2:	681c      	ldr	r4, [r3, #0]
 8004fc4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004fc6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004fc8:	b9cc      	cbnz	r4, 8004ffe <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004fca:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <xTaskIncrementTick+0x104>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	b152      	cbz	r2, 8004fe8 <xTaskIncrementTick+0x34>
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	b672      	cpsid	i
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	b662      	cpsie	i
 8004fe6:	e7fe      	b.n	8004fe6 <xTaskIncrementTick+0x32>
 8004fe8:	4a34      	ldr	r2, [pc, #208]	; (80050bc <xTaskIncrementTick+0x108>)
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	6810      	ldr	r0, [r2, #0]
 8004fee:	6018      	str	r0, [r3, #0]
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	4a33      	ldr	r2, [pc, #204]	; (80050c0 <xTaskIncrementTick+0x10c>)
 8004ff4:	6813      	ldr	r3, [r2, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	f7ff fe55 	bl	8004ca8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ffe:	4d31      	ldr	r5, [pc, #196]	; (80050c4 <xTaskIncrementTick+0x110>)
 8005000:	f04f 0b00 	mov.w	fp, #0
 8005004:	4f30      	ldr	r7, [pc, #192]	; (80050c8 <xTaskIncrementTick+0x114>)
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	429c      	cmp	r4, r3
 800500a:	d33e      	bcc.n	800508a <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800500c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80050b8 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8005010:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80050d8 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005014:	f8d8 2000 	ldr.w	r2, [r8]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	bb72      	cbnz	r2, 800507a <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	602a      	str	r2, [r5, #0]
					break;
 8005022:	e032      	b.n	800508a <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005024:	f106 0a04 	add.w	sl, r6, #4
 8005028:	4650      	mov	r0, sl
 800502a:	f7ff f8b1 	bl	8004190 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800502e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005030:	b119      	cbz	r1, 800503a <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005032:	f106 0018 	add.w	r0, r6, #24
 8005036:	f7ff f8ab 	bl	8004190 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800503a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	f8d9 3000 	ldr.w	r3, [r9]
 8005042:	f04f 0e14 	mov.w	lr, #20
 8005046:	fa02 f100 	lsl.w	r1, r2, r0
 800504a:	4319      	orrs	r1, r3
 800504c:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <xTaskIncrementTick+0x118>)
 800504e:	f8c9 1000 	str.w	r1, [r9]
 8005052:	4651      	mov	r1, sl
 8005054:	fb0e 3000 	mla	r0, lr, r0, r3
 8005058:	f7ff f877 	bl	800414a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800505c:	6838      	ldr	r0, [r7, #0]
 800505e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005060:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005062:	4291      	cmp	r1, r2
 8005064:	bf28      	it	cs
 8005066:	f04f 0b01 	movcs.w	fp, #1
 800506a:	e7d3      	b.n	8005014 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800506e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e011      	b.n	800509e <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800507a:	f8d8 2000 	ldr.w	r2, [r8]
 800507e:	68d2      	ldr	r2, [r2, #12]
 8005080:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005082:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005084:	428c      	cmp	r4, r1
 8005086:	d2cd      	bcs.n	8005024 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8005088:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <xTaskIncrementTick+0x118>)
 800508e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005090:	2214      	movs	r2, #20
 8005092:	434a      	muls	r2, r1
 8005094:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8005096:	2a02      	cmp	r2, #2
 8005098:	bf28      	it	cs
 800509a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800509e:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <xTaskIncrementTick+0x120>)
 80050a0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	bf18      	it	ne
 80050a6:	f04f 0b01 	movne.w	fp, #1
}
 80050aa:	4658      	mov	r0, fp
 80050ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	20003d54 	.word	0x20003d54
 80050b4:	20003dd4 	.word	0x20003dd4
 80050b8:	20003cb4 	.word	0x20003cb4
 80050bc:	20003cb8 	.word	0x20003cb8
 80050c0:	20003d90 	.word	0x20003d90
 80050c4:	20003d8c 	.word	0x20003d8c
 80050c8:	20003cb0 	.word	0x20003cb0
 80050cc:	20003cbc 	.word	0x20003cbc
 80050d0:	20003d50 	.word	0x20003d50
 80050d4:	20003dd8 	.word	0x20003dd8
 80050d8:	20003d5c 	.word	0x20003d5c

080050dc <xTaskResumeAll>:
{
 80050dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80050e0:	4c32      	ldr	r4, [pc, #200]	; (80051ac <xTaskResumeAll+0xd0>)
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	b953      	cbnz	r3, 80050fc <xTaskResumeAll+0x20>
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	b672      	cpsid	i
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	b662      	cpsie	i
 80050fa:	e7fe      	b.n	80050fa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80050fc:	f7ff f8b2 	bl	8004264 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	3b01      	subs	r3, #1
 8005104:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005106:	6824      	ldr	r4, [r4, #0]
 8005108:	b12c      	cbz	r4, 8005116 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800510a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800510c:	f7ff f8d0 	bl	80042b0 <vPortExitCritical>
}
 8005110:	4620      	mov	r0, r4
 8005112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <xTaskResumeAll+0xd4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f5      	beq.n	800510a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800511e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80051c8 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8005122:	4f24      	ldr	r7, [pc, #144]	; (80051b4 <xTaskResumeAll+0xd8>)
 8005124:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80051cc <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005128:	f8d9 3000 	ldr.w	r3, [r9]
 800512c:	b9e3      	cbnz	r3, 8005168 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800512e:	b10c      	cbz	r4, 8005134 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8005130:	f7ff fdba 	bl	8004ca8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005134:	4d20      	ldr	r5, [pc, #128]	; (80051b8 <xTaskResumeAll+0xdc>)
 8005136:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005138:	b144      	cbz	r4, 800514c <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800513a:	4e20      	ldr	r6, [pc, #128]	; (80051bc <xTaskResumeAll+0xe0>)
 800513c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800513e:	f7ff ff39 	bl	8004fb4 <xTaskIncrementTick>
 8005142:	b100      	cbz	r0, 8005146 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8005144:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005146:	3c01      	subs	r4, #1
 8005148:	d1f9      	bne.n	800513e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800514a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <xTaskResumeAll+0xe0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0da      	beq.n	800510a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8005154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <xTaskResumeAll+0xe4>)
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005164:	2401      	movs	r4, #1
 8005166:	e7d1      	b.n	800510c <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005168:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800516c:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800516e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005170:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005172:	f104 0018 	add.w	r0, r4, #24
 8005176:	f7ff f80b 	bl	8004190 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800517a:	4630      	mov	r0, r6
 800517c:	f7ff f808 	bl	8004190 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	2014      	movs	r0, #20
 8005186:	fa05 f302 	lsl.w	r3, r5, r2
 800518a:	fb00 8002 	mla	r0, r0, r2, r8
 800518e:	430b      	orrs	r3, r1
 8005190:	4631      	mov	r1, r6
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	f7fe ffd9 	bl	800414a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <xTaskResumeAll+0xe8>)
 800519a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3c1      	bcc.n	8005128 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <xTaskResumeAll+0xe0>)
 80051a6:	601d      	str	r5, [r3, #0]
 80051a8:	e7be      	b.n	8005128 <xTaskResumeAll+0x4c>
 80051aa:	bf00      	nop
 80051ac:	20003d54 	.word	0x20003d54
 80051b0:	20003d48 	.word	0x20003d48
 80051b4:	20003d5c 	.word	0x20003d5c
 80051b8:	20003d50 	.word	0x20003d50
 80051bc:	20003dd8 	.word	0x20003dd8
 80051c0:	e000ed04 	.word	0xe000ed04
 80051c4:	20003cb0 	.word	0x20003cb0
 80051c8:	20003d94 	.word	0x20003d94
 80051cc:	20003cbc 	.word	0x20003cbc

080051d0 <vTaskDelay>:
	{
 80051d0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051d2:	b940      	cbnz	r0, 80051e6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80051d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <vTaskDelay+0x44>)
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <vTaskDelay+0x48>)
 80051e8:	6819      	ldr	r1, [r3, #0]
 80051ea:	b151      	cbz	r1, 8005202 <vTaskDelay+0x32>
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	b672      	cpsid	i
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	b662      	cpsie	i
 8005200:	e7fe      	b.n	8005200 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8005202:	f7ff fec9 	bl	8004f98 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005206:	f7ff fd61 	bl	8004ccc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800520a:	f7ff ff67 	bl	80050dc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800520e:	2800      	cmp	r0, #0
 8005210:	d0e0      	beq.n	80051d4 <vTaskDelay+0x4>
 8005212:	bd08      	pop	{r3, pc}
 8005214:	e000ed04 	.word	0xe000ed04
 8005218:	20003d54 	.word	0x20003d54

0800521c <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800521c:	4e17      	ldr	r6, [pc, #92]	; (800527c <prvIdleTask+0x60>)
{
 800521e:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005220:	4c17      	ldr	r4, [pc, #92]	; (8005280 <prvIdleTask+0x64>)
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	b963      	cbnz	r3, 8005240 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005226:	4b17      	ldr	r3, [pc, #92]	; (8005284 <prvIdleTask+0x68>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d9f8      	bls.n	8005220 <prvIdleTask+0x4>
				taskYIELD();
 800522e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <prvIdleTask+0x6c>)
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	e7ef      	b.n	8005220 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8005240:	f7ff feaa 	bl	8004f98 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005244:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8005246:	f7ff ff49 	bl	80050dc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800524a:	2d00      	cmp	r5, #0
 800524c:	d0e9      	beq.n	8005222 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800524e:	f7ff f809 	bl	8004264 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005252:	68f3      	ldr	r3, [r6, #12]
 8005254:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005256:	1d28      	adds	r0, r5, #4
 8005258:	f7fe ff9a 	bl	8004190 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <prvIdleTask+0x70>)
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	3b01      	subs	r3, #1
 8005262:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800526a:	f7ff f821 	bl	80042b0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800526e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005270:	f7ff f9d0 	bl	8004614 <vPortFree>
			vPortFree( pxTCB );
 8005274:	4628      	mov	r0, r5
 8005276:	f7ff f9cd 	bl	8004614 <vPortFree>
 800527a:	e7d2      	b.n	8005222 <prvIdleTask+0x6>
 800527c:	20003dc0 	.word	0x20003dc0
 8005280:	20003d4c 	.word	0x20003d4c
 8005284:	20003cbc 	.word	0x20003cbc
 8005288:	e000ed04 	.word	0xe000ed04
 800528c:	20003d48 	.word	0x20003d48

08005290 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <vTaskSwitchContext+0x64>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <vTaskSwitchContext+0x68>)
{
 8005296:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005298:	b112      	cbz	r2, 80052a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800529a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80052a0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052a2:	4b16      	ldr	r3, [pc, #88]	; (80052fc <vTaskSwitchContext+0x6c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2214      	movs	r2, #20
 80052ae:	4914      	ldr	r1, [pc, #80]	; (8005300 <vTaskSwitchContext+0x70>)
 80052b0:	f1c3 031f 	rsb	r3, r3, #31
 80052b4:	435a      	muls	r2, r3
 80052b6:	588c      	ldr	r4, [r1, r2]
 80052b8:	1888      	adds	r0, r1, r2
 80052ba:	b954      	cbnz	r4, 80052d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	b672      	cpsid	i
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	b662      	cpsie	i
 80052d0:	e7fe      	b.n	80052d0 <vTaskSwitchContext+0x40>
 80052d2:	6844      	ldr	r4, [r0, #4]
 80052d4:	3208      	adds	r2, #8
 80052d6:	6864      	ldr	r4, [r4, #4]
 80052d8:	440a      	add	r2, r1
 80052da:	4294      	cmp	r4, r2
 80052dc:	6044      	str	r4, [r0, #4]
 80052de:	bf04      	itt	eq
 80052e0:	6862      	ldreq	r2, [r4, #4]
 80052e2:	6042      	streq	r2, [r0, #4]
 80052e4:	2214      	movs	r2, #20
 80052e6:	fb02 1303 	mla	r3, r2, r3, r1
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <vTaskSwitchContext+0x74>)
 80052f0:	e7d4      	b.n	800529c <vTaskSwitchContext+0xc>
 80052f2:	bf00      	nop
 80052f4:	20003d54 	.word	0x20003d54
 80052f8:	20003dd8 	.word	0x20003dd8
 80052fc:	20003d5c 	.word	0x20003d5c
 8005300:	20003cbc 	.word	0x20003cbc
 8005304:	20003cb0 	.word	0x20003cb0

08005308 <vTaskPlaceOnEventList>:
{
 8005308:	b510      	push	{r4, lr}
 800530a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800530c:	b950      	cbnz	r0, 8005324 <vTaskPlaceOnEventList+0x1c>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	b672      	cpsid	i
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	b662      	cpsie	i
 8005322:	e7fe      	b.n	8005322 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <vTaskPlaceOnEventList+0x34>)
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	3118      	adds	r1, #24
 800532a:	f7fe ff1a 	bl	8004162 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800532e:	4620      	mov	r0, r4
 8005330:	2101      	movs	r1, #1
}
 8005332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005336:	f7ff bcc9 	b.w	8004ccc <prvAddCurrentTaskToDelayedList>
 800533a:	bf00      	nop
 800533c:	20003cb0 	.word	0x20003cb0

08005340 <vTaskPlaceOnEventListRestricted>:
	{
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	460d      	mov	r5, r1
 8005344:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8005346:	b950      	cbnz	r0, 800535e <vTaskPlaceOnEventListRestricted+0x1e>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	b672      	cpsid	i
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	b662      	cpsie	i
 800535c:	e7fe      	b.n	800535c <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <vTaskPlaceOnEventListRestricted+0x3c>)
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	3118      	adds	r1, #24
 8005364:	f7fe fef1 	bl	800414a <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005368:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800536a:	4621      	mov	r1, r4
 800536c:	bf0c      	ite	eq
 800536e:	4628      	moveq	r0, r5
 8005370:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8005374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005378:	f7ff bca8 	b.w	8004ccc <prvAddCurrentTaskToDelayedList>
 800537c:	20003cb0 	.word	0x20003cb0

08005380 <xTaskRemoveFromEventList>:
{
 8005380:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005382:	68c3      	ldr	r3, [r0, #12]
 8005384:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005386:	b954      	cbnz	r4, 800539e <xTaskRemoveFromEventList+0x1e>
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	b672      	cpsid	i
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	b662      	cpsie	i
 800539c:	e7fe      	b.n	800539c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800539e:	f104 0518 	add.w	r5, r4, #24
 80053a2:	4628      	mov	r0, r5
 80053a4:	f7fe fef4 	bl	8004190 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <xTaskRemoveFromEventList+0x70>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b9db      	cbnz	r3, 80053e6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ae:	1d25      	adds	r5, r4, #4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7fe feed 	bl	8004190 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053b6:	490f      	ldr	r1, [pc, #60]	; (80053f4 <xTaskRemoveFromEventList+0x74>)
 80053b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053ba:	2301      	movs	r3, #1
 80053bc:	6808      	ldr	r0, [r1, #0]
 80053be:	4093      	lsls	r3, r2
 80053c0:	4303      	orrs	r3, r0
 80053c2:	2014      	movs	r0, #20
 80053c4:	600b      	str	r3, [r1, #0]
 80053c6:	4629      	mov	r1, r5
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <xTaskRemoveFromEventList+0x78>)
 80053ca:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053ce:	f7fe febc 	bl	800414a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <xTaskRemoveFromEventList+0x7c>)
 80053d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	429a      	cmp	r2, r3
 80053dc:	d906      	bls.n	80053ec <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80053de:	2001      	movs	r0, #1
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <xTaskRemoveFromEventList+0x80>)
 80053e2:	6018      	str	r0, [r3, #0]
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e6:	4629      	mov	r1, r5
 80053e8:	4806      	ldr	r0, [pc, #24]	; (8005404 <xTaskRemoveFromEventList+0x84>)
 80053ea:	e7f0      	b.n	80053ce <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80053ec:	2000      	movs	r0, #0
}
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	20003d54 	.word	0x20003d54
 80053f4:	20003d5c 	.word	0x20003d5c
 80053f8:	20003cbc 	.word	0x20003cbc
 80053fc:	20003cb0 	.word	0x20003cb0
 8005400:	20003dd8 	.word	0x20003dd8
 8005404:	20003d94 	.word	0x20003d94

08005408 <vTaskSetTimeOutState>:
{
 8005408:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800540a:	b908      	cbnz	r0, 8005410 <vTaskSetTimeOutState+0x8>
 800540c:	f7ff fca4 	bl	8004d58 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <vTaskSetTimeOutState+0x18>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005416:	4b03      	ldr	r3, [pc, #12]	; (8005424 <vTaskSetTimeOutState+0x1c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6043      	str	r3, [r0, #4]
 800541c:	bd08      	pop	{r3, pc}
 800541e:	bf00      	nop
 8005420:	20003d90 	.word	0x20003d90
 8005424:	20003dd4 	.word	0x20003dd4

08005428 <xTaskCheckForTimeOut>:
{
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800542c:	4604      	mov	r4, r0
 800542e:	b950      	cbnz	r0, 8005446 <xTaskCheckForTimeOut+0x1e>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	b672      	cpsid	i
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	b662      	cpsie	i
 8005444:	e7fe      	b.n	8005444 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005446:	b951      	cbnz	r1, 800545e <xTaskCheckForTimeOut+0x36>
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	b672      	cpsid	i
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	b662      	cpsie	i
 800545c:	e7fe      	b.n	800545c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800545e:	f7fe ff01 	bl	8004264 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005462:	4b0e      	ldr	r3, [pc, #56]	; (800549c <xTaskCheckForTimeOut+0x74>)
 8005464:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005466:	682b      	ldr	r3, [r5, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	d010      	beq.n	800548e <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800546c:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <xTaskCheckForTimeOut+0x78>)
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	4290      	cmp	r0, r2
 8005474:	6862      	ldr	r2, [r4, #4]
 8005476:	d001      	beq.n	800547c <xTaskCheckForTimeOut+0x54>
 8005478:	4291      	cmp	r1, r2
 800547a:	d20d      	bcs.n	8005498 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800547c:	1a88      	subs	r0, r1, r2
 800547e:	4283      	cmp	r3, r0
 8005480:	d90a      	bls.n	8005498 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005482:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8005484:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005486:	4413      	add	r3, r2
 8005488:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800548a:	f7ff ffbd 	bl	8005408 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800548e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005490:	f7fe ff0e 	bl	80042b0 <vPortExitCritical>
}
 8005494:	4620      	mov	r0, r4
 8005496:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8005498:	2401      	movs	r4, #1
 800549a:	e7f9      	b.n	8005490 <xTaskCheckForTimeOut+0x68>
 800549c:	20003dd4 	.word	0x20003dd4
 80054a0:	20003d90 	.word	0x20003d90

080054a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80054a4:	2201      	movs	r2, #1
 80054a6:	4b01      	ldr	r3, [pc, #4]	; (80054ac <vTaskMissedYield+0x8>)
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	4770      	bx	lr
 80054ac:	20003dd8 	.word	0x20003dd8

080054b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <xTaskGetSchedulerState+0x18>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	b133      	cbz	r3, 80054c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <xTaskGetSchedulerState+0x1c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80054bc:	bf0c      	ite	eq
 80054be:	2002      	moveq	r0, #2
 80054c0:	2000      	movne	r0, #0
 80054c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054c4:	2001      	movs	r0, #1
	}
 80054c6:	4770      	bx	lr
 80054c8:	20003da8 	.word	0x20003da8
 80054cc:	20003d54 	.word	0x20003d54

080054d0 <vTaskPriorityInherit>:
	{
 80054d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80054d4:	4604      	mov	r4, r0
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d038      	beq.n	800554c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054da:	4d1d      	ldr	r5, [pc, #116]	; (8005550 <vTaskPriorityInherit+0x80>)
 80054dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80054de:	682a      	ldr	r2, [r5, #0]
 80054e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d232      	bcs.n	800554c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054e6:	6982      	ldr	r2, [r0, #24]
 80054e8:	2a00      	cmp	r2, #0
 80054ea:	db04      	blt.n	80054f6 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ec:	682a      	ldr	r2, [r5, #0]
 80054ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054f0:	f1c2 0207 	rsb	r2, r2, #7
 80054f4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80054f6:	4e17      	ldr	r6, [pc, #92]	; (8005554 <vTaskPriorityInherit+0x84>)
 80054f8:	2714      	movs	r7, #20
 80054fa:	6962      	ldr	r2, [r4, #20]
 80054fc:	fb07 6303 	mla	r3, r7, r3, r6
 8005500:	429a      	cmp	r2, r3
 8005502:	d120      	bne.n	8005546 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005504:	f104 0804 	add.w	r8, r4, #4
 8005508:	4640      	mov	r0, r8
 800550a:	f7fe fe41 	bl	8004190 <uxListRemove>
 800550e:	4a12      	ldr	r2, [pc, #72]	; (8005558 <vTaskPriorityInherit+0x88>)
 8005510:	b948      	cbnz	r0, 8005526 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005512:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005514:	4347      	muls	r7, r0
 8005516:	59f3      	ldr	r3, [r6, r7]
 8005518:	b92b      	cbnz	r3, 8005526 <vTaskPriorityInherit+0x56>
 800551a:	2101      	movs	r1, #1
 800551c:	6813      	ldr	r3, [r2, #0]
 800551e:	4081      	lsls	r1, r0
 8005520:	ea23 0301 	bic.w	r3, r3, r1
 8005524:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005526:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005528:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800552a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800552c:	2301      	movs	r3, #1
 800552e:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005530:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005532:	430b      	orrs	r3, r1
 8005534:	4641      	mov	r1, r8
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	2314      	movs	r3, #20
 800553a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8005542:	f7fe be02 	b.w	800414a <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	20003cb0 	.word	0x20003cb0
 8005554:	20003cbc 	.word	0x20003cbc
 8005558:	20003d5c 	.word	0x20003d5c

0800555c <xTaskPriorityDisinherit>:
	{
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800555e:	4604      	mov	r4, r0
 8005560:	b908      	cbnz	r0, 8005566 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005562:	2000      	movs	r0, #0
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005566:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <xTaskPriorityDisinherit+0x9c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4298      	cmp	r0, r3
 800556c:	d00a      	beq.n	8005584 <xTaskPriorityDisinherit+0x28>
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	b672      	cpsid	i
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	b662      	cpsie	i
 8005582:	e7fe      	b.n	8005582 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8005584:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005586:	b953      	cbnz	r3, 800559e <xTaskPriorityDisinherit+0x42>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	b672      	cpsid	i
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	b662      	cpsie	i
 800559c:	e7fe      	b.n	800559c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800559e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80055a0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80055a4:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055a6:	4291      	cmp	r1, r2
 80055a8:	d0db      	beq.n	8005562 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d9      	bne.n	8005562 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ae:	1d05      	adds	r5, r0, #4
 80055b0:	4e12      	ldr	r6, [pc, #72]	; (80055fc <xTaskPriorityDisinherit+0xa0>)
 80055b2:	4628      	mov	r0, r5
 80055b4:	f7fe fdec 	bl	8004190 <uxListRemove>
 80055b8:	4a11      	ldr	r2, [pc, #68]	; (8005600 <xTaskPriorityDisinherit+0xa4>)
 80055ba:	b950      	cbnz	r0, 80055d2 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055be:	2114      	movs	r1, #20
 80055c0:	4379      	muls	r1, r7
 80055c2:	5873      	ldr	r3, [r6, r1]
 80055c4:	b92b      	cbnz	r3, 80055d2 <xTaskPriorityDisinherit+0x76>
 80055c6:	2001      	movs	r0, #1
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	40b8      	lsls	r0, r7
 80055cc:	ea23 0300 	bic.w	r3, r3, r0
 80055d0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d4:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055da:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80055dc:	2401      	movs	r4, #1
 80055de:	6811      	ldr	r1, [r2, #0]
 80055e0:	fa04 f003 	lsl.w	r0, r4, r3
 80055e4:	4308      	orrs	r0, r1
 80055e6:	4629      	mov	r1, r5
 80055e8:	6010      	str	r0, [r2, #0]
 80055ea:	2014      	movs	r0, #20
 80055ec:	fb00 6003 	mla	r0, r0, r3, r6
 80055f0:	f7fe fdab 	bl	800414a <vListInsertEnd>
					xReturn = pdTRUE;
 80055f4:	4620      	mov	r0, r4
	}
 80055f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f8:	20003cb0 	.word	0x20003cb0
 80055fc:	20003cbc 	.word	0x20003cbc
 8005600:	20003d5c 	.word	0x20003d5c

08005604 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <pvTaskIncrementMutexHeldCount+0x14>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	b11a      	cbz	r2, 8005612 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800560e:	3201      	adds	r2, #1
 8005610:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005612:	6818      	ldr	r0, [r3, #0]
	}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20003cb0 	.word	0x20003cb0

0800561c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800561e:	4c0f      	ldr	r4, [pc, #60]	; (800565c <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8005620:	f7fe fe20 	bl	8004264 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	b9ad      	cbnz	r5, 8005654 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8005628:	4f0d      	ldr	r7, [pc, #52]	; (8005660 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 800562a:	4e0e      	ldr	r6, [pc, #56]	; (8005664 <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 800562c:	4638      	mov	r0, r7
 800562e:	f7fe fd7e 	bl	800412e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005632:	4630      	mov	r0, r6
 8005634:	f7fe fd7b 	bl	800412e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800563a:	462a      	mov	r2, r5
 800563c:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 800563e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005640:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <prvCheckForValidListAndQueue+0x50>)
 8005644:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005646:	f7ff f8e3 	bl	8004810 <xQueueGenericCreate>
 800564a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800564c:	b110      	cbz	r0, 8005654 <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <prvCheckForValidListAndQueue+0x54>)
 8005650:	f7ff faf4 	bl	8004c3c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005658:	f7fe be2a 	b.w	80042b0 <vPortExitCritical>
 800565c:	20003e10 	.word	0x20003e10
 8005660:	20003de4 	.word	0x20003de4
 8005664:	20003df8 	.word	0x20003df8
 8005668:	20003ddc 	.word	0x20003ddc
 800566c:	20003de0 	.word	0x20003de0
 8005670:	080085ad 	.word	0x080085ad

08005674 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8005674:	4291      	cmp	r1, r2
{
 8005676:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005678:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800567a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800567c:	d80a      	bhi.n	8005694 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	6983      	ldr	r3, [r0, #24]
 8005682:	429a      	cmp	r2, r3
 8005684:	d20d      	bcs.n	80056a2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005686:	1d01      	adds	r1, r0, #4
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	f7fe fd69 	bl	8004162 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005690:	2000      	movs	r0, #0
 8005692:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005694:	429a      	cmp	r2, r3
 8005696:	d201      	bcs.n	800569c <prvInsertTimerInActiveList+0x28>
 8005698:	4299      	cmp	r1, r3
 800569a:	d202      	bcs.n	80056a2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800569c:	1d01      	adds	r1, r0, #4
 800569e:	4b03      	ldr	r3, [pc, #12]	; (80056ac <prvInsertTimerInActiveList+0x38>)
 80056a0:	e7f3      	b.n	800568a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80056a2:	2001      	movs	r0, #1
}
 80056a4:	bd08      	pop	{r3, pc}
 80056a6:	bf00      	nop
 80056a8:	20003de0 	.word	0x20003de0
 80056ac:	20003ddc 	.word	0x20003ddc

080056b0 <xTimerCreateTimerTask>:
{
 80056b0:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 80056b2:	f7ff ffb3 	bl	800561c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <xTimerCreateTimerTask+0x40>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b15b      	cbz	r3, 80056d4 <xTimerCreateTimerTask+0x24>
			xReturn = xTaskCreate(	prvTimerTask,
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <xTimerCreateTimerTask+0x44>)
 80056be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c2:	490d      	ldr	r1, [pc, #52]	; (80056f8 <xTimerCreateTimerTask+0x48>)
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	2302      	movs	r3, #2
 80056c8:	480c      	ldr	r0, [pc, #48]	; (80056fc <xTimerCreateTimerTask+0x4c>)
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	f7ff fb4f 	bl	8004d70 <xTaskCreate>
	configASSERT( xReturn );
 80056d2:	b950      	cbnz	r0, 80056ea <xTimerCreateTimerTask+0x3a>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	b672      	cpsid	i
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	b662      	cpsie	i
 80056e8:	e7fe      	b.n	80056e8 <xTimerCreateTimerTask+0x38>
}
 80056ea:	b003      	add	sp, #12
 80056ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80056f0:	20003e10 	.word	0x20003e10
 80056f4:	20003e14 	.word	0x20003e14
 80056f8:	080085b2 	.word	0x080085b2
 80056fc:	08005829 	.word	0x08005829

08005700 <xTimerCreate>:
	{
 8005700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005704:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005706:	2028      	movs	r0, #40	; 0x28
	{
 8005708:	460d      	mov	r5, r1
 800570a:	4617      	mov	r7, r2
 800570c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800570e:	f7fe feef 	bl	80044f0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8005712:	4604      	mov	r4, r0
 8005714:	b1b8      	cbz	r0, 8005746 <xTimerCreate+0x46>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005716:	b955      	cbnz	r5, 800572e <xTimerCreate+0x2e>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	b672      	cpsid	i
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	b662      	cpsie	i
 800572c:	e7fe      	b.n	800572c <xTimerCreate+0x2c>
		prvCheckForValidListAndQueue();
 800572e:	f7ff ff75 	bl	800561c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005732:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8005734:	f8c4 8000 	str.w	r8, [r4]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005738:	1d20      	adds	r0, r4, #4
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800573a:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800573c:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800573e:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005740:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005742:	f7fe fcff 	bl	8004144 <vListInitialiseItem>
	}
 8005746:	4620      	mov	r0, r4
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800574c <xTimerGenericCommand>:
{
 800574c:	b530      	push	{r4, r5, lr}
 800574e:	4615      	mov	r5, r2
 8005750:	b085      	sub	sp, #20
 8005752:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8005754:	4603      	mov	r3, r0
 8005756:	b950      	cbnz	r0, 800576e <xTimerGenericCommand+0x22>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	b672      	cpsid	i
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	b662      	cpsie	i
 800576c:	e7fe      	b.n	800576c <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 800576e:	4c0d      	ldr	r4, [pc, #52]	; (80057a4 <xTimerGenericCommand+0x58>)
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	b178      	cbz	r0, 8005794 <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005774:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8005776:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005778:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800577a:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800577c:	dc0c      	bgt.n	8005798 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800577e:	f7ff fe97 	bl	80054b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005782:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005784:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005786:	a901      	add	r1, sp, #4
 8005788:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800578a:	bf0c      	ite	eq
 800578c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800578e:	461a      	movne	r2, r3
 8005790:	f7ff f862 	bl	8004858 <xQueueGenericSend>
}
 8005794:	b005      	add	sp, #20
 8005796:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005798:	2300      	movs	r3, #0
 800579a:	a901      	add	r1, sp, #4
 800579c:	f7ff f91a 	bl	80049d4 <xQueueGenericSendFromISR>
 80057a0:	e7f8      	b.n	8005794 <xTimerGenericCommand+0x48>
 80057a2:	bf00      	nop
 80057a4:	20003e10 	.word	0x20003e10

080057a8 <prvSwitchTimerLists>:
{
 80057a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057ac:	4d1c      	ldr	r5, [pc, #112]	; (8005820 <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057ae:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	b932      	cbnz	r2, 80057c6 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80057b8:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <prvSwitchTimerLists+0x7c>)
 80057ba:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057bc:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80057be:	6029      	str	r1, [r5, #0]
}
 80057c0:	b002      	add	sp, #8
 80057c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057c6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057c8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057ca:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057cc:	1d27      	adds	r7, r4, #4
 80057ce:	4638      	mov	r0, r7
 80057d0:	f7fe fcde 	bl	8004190 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d6:	4620      	mov	r0, r4
 80057d8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057da:	69e3      	ldr	r3, [r4, #28]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d1e8      	bne.n	80057b2 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057e0:	69a3      	ldr	r3, [r4, #24]
 80057e2:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80057e4:	429e      	cmp	r6, r3
 80057e6:	d206      	bcs.n	80057f6 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057e8:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ea:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057ec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	6828      	ldr	r0, [r5, #0]
 80057f0:	f7fe fcb7 	bl	8004162 <vListInsert>
 80057f4:	e7dd      	b.n	80057b2 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057f6:	2300      	movs	r3, #0
 80057f8:	f8cd 8000 	str.w	r8, [sp]
 80057fc:	4632      	mov	r2, r6
 80057fe:	4620      	mov	r0, r4
 8005800:	4619      	mov	r1, r3
 8005802:	f7ff ffa3 	bl	800574c <xTimerGenericCommand>
				configASSERT( xResult );
 8005806:	2800      	cmp	r0, #0
 8005808:	d1d3      	bne.n	80057b2 <prvSwitchTimerLists+0xa>
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	b672      	cpsid	i
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	b662      	cpsie	i
 800581e:	e7fe      	b.n	800581e <prvSwitchTimerLists+0x76>
 8005820:	20003ddc 	.word	0x20003ddc
 8005824:	20003de0 	.word	0x20003de0

08005828 <prvTimerTask>:
{
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800582c:	4d70      	ldr	r5, [pc, #448]	; (80059f0 <prvTimerTask+0x1c8>)
{
 800582e:	b089      	sub	sp, #36	; 0x24
					portYIELD_WITHIN_API();
 8005830:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8005a00 <prvTimerTask+0x1d8>
 8005834:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800583c:	f1bb 0f00 	cmp.w	fp, #0
 8005840:	d045      	beq.n	80058ce <prvTimerTask+0xa6>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8005848:	f7ff fba6 	bl	8004f98 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800584c:	f7ff fbac 	bl	8004fa8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005850:	4b68      	ldr	r3, [pc, #416]	; (80059f4 <prvTimerTask+0x1cc>)
	xTimeNow = xTaskGetTickCount();
 8005852:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	461e      	mov	r6, r3
 8005858:	4290      	cmp	r0, r2
 800585a:	d23a      	bcs.n	80058d2 <prvTimerTask+0xaa>
 800585c:	9303      	str	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 800585e:	2401      	movs	r4, #1
		prvSwitchTimerLists();
 8005860:	f7ff ffa2 	bl	80057a8 <prvSwitchTimerLists>
 8005864:	9b03      	ldr	r3, [sp, #12]
	xLastTime = xTimeNow;
 8005866:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 800586a:	2c00      	cmp	r4, #0
 800586c:	f040 8081 	bne.w	8005972 <prvTimerTask+0x14a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005870:	f1bb 0f00 	cmp.w	fp, #0
 8005874:	d062      	beq.n	800593c <prvTimerTask+0x114>
 8005876:	45d1      	cmp	r9, sl
 8005878:	d879      	bhi.n	800596e <prvTimerTask+0x146>
				( void ) xTaskResumeAll();
 800587a:	f7ff fc2f 	bl	80050dc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005886:	f10b 0004 	add.w	r0, fp, #4
 800588a:	f7fe fc81 	bl	8004190 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800588e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d11f      	bne.n	80058d6 <prvTimerTask+0xae>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005896:	f8db 1018 	ldr.w	r1, [fp, #24]
 800589a:	464b      	mov	r3, r9
 800589c:	4652      	mov	r2, sl
 800589e:	4658      	mov	r0, fp
 80058a0:	4449      	add	r1, r9
 80058a2:	f7ff fee7 	bl	8005674 <prvInsertTimerInActiveList>
 80058a6:	b1b0      	cbz	r0, 80058d6 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058a8:	9400      	str	r4, [sp, #0]
 80058aa:	4623      	mov	r3, r4
 80058ac:	464a      	mov	r2, r9
 80058ae:	4621      	mov	r1, r4
 80058b0:	4658      	mov	r0, fp
 80058b2:	f7ff ff4b 	bl	800574c <xTimerGenericCommand>
			configASSERT( xResult );
 80058b6:	b970      	cbnz	r0, 80058d6 <prvTimerTask+0xae>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	b672      	cpsid	i
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	b662      	cpsie	i
 80058cc:	e7fe      	b.n	80058cc <prvTimerTask+0xa4>
		xNextExpireTime = ( TickType_t ) 0U;
 80058ce:	46d9      	mov	r9, fp
 80058d0:	e7ba      	b.n	8005848 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 80058d2:	2400      	movs	r4, #0
 80058d4:	e7c7      	b.n	8005866 <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058d6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80058da:	4658      	mov	r0, fp
 80058dc:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058de:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80059fc <prvTimerTask+0x1d4>
 80058e2:	2300      	movs	r3, #0
 80058e4:	a905      	add	r1, sp, #20
 80058e6:	f8d9 0000 	ldr.w	r0, [r9]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7ff f8dc 	bl	8004aa8 <xQueueGenericReceive>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0a0      	beq.n	8005836 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058f4:	9b05      	ldr	r3, [sp, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dbf3      	blt.n	80058e2 <prvTimerTask+0xba>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058fa:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	b113      	cbz	r3, 8005906 <prvTimerTask+0xde>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005900:	1d20      	adds	r0, r4, #4
 8005902:	f7fe fc45 	bl	8004190 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8005906:	f7ff fb4f 	bl	8004fa8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800590a:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800590c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800590e:	4298      	cmp	r0, r3
 8005910:	d201      	bcs.n	8005916 <prvTimerTask+0xee>
		prvSwitchTimerLists();
 8005912:	f7ff ff49 	bl	80057a8 <prvSwitchTimerLists>
 8005916:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 8005918:	f8c6 b000 	str.w	fp, [r6]
 800591c:	2a09      	cmp	r2, #9
 800591e:	d8e0      	bhi.n	80058e2 <prvTimerTask+0xba>
 8005920:	2301      	movs	r3, #1
 8005922:	4093      	lsls	r3, r2
 8005924:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8005928:	d14c      	bne.n	80059c4 <prvTimerTask+0x19c>
 800592a:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800592e:	d123      	bne.n	8005978 <prvTimerTask+0x150>
 8005930:	069b      	lsls	r3, r3, #26
 8005932:	d5d6      	bpl.n	80058e2 <prvTimerTask+0xba>
						vPortFree( pxTimer );
 8005934:	4620      	mov	r0, r4
 8005936:	f7fe fe6d 	bl	8004614 <vPortFree>
 800593a:	e7d2      	b.n	80058e2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800593c:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <prvTimerTask+0x1d0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	fab2 f282 	clz	r2, r2
 8005946:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <prvTimerTask+0x1d4>)
 800594a:	eba9 010a 	sub.w	r1, r9, sl
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	f7ff f986 	bl	8004c60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005954:	f7ff fbc2 	bl	80050dc <xTaskResumeAll>
 8005958:	2800      	cmp	r0, #0
 800595a:	d1c0      	bne.n	80058de <prvTimerTask+0xb6>
					portYIELD_WITHIN_API();
 800595c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005960:	f8c8 3000 	str.w	r3, [r8]
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	e7b7      	b.n	80058de <prvTimerTask+0xb6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800596e:	4622      	mov	r2, r4
 8005970:	e7ea      	b.n	8005948 <prvTimerTask+0x120>
			( void ) xTaskResumeAll();
 8005972:	f7ff fbb3 	bl	80050dc <xTaskResumeAll>
 8005976:	e7b2      	b.n	80058de <prvTimerTask+0xb6>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005978:	69a1      	ldr	r1, [r4, #24]
 800597a:	465a      	mov	r2, fp
 800597c:	9b06      	ldr	r3, [sp, #24]
 800597e:	4620      	mov	r0, r4
 8005980:	4419      	add	r1, r3
 8005982:	f7ff fe77 	bl	8005674 <prvInsertTimerInActiveList>
 8005986:	2800      	cmp	r0, #0
 8005988:	d0ab      	beq.n	80058e2 <prvTimerTask+0xba>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800598a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800598c:	4620      	mov	r0, r4
 800598e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005990:	69e3      	ldr	r3, [r4, #28]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d1a5      	bne.n	80058e2 <prvTimerTask+0xba>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005996:	69a2      	ldr	r2, [r4, #24]
 8005998:	4653      	mov	r3, sl
 800599a:	9906      	ldr	r1, [sp, #24]
 800599c:	4620      	mov	r0, r4
 800599e:	f8cd a000 	str.w	sl, [sp]
 80059a2:	440a      	add	r2, r1
 80059a4:	4651      	mov	r1, sl
 80059a6:	f7ff fed1 	bl	800574c <xTimerGenericCommand>
							configASSERT( xResult );
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d199      	bne.n	80058e2 <prvTimerTask+0xba>
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	b672      	cpsid	i
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	b662      	cpsie	i
 80059c2:	e7fe      	b.n	80059c2 <prvTimerTask+0x19a>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059c4:	9906      	ldr	r1, [sp, #24]
 80059c6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059c8:	b951      	cbnz	r1, 80059e0 <prvTimerTask+0x1b8>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	b672      	cpsid	i
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	b662      	cpsie	i
 80059de:	e7fe      	b.n	80059de <prvTimerTask+0x1b6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059e0:	465b      	mov	r3, fp
 80059e2:	465a      	mov	r2, fp
 80059e4:	4459      	add	r1, fp
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7ff fe44 	bl	8005674 <prvInsertTimerInActiveList>
 80059ec:	e779      	b.n	80058e2 <prvTimerTask+0xba>
 80059ee:	bf00      	nop
 80059f0:	20003ddc 	.word	0x20003ddc
 80059f4:	20003e0c 	.word	0x20003e0c
 80059f8:	20003de0 	.word	0x20003de0
 80059fc:	20003e10 	.word	0x20003e10
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8005a04:	b510      	push	{r4, lr}
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 8005a06:	4604      	mov	r4, r0
 8005a08:	b950      	cbnz	r0, 8005a20 <xTimerIsTimerActive+0x1c>
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	b672      	cpsid	i
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	b662      	cpsie	i
 8005a1e:	e7fe      	b.n	8005a1e <xTimerIsTimerActive+0x1a>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8005a20:	f7fe fc20 	bl	8004264 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8005a24:	6964      	ldr	r4, [r4, #20]
 8005a26:	3400      	adds	r4, #0
 8005a28:	bf18      	it	ne
 8005a2a:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 8005a2c:	f7fe fc40 	bl	80042b0 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8005a30:	4620      	mov	r0, r4
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <can_protocol_data_analyzing>:
#include "adani_can_medical_protocol.h"
#include "own_defines.h"

uint8_t can_protocol_data_analyzing(FDCAN_HandleTypeDef *hfdcan,
								FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a34:	b508      	push	{r3, lr}
	//uint32_t level = HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0);
	if(HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, pRxHeader, pRxData) == HAL_OK)
 8005a36:	4613      	mov	r3, r2
 8005a38:	460a      	mov	r2, r1
 8005a3a:	2140      	movs	r1, #64	; 0x40
 8005a3c:	f7fb fc14 	bl	8001268 <HAL_FDCAN_GetRxMessage>
 8005a40:	b958      	cbnz	r0, 8005a5a <can_protocol_data_analyzing+0x26>
	{
		uint32_t address;
		address = pRxHeader->Identifier;

		static char a=0;
		  LED_VD6(a^=1);
 8005a42:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <can_protocol_data_analyzing+0x2c>)
 8005a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a48:	4806      	ldr	r0, [pc, #24]	; (8005a64 <can_protocol_data_analyzing+0x30>)
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	f082 0201 	eor.w	r2, r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	f7fb fd9d 	bl	8001590 <HAL_GPIO_WritePin>
		return 0xFF;
 8005a56:	20ff      	movs	r0, #255	; 0xff
 8005a58:	bd08      	pop	{r3, pc}
	}
	else
		return 0;
 8005a5a:	2000      	movs	r0, #0
}
 8005a5c:	bd08      	pop	{r3, pc}
 8005a5e:	bf00      	nop
 8005a60:	20003e18 	.word	0x20003e18
 8005a64:	58020800 	.word	0x58020800

08005a68 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8005a68:	2808      	cmp	r0, #8
{
 8005a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6c:	4605      	mov	r5, r0
	CHECK_SOCKNUM();
 8005a6e:	d82a      	bhi.n	8005ac6 <close+0x5e>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8005a70:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8005a74:	2110      	movs	r1, #16
 8005a76:	0224      	lsls	r4, r4, #8
 8005a78:	1c67      	adds	r7, r4, #1
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f000 fc96 	bl	80063ac <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005a80:	4638      	mov	r0, r7
 8005a82:	f000 fcb3 	bl	80063ec <WIZCHIP_READ>
 8005a86:	4606      	mov	r6, r0
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1f9      	bne.n	8005a80 <close+0x18>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8005a8c:	21ff      	movs	r1, #255	; 0xff
 8005a8e:	1ca0      	adds	r0, r4, #2
 8005a90:	f000 fc8c 	bl	80063ac <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005a94:	2301      	movs	r3, #1
 8005a96:	490d      	ldr	r1, [pc, #52]	; (8005acc <close+0x64>)
	//
	sock_is_sending &= ~(1<<sn);
	sock_remained_size[sn] = 0;
	sock_pack_info[sn] = 0;
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005a98:	3403      	adds	r4, #3
	sock_io_mode &= ~(1<<sn);
 8005a9a:	40ab      	lsls	r3, r5
 8005a9c:	880a      	ldrh	r2, [r1, #0]
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	b21b      	sxth	r3, r3
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <close+0x68>)
 8005aa8:	8811      	ldrh	r1, [r2, #0]
 8005aaa:	400b      	ands	r3, r1
 8005aac:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <close+0x6c>)
 8005ab0:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
	sock_pack_info[sn] = 0;
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <close+0x70>)
 8005ab6:	555e      	strb	r6, [r3, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fc97 	bl	80063ec <WIZCHIP_READ>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1fa      	bne.n	8005ab8 <close+0x50>
	return SOCK_OK;
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005acc:	20003e1a 	.word	0x20003e1a
 8005ad0:	20003e1c 	.word	0x20003e1c
 8005ad4:	20003e36 	.word	0x20003e36
 8005ad8:	20003e2e 	.word	0x20003e2e

08005adc <socket>:
	CHECK_SOCKNUM();
 8005adc:	2808      	cmp	r0, #8
{
 8005ade:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4688      	mov	r8, r1
 8005ae6:	4617      	mov	r7, r2
 8005ae8:	461d      	mov	r5, r3
	CHECK_SOCKNUM();
 8005aea:	d874      	bhi.n	8005bd6 <socket+0xfa>
	switch(protocol)
 8005aec:	2901      	cmp	r1, #1
 8005aee:	d005      	beq.n	8005afc <socket+0x20>
 8005af0:	d301      	bcc.n	8005af6 <socket+0x1a>
 8005af2:	2904      	cmp	r1, #4
 8005af4:	d90f      	bls.n	8005b16 <socket+0x3a>
         return SOCKERR_SOCKMODE;
 8005af6:	f06f 0004 	mvn.w	r0, #4
 8005afa:	e009      	b.n	8005b10 <socket+0x34>
            getSIPR((uint8_t*)&taddr);
 8005afc:	2204      	movs	r2, #4
 8005afe:	200f      	movs	r0, #15
 8005b00:	eb0d 0102 	add.w	r1, sp, r2
 8005b04:	f000 fcbe 	bl	8006484 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8005b08:	9b01      	ldr	r3, [sp, #4]
 8005b0a:	b923      	cbnz	r3, 8005b16 <socket+0x3a>
 8005b0c:	f06f 0002 	mvn.w	r0, #2
}	   
 8005b10:	b002      	add	sp, #8
 8005b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
 8005b16:	f015 0f14 	tst.w	r5, #20
 8005b1a:	d154      	bne.n	8005bc6 <socket+0xea>
	if(flag != 0)
 8005b1c:	b12d      	cbz	r5, 8005b2a <socket+0x4e>
   	switch(protocol)
 8005b1e:	f1b8 0f01 	cmp.w	r8, #1
 8005b22:	d04d      	beq.n	8005bc0 <socket+0xe4>
 8005b24:	f1b8 0f02 	cmp.w	r8, #2
 8005b28:	d050      	beq.n	8005bcc <socket+0xf0>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005b2a:	f104 0640 	add.w	r6, r4, #64	; 0x40
	close(sn);
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ff9a 	bl	8005a68 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005b34:	f025 010f 	bic.w	r1, r5, #15
 8005b38:	0236      	lsls	r6, r6, #8
 8005b3a:	ea41 0108 	orr.w	r1, r1, r8
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f000 fc34 	bl	80063ac <WIZCHIP_WRITE>
	if(!port)
 8005b44:	b96f      	cbnz	r7, 8005b62 <socket+0x86>
	   port = sock_any_port++;
 8005b46:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <socket+0x100>)
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005b48:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 8005b4c:	8817      	ldrh	r7, [r2, #0]
 8005b4e:	1c7b      	adds	r3, r7, #1
 8005b50:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005b52:	428b      	cmp	r3, r1
 8005b54:	bf05      	ittet	eq
 8005b56:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
 8005b5a:	f64f 77ef 	movweq	r7, #65519	; 0xffef
	   port = sock_any_port++;
 8005b5e:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005b60:	8013      	strheq	r3, [r2, #0]
   setSn_PORT(sn,port);	
 8005b62:	0a39      	lsrs	r1, r7, #8
 8005b64:	1d30      	adds	r0, r6, #4
 8005b66:	f000 fc21 	bl	80063ac <WIZCHIP_WRITE>
 8005b6a:	1d70      	adds	r0, r6, #5
 8005b6c:	b2f9      	uxtb	r1, r7
   setSn_CR(sn,Sn_CR_OPEN);
 8005b6e:	1c77      	adds	r7, r6, #1
   setSn_PORT(sn,port);	
 8005b70:	f000 fc1c 	bl	80063ac <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8005b74:	2101      	movs	r1, #1
 8005b76:	4638      	mov	r0, r7
 8005b78:	f000 fc18 	bl	80063ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f000 fc35 	bl	80063ec <WIZCHIP_READ>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d1fa      	bne.n	8005b7c <socket+0xa0>
   sock_io_mode &= ~(1 <<sn);
 8005b86:	2301      	movs	r3, #1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005b88:	4915      	ldr	r1, [pc, #84]	; (8005be0 <socket+0x104>)
 8005b8a:	f005 0501 	and.w	r5, r5, #1
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005b8e:	3603      	adds	r6, #3
   sock_io_mode &= ~(1 <<sn);
 8005b90:	40a3      	lsls	r3, r4
 8005b92:	880a      	ldrh	r2, [r1, #0]
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005b94:	40a5      	lsls	r5, r4
   sock_io_mode &= ~(1 <<sn);
 8005b96:	43db      	mvns	r3, r3
 8005b98:	b21b      	sxth	r3, r3
 8005b9a:	401a      	ands	r2, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005b9c:	4315      	orrs	r5, r2
   sock_is_sending &= ~(1<<sn);
 8005b9e:	4a11      	ldr	r2, [pc, #68]	; (8005be4 <socket+0x108>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005ba0:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8005ba2:	8811      	ldrh	r1, [r2, #0]
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <socket+0x10c>)
 8005baa:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <socket+0x110>)
 8005bb0:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f000 fc1a 	bl	80063ec <WIZCHIP_READ>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0fa      	beq.n	8005bb2 <socket+0xd6>
   return (int8_t)sn;
 8005bbc:	b260      	sxtb	r0, r4
 8005bbe:	e7a7      	b.n	8005b10 <socket+0x34>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8005bc0:	f015 0f21 	tst.w	r5, #33	; 0x21
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005bc4:	d1b1      	bne.n	8005b2a <socket+0x4e>
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
 8005bc6:	f06f 0005 	mvn.w	r0, #5
 8005bca:	e7a1      	b.n	8005b10 <socket+0x34>
   	      if(flag & SF_IGMP_VER2)
 8005bcc:	06ab      	lsls	r3, r5, #26
 8005bce:	d5ac      	bpl.n	8005b2a <socket+0x4e>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005bd0:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005bd4:	e7f6      	b.n	8005bc4 <socket+0xe8>
	CHECK_SOCKNUM();
 8005bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bda:	e799      	b.n	8005b10 <socket+0x34>
 8005bdc:	2000000c 	.word	0x2000000c
 8005be0:	20003e1a 	.word	0x20003e1a
 8005be4:	20003e1c 	.word	0x20003e1c
 8005be8:	20003e36 	.word	0x20003e36
 8005bec:	20003e2e 	.word	0x20003e2e

08005bf0 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8005bf0:	2808      	cmp	r0, #8
{
 8005bf2:	b570      	push	{r4, r5, r6, lr}
 8005bf4:	4605      	mov	r5, r0
	CHECK_SOCKNUM();
 8005bf6:	d826      	bhi.n	8005c46 <listen+0x56>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005bf8:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8005bfc:	0224      	lsls	r4, r4, #8
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 fbf4 	bl	80063ec <WIZCHIP_READ>
 8005c04:	f000 000f 	and.w	r0, r0, #15
 8005c08:	2801      	cmp	r0, #1
 8005c0a:	d11f      	bne.n	8005c4c <listen+0x5c>
	CHECK_SOCKINIT();
 8005c0c:	1ce6      	adds	r6, r4, #3
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f000 fbec 	bl	80063ec <WIZCHIP_READ>
 8005c14:	2813      	cmp	r0, #19
 8005c16:	d11c      	bne.n	8005c52 <listen+0x62>
	setSn_CR(sn,Sn_CR_LISTEN);
 8005c18:	3401      	adds	r4, #1
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 fbc5 	bl	80063ac <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 fbe2 	bl	80063ec <WIZCHIP_READ>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d1fa      	bne.n	8005c22 <listen+0x32>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f000 fbdd 	bl	80063ec <WIZCHIP_READ>
 8005c32:	2814      	cmp	r0, #20
 8005c34:	d101      	bne.n	8005c3a <listen+0x4a>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8005c36:	2001      	movs	r0, #1
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f7ff ff14 	bl	8005a68 <close>
         return SOCKERR_SOCKCLOSED;
 8005c40:	f06f 0003 	mvn.w	r0, #3
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8005c46:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005c4c:	f06f 0004 	mvn.w	r0, #4
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKINIT();
 8005c52:	f06f 0002 	mvn.w	r0, #2
}
 8005c56:	bd70      	pop	{r4, r5, r6, pc}

08005c58 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8005c58:	2808      	cmp	r0, #8
{
 8005c5a:	b570      	push	{r4, r5, r6, lr}
 8005c5c:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 8005c5e:	d833      	bhi.n	8005cc8 <disconnect+0x70>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005c60:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8005c64:	0224      	lsls	r4, r4, #8
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 fbc0 	bl	80063ec <WIZCHIP_READ>
 8005c6c:	f000 000f 	and.w	r0, r0, #15
 8005c70:	2801      	cmp	r0, #1
 8005c72:	d12c      	bne.n	8005cce <disconnect+0x76>
	setSn_CR(sn,Sn_CR_DISCON);
 8005c74:	1c66      	adds	r6, r4, #1
 8005c76:	2108      	movs	r1, #8
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 fb97 	bl	80063ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 fbb4 	bl	80063ec <WIZCHIP_READ>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d1fa      	bne.n	8005c7e <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 8005c88:	4912      	ldr	r1, [pc, #72]	; (8005cd4 <disconnect+0x7c>)
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	fa03 f205 	lsl.w	r2, r3, r5
 8005c90:	880b      	ldrh	r3, [r1, #0]
 8005c92:	ea23 0302 	bic.w	r3, r3, r2
 8005c96:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005c98:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <disconnect+0x80>)
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	412b      	asrs	r3, r5
 8005c9e:	07da      	lsls	r2, r3, #31
 8005ca0:	d417      	bmi.n	8005cd2 <disconnect+0x7a>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005ca2:	1ce6      	adds	r6, r4, #3
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005ca4:	3402      	adds	r4, #2
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f000 fba0 	bl	80063ec <WIZCHIP_READ>
 8005cac:	b908      	cbnz	r0, 8005cb2 <disconnect+0x5a>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
 8005cae:	2001      	movs	r0, #1
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fb9a 	bl	80063ec <WIZCHIP_READ>
 8005cb8:	0703      	lsls	r3, r0, #28
 8005cba:	d5f4      	bpl.n	8005ca6 <disconnect+0x4e>
	      close(sn);
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7ff fed3 	bl	8005a68 <close>
	      return SOCKERR_TIMEOUT;
 8005cc2:	f06f 000c 	mvn.w	r0, #12
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005cce:	f06f 0004 	mvn.w	r0, #4
}
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	20003e1c 	.word	0x20003e1c
 8005cd8:	20003e1a 	.word	0x20003e1a

08005cdc <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8005cdc:	2808      	cmp	r0, #8
{
 8005cde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	468a      	mov	sl, r1
 8005ce6:	4615      	mov	r5, r2
   CHECK_SOCKNUM();
 8005ce8:	f200 80a3 	bhi.w	8005e32 <send+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005cec:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8005cf0:	0224      	lsls	r4, r4, #8
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fb7a 	bl	80063ec <WIZCHIP_READ>
 8005cf8:	f000 000f 	and.w	r0, r0, #15
 8005cfc:	2801      	cmp	r0, #1
 8005cfe:	f040 809b 	bne.w	8005e38 <send+0x15c>
   CHECK_SOCKDATA();
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	f000 809b 	beq.w	8005e3e <send+0x162>
   tmp = getSn_SR(sn);
 8005d08:	f104 0903 	add.w	r9, r4, #3
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	f000 fb6d 	bl	80063ec <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005d12:	2817      	cmp	r0, #23
 8005d14:	d001      	beq.n	8005d1a <send+0x3e>
 8005d16:	281c      	cmp	r0, #28
 8005d18:	d152      	bne.n	8005dc0 <send+0xe4>
   if( sock_is_sending & (1<<sn) )
 8005d1a:	4f4a      	ldr	r7, [pc, #296]	; (8005e44 <send+0x168>)
 8005d1c:	883b      	ldrh	r3, [r7, #0]
 8005d1e:	4133      	asrs	r3, r6
 8005d20:	07d9      	lsls	r1, r3, #31
 8005d22:	d52f      	bpl.n	8005d84 <send+0xa8>
   {
      tmp = getSn_IR(sn);
 8005d24:	f104 0802 	add.w	r8, r4, #2
 8005d28:	4640      	mov	r0, r8
 8005d2a:	f000 fb5f 	bl	80063ec <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8005d2e:	06c2      	lsls	r2, r0, #27
 8005d30:	d549      	bpl.n	8005dc6 <send+0xea>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005d32:	2110      	movs	r1, #16
 8005d34:	4640      	mov	r0, r8
 8005d36:	f000 fb39 	bl	80063ac <WIZCHIP_WRITE>
         //M20150401 : Typing Error
         //#if _WZICHIP_ == 5200
         #if _WIZCHIP_ == 5200
            if(getSn_TX_RD(sn) != sock_next_rd[sn])
 8005d3a:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8005d3e:	f000 fb55 	bl	80063ec <WIZCHIP_READ>
 8005d42:	4680      	mov	r8, r0
 8005d44:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8005d48:	f000 fb50 	bl	80063ec <WIZCHIP_READ>
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <send+0x16c>)
 8005d4e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005d52:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8005d56:	4298      	cmp	r0, r3
 8005d58:	d00d      	beq.n	8005d76 <send+0x9a>
            {
               setSn_CR(sn,Sn_CR_SEND);
 8005d5a:	3401      	adds	r4, #1
 8005d5c:	2120      	movs	r1, #32
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 fb24 	bl	80063ac <WIZCHIP_WRITE>
               while(getSn_CR(sn));
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fb41 	bl	80063ec <WIZCHIP_READ>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d1fa      	bne.n	8005d64 <send+0x88>
               return SOCK_BUSY;
 8005d6e:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8005d70:	b003      	add	sp, #12
 8005d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         sock_is_sending &= ~(1<<sn);         
 8005d76:	2301      	movs	r3, #1
 8005d78:	fa03 f206 	lsl.w	r2, r3, r6
 8005d7c:	883b      	ldrh	r3, [r7, #0]
 8005d7e:	ea23 0302 	bic.w	r3, r3, r2
 8005d82:	803b      	strh	r3, [r7, #0]
   freesize = getSn_TxMAX(sn);
 8005d84:	f104 001f 	add.w	r0, r4, #31
 8005d88:	f04f 0801 	mov.w	r8, #1
 8005d8c:	f000 fb2e 	bl	80063ec <WIZCHIP_READ>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005d90:	4b2e      	ldr	r3, [pc, #184]	; (8005e4c <send+0x170>)
   freesize = getSn_TxMAX(sn);
 8005d92:	0280      	lsls	r0, r0, #10
 8005d94:	fa08 f806 	lsl.w	r8, r8, r6
 8005d98:	b280      	uxth	r0, r0
 8005d9a:	4285      	cmp	r5, r0
 8005d9c:	bf28      	it	cs
 8005d9e:	4605      	movcs	r5, r0
      freesize = getSn_TX_FSR(sn);
 8005da0:	4630      	mov	r0, r6
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	f000 fb98 	bl	80064d8 <getSn_TX_FSR>
 8005da8:	4683      	mov	fp, r0
      tmp = getSn_SR(sn);
 8005daa:	4648      	mov	r0, r9
 8005dac:	f000 fb1e 	bl	80063ec <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005db0:	2817      	cmp	r0, #23
 8005db2:	9b01      	ldr	r3, [sp, #4]
 8005db4:	d00f      	beq.n	8005dd6 <send+0xfa>
 8005db6:	281c      	cmp	r0, #28
 8005db8:	d00d      	beq.n	8005dd6 <send+0xfa>
         close(sn);
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff fe54 	bl	8005a68 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005dc0:	f06f 0006 	mvn.w	r0, #6
 8005dc4:	e7d4      	b.n	8005d70 <send+0x94>
      else if(tmp & Sn_IR_TIMEOUT)
 8005dc6:	0703      	lsls	r3, r0, #28
 8005dc8:	d5d1      	bpl.n	8005d6e <send+0x92>
         close(sn);
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff fe4c 	bl	8005a68 <close>
         return SOCKERR_TIMEOUT;
 8005dd0:	f06f 000c 	mvn.w	r0, #12
 8005dd4:	e7cc      	b.n	8005d70 <send+0x94>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	ea12 0f08 	tst.w	r2, r8
 8005ddc:	d026      	beq.n	8005e2c <send+0x150>
 8005dde:	45ab      	cmp	fp, r5
 8005de0:	d3c5      	bcc.n	8005d6e <send+0x92>
   wiz_send_data(sn, buf, len);
 8005de2:	4651      	mov	r1, sl
 8005de4:	462a      	mov	r2, r5
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 fbe2 	bl	80065b0 <wiz_send_data>
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
 8005dec:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8005df0:	f000 fafc 	bl	80063ec <WIZCHIP_READ>
 8005df4:	4681      	mov	r9, r0
 8005df6:	f104 0023 	add.w	r0, r4, #35	; 0x23
   setSn_CR(sn,Sn_CR_SEND);
 8005dfa:	3401      	adds	r4, #1
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
 8005dfc:	f000 faf6 	bl	80063ec <WIZCHIP_READ>
 8005e00:	4428      	add	r0, r5
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <send+0x16c>)
   setSn_CR(sn,Sn_CR_SEND);
 8005e04:	2120      	movs	r1, #32
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
 8005e06:	eb00 2009 	add.w	r0, r0, r9, lsl #8
 8005e0a:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
   setSn_CR(sn,Sn_CR_SEND);
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 facc 	bl	80063ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 fae9 	bl	80063ec <WIZCHIP_READ>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1fa      	bne.n	8005e14 <send+0x138>
   sock_is_sending |= (1 << sn);
 8005e1e:	883b      	ldrh	r3, [r7, #0]
   return (int32_t)len;
 8005e20:	4628      	mov	r0, r5
   sock_is_sending |= (1 << sn);
 8005e22:	ea48 0803 	orr.w	r8, r8, r3
 8005e26:	f8a7 8000 	strh.w	r8, [r7]
   return (int32_t)len;
 8005e2a:	e7a1      	b.n	8005d70 <send+0x94>
      if(len <= freesize) break;
 8005e2c:	45ab      	cmp	fp, r5
 8005e2e:	d3b7      	bcc.n	8005da0 <send+0xc4>
 8005e30:	e7d7      	b.n	8005de2 <send+0x106>
   CHECK_SOCKNUM();
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295
 8005e36:	e79b      	b.n	8005d70 <send+0x94>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005e38:	f06f 0004 	mvn.w	r0, #4
 8005e3c:	e798      	b.n	8005d70 <send+0x94>
   CHECK_SOCKDATA();
 8005e3e:	f06f 000d 	mvn.w	r0, #13
 8005e42:	e795      	b.n	8005d70 <send+0x94>
 8005e44:	20003e1c 	.word	0x20003e1c
 8005e48:	20003e1e 	.word	0x20003e1e
 8005e4c:	20003e1a 	.word	0x20003e1a

08005e50 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005e50:	2808      	cmp	r0, #8
{
 8005e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	4680      	mov	r8, r0
 8005e58:	9100      	str	r1, [sp, #0]
 8005e5a:	4617      	mov	r7, r2
   CHECK_SOCKNUM();
 8005e5c:	d85c      	bhi.n	8005f18 <recv+0xc8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005e5e:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8005e62:	0224      	lsls	r4, r4, #8
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 fac1 	bl	80063ec <WIZCHIP_READ>
 8005e6a:	f000 060f 	and.w	r6, r0, #15
 8005e6e:	2e01      	cmp	r6, #1
 8005e70:	d155      	bne.n	8005f1e <recv+0xce>
   CHECK_SOCKDATA();
 8005e72:	2f00      	cmp	r7, #0
 8005e74:	d056      	beq.n	8005f24 <recv+0xd4>
   
   recvsize = getSn_RxMAX(sn);
 8005e76:	f104 001e 	add.w	r0, r4, #30
 8005e7a:	fa06 f608 	lsl.w	r6, r6, r8
 8005e7e:	f000 fab5 	bl	80063ec <WIZCHIP_READ>
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
         tmp = getSn_SR(sn);
 8005e82:	f104 0903 	add.w	r9, r4, #3
   recvsize = getSn_RxMAX(sn);
 8005e86:	4683      	mov	fp, r0
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005e88:	f104 0a1f 	add.w	sl, r4, #31
         recvsize = getSn_RX_RSR(sn);
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	f000 fb44 	bl	800651a <getSn_RX_RSR>
 8005e92:	4605      	mov	r5, r0
         tmp = getSn_SR(sn);
 8005e94:	4648      	mov	r0, r9
 8005e96:	f000 faa9 	bl	80063ec <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 8005e9a:	2817      	cmp	r0, #23
 8005e9c:	d031      	beq.n	8005f02 <recv+0xb2>
            if(tmp == SOCK_CLOSE_WAIT)
 8005e9e:	281c      	cmp	r0, #28
 8005ea0:	d127      	bne.n	8005ef2 <recv+0xa2>
               if(recvsize != 0) break;
 8005ea2:	b1dd      	cbz	r5, 8005edc <recv+0x8c>
   recvsize = getSn_RxMAX(sn);
 8005ea4:	ea4f 208b 	mov.w	r0, fp, lsl #10
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
   setSn_CR(sn,Sn_CR_RECV);
 8005ea8:	3401      	adds	r4, #1
   wiz_recv_data(sn, buf, len);
 8005eaa:	9900      	ldr	r1, [sp, #0]
 8005eac:	b280      	uxth	r0, r0
 8005eae:	4287      	cmp	r7, r0
 8005eb0:	bf28      	it	cs
 8005eb2:	4607      	movcs	r7, r0
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	42bd      	cmp	r5, r7
 8005eb8:	bf28      	it	cs
 8005eba:	4638      	movcs	r0, r7
 8005ebc:	b287      	uxth	r7, r0
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	f000 fbc9 	bl	8006658 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005ec6:	2140      	movs	r1, #64	; 0x40
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fa6f 	bl	80063ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 fa8c 	bl	80063ec <WIZCHIP_READ>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1fa      	bne.n	8005ece <recv+0x7e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005ed8:	4638      	mov	r0, r7
 8005eda:	e00f      	b.n	8005efc <recv+0xac>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005edc:	4640      	mov	r0, r8
 8005ede:	f000 fafb 	bl	80064d8 <getSn_TX_FSR>
 8005ee2:	9001      	str	r0, [sp, #4]
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	f000 fa81 	bl	80063ec <WIZCHIP_READ>
 8005eea:	9901      	ldr	r1, [sp, #4]
 8005eec:	ebb1 2f80 	cmp.w	r1, r0, lsl #10
 8005ef0:	d107      	bne.n	8005f02 <recv+0xb2>
                  close(sn);
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	f7ff fdb8 	bl	8005a68 <close>
                  return SOCKERR_SOCKSTATUS;
 8005ef8:	f06f 0006 	mvn.w	r0, #6
}
 8005efc:	b003      	add	sp, #12
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <recv+0xdc>)
 8005f04:	8819      	ldrh	r1, [r3, #0]
 8005f06:	4231      	tst	r1, r6
 8005f08:	d003      	beq.n	8005f12 <recv+0xc2>
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	d1ca      	bne.n	8005ea4 <recv+0x54>
 8005f0e:	4628      	mov	r0, r5
 8005f10:	e7f4      	b.n	8005efc <recv+0xac>
         if(recvsize != 0) break;
 8005f12:	2d00      	cmp	r5, #0
 8005f14:	d0ba      	beq.n	8005e8c <recv+0x3c>
 8005f16:	e7c5      	b.n	8005ea4 <recv+0x54>
   CHECK_SOCKNUM();
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	e7ee      	b.n	8005efc <recv+0xac>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005f1e:	f06f 0004 	mvn.w	r0, #4
 8005f22:	e7eb      	b.n	8005efc <recv+0xac>
   CHECK_SOCKDATA();
 8005f24:	f06f 000d 	mvn.w	r0, #13
 8005f28:	e7e8      	b.n	8005efc <recv+0xac>
 8005f2a:	bf00      	nop
 8005f2c:	20003e1a 	.word	0x20003e1a

08005f30 <sendto>:
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005f30:	2808      	cmp	r0, #8
{
 8005f32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f36:	4606      	mov	r6, r0
 8005f38:	4689      	mov	r9, r1
 8005f3a:	4692      	mov	sl, r2
 8005f3c:	461f      	mov	r7, r3
 8005f3e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
   CHECK_SOCKNUM();
 8005f42:	f200 80b9 	bhi.w	80060b8 <sendto+0x188>
   switch(getSn_MR(sn) & 0x0F)
 8005f46:	f100 0540 	add.w	r5, r0, #64	; 0x40
 8005f4a:	022d      	lsls	r5, r5, #8
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 fa4d 	bl	80063ec <WIZCHIP_READ>
 8005f52:	f000 000f 	and.w	r0, r0, #15
 8005f56:	3802      	subs	r0, #2
 8005f58:	2802      	cmp	r0, #2
 8005f5a:	f200 80b0 	bhi.w	80060be <sendto+0x18e>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8005f5e:	f1ba 0f00 	cmp.w	sl, #0
 8005f62:	f000 80af 	beq.w	80060c4 <sendto+0x194>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005f66:	783b      	ldrb	r3, [r7, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005f68:	787a      	ldrb	r2, [r7, #1]
 8005f6a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005f6e:	78bb      	ldrb	r3, [r7, #2]
 8005f70:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005f7a:	9301      	str	r3, [sp, #4]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005f7c:	b3bb      	cbz	r3, 8005fee <sendto+0xbe>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	d03d      	beq.n	8005ffe <sendto+0xce>
   tmp = getSn_SR(sn);
 8005f82:	f105 0803 	add.w	r8, r5, #3
 8005f86:	4640      	mov	r0, r8
 8005f88:	f000 fa30 	bl	80063ec <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005f8c:	2842      	cmp	r0, #66	; 0x42
 8005f8e:	d13e      	bne.n	800600e <sendto+0xde>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005f90:	2204      	movs	r2, #4
 8005f92:	4639      	mov	r1, r7
 8005f94:	f105 000c 	add.w	r0, r5, #12
 8005f98:	2701      	movs	r7, #1
 8005f9a:	f000 fa47 	bl	800642c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005f9e:	f105 0010 	add.w	r0, r5, #16
 8005fa2:	0a21      	lsrs	r1, r4, #8
 8005fa4:	40b7      	lsls	r7, r6
 8005fa6:	f000 fa01 	bl	80063ac <WIZCHIP_WRITE>
 8005faa:	f105 0011 	add.w	r0, r5, #17
 8005fae:	b2e1      	uxtb	r1, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005fb0:	f8df b120 	ldr.w	fp, [pc, #288]	; 80060d4 <sendto+0x1a4>
   setSn_DPORT(sn,port);      
 8005fb4:	f000 f9fa 	bl	80063ac <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005fb8:	f105 001f 	add.w	r0, r5, #31
 8005fbc:	f000 fa16 	bl	80063ec <WIZCHIP_READ>
 8005fc0:	0280      	lsls	r0, r0, #10
 8005fc2:	b280      	uxth	r0, r0
 8005fc4:	4550      	cmp	r0, sl
 8005fc6:	bf28      	it	cs
 8005fc8:	4650      	movcs	r0, sl
 8005fca:	4604      	mov	r4, r0
      freesize = getSn_TX_FSR(sn);
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 fa83 	bl	80064d8 <getSn_TX_FSR>
 8005fd2:	4682      	mov	sl, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	f000 fa09 	bl	80063ec <WIZCHIP_READ>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d075      	beq.n	80060ca <sendto+0x19a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005fde:	f8bb 3000 	ldrh.w	r3, [fp]
 8005fe2:	423b      	tst	r3, r7
 8005fe4:	d01a      	beq.n	800601c <sendto+0xec>
 8005fe6:	4554      	cmp	r4, sl
 8005fe8:	d91a      	bls.n	8006020 <sendto+0xf0>
 8005fea:	2000      	movs	r0, #0
 8005fec:	e04d      	b.n	800608a <sendto+0x15a>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f9fc 	bl	80063ec <WIZCHIP_READ>
 8005ff4:	0740      	lsls	r0, r0, #29
 8005ff6:	d4c2      	bmi.n	8005f7e <sendto+0x4e>
 8005ff8:	f06f 000b 	mvn.w	r0, #11
 8005ffc:	e045      	b.n	800608a <sendto+0x15a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 f9f4 	bl	80063ec <WIZCHIP_READ>
 8006004:	0741      	lsls	r1, r0, #29
 8006006:	d4bc      	bmi.n	8005f82 <sendto+0x52>
 8006008:	f06f 000a 	mvn.w	r0, #10
 800600c:	e03d      	b.n	800608a <sendto+0x15a>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800600e:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 8006012:	2822      	cmp	r0, #34	; 0x22
 8006014:	d0bc      	beq.n	8005f90 <sendto+0x60>
 8006016:	f06f 0006 	mvn.w	r0, #6
 800601a:	e036      	b.n	800608a <sendto+0x15a>
      if(len <= freesize) break;
 800601c:	4554      	cmp	r4, sl
 800601e:	d8d5      	bhi.n	8005fcc <sendto+0x9c>
   };
	wiz_send_data(sn, buf, len);
 8006020:	4622      	mov	r2, r4
 8006022:	4649      	mov	r1, r9
 8006024:	4630      	mov	r0, r6
 8006026:	f000 fac3 	bl	80065b0 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 800602a:	2204      	movs	r2, #4
 800602c:	200f      	movs	r0, #15
 800602e:	eb0d 0102 	add.w	r1, sp, r2
 8006032:	f000 fa27 	bl	8006484 <WIZCHIP_READ_BUF>
      if(taddr == 0)
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	bb53      	cbnz	r3, 8006090 <sendto+0x160>
      {
         getSUBR((uint8_t*)&taddr);
 800603a:	2204      	movs	r2, #4
 800603c:	2005      	movs	r0, #5
 800603e:	eb0d 0102 	add.w	r1, sp, r2
 8006042:	f000 fa1f 	bl	8006484 <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8006046:	2204      	movs	r2, #4
 8006048:	4921      	ldr	r1, [pc, #132]	; (80060d0 <sendto+0x1a0>)
 800604a:	2005      	movs	r0, #5
 800604c:	f000 f9ee 	bl	800642c <WIZCHIP_WRITE_BUF>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006050:	1c6e      	adds	r6, r5, #1
 8006052:	2120      	movs	r1, #32
 8006054:	4630      	mov	r0, r6
 8006056:	f000 f9a9 	bl	80063ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800605a:	4630      	mov	r0, r6
 800605c:	f000 f9c6 	bl	80063ec <WIZCHIP_READ>
 8006060:	2800      	cmp	r0, #0
 8006062:	d1fa      	bne.n	800605a <sendto+0x12a>
   while(1)
   {
      tmp = getSn_IR(sn);
 8006064:	3502      	adds	r5, #2
 8006066:	4628      	mov	r0, r5
 8006068:	f000 f9c0 	bl	80063ec <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 800606c:	06c2      	lsls	r2, r0, #27
 800606e:	d512      	bpl.n	8006096 <sendto+0x166>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8006070:	2110      	movs	r1, #16
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f99a 	bl	80063ac <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8006078:	9b01      	ldr	r3, [sp, #4]
 800607a:	b12b      	cbz	r3, 8006088 <sendto+0x158>
 800607c:	2204      	movs	r2, #4
 800607e:	2005      	movs	r0, #5
 8006080:	eb0d 0102 	add.w	r1, sp, r2
 8006084:	f000 f9d2 	bl	800642c <WIZCHIP_WRITE_BUF>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006088:	4620      	mov	r0, r4
}
 800608a:	b003      	add	sp, #12
 800608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else taddr = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	e7dc      	b.n	8006050 <sendto+0x120>
      else if(tmp & Sn_IR_TIMEOUT)
 8006096:	0703      	lsls	r3, r0, #28
 8006098:	d5e5      	bpl.n	8006066 <sendto+0x136>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800609a:	2108      	movs	r1, #8
 800609c:	4628      	mov	r0, r5
 800609e:	f000 f985 	bl	80063ac <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80060a2:	9b01      	ldr	r3, [sp, #4]
 80060a4:	b12b      	cbz	r3, 80060b2 <sendto+0x182>
 80060a6:	2204      	movs	r2, #4
 80060a8:	2005      	movs	r0, #5
 80060aa:	eb0d 0102 	add.w	r1, sp, r2
 80060ae:	f000 f9bd 	bl	800642c <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 80060b2:	f06f 000c 	mvn.w	r0, #12
 80060b6:	e7e8      	b.n	800608a <sendto+0x15a>
   CHECK_SOCKNUM();
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	e7e5      	b.n	800608a <sendto+0x15a>
         return SOCKERR_SOCKMODE;
 80060be:	f06f 0004 	mvn.w	r0, #4
 80060c2:	e7e2      	b.n	800608a <sendto+0x15a>
   CHECK_SOCKDATA();
 80060c4:	f06f 000d 	mvn.w	r0, #13
 80060c8:	e7df      	b.n	800608a <sendto+0x15a>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80060ca:	f06f 0003 	mvn.w	r0, #3
 80060ce:	e7dc      	b.n	800608a <sendto+0x15a>
 80060d0:	080084f0 	.word	0x080084f0
 80060d4:	20003e1a 	.word	0x20003e1a

080060d8 <recvfrom>:
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 80060d8:	2808      	cmp	r0, #8
{
 80060da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060de:	4604      	mov	r4, r0
 80060e0:	b087      	sub	sp, #28
 80060e2:	468a      	mov	sl, r1
 80060e4:	4691      	mov	r9, r2
 80060e6:	4698      	mov	r8, r3
   CHECK_SOCKNUM();
 80060e8:	f200 80e8 	bhi.w	80062bc <recvfrom+0x1e4>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80060ec:	f100 0740 	add.w	r7, r0, #64	; 0x40
 80060f0:	023f      	lsls	r7, r7, #8
 80060f2:	4638      	mov	r0, r7
 80060f4:	f000 f97a 	bl	80063ec <WIZCHIP_READ>
 80060f8:	f000 020f 	and.w	r2, r0, #15
 80060fc:	4683      	mov	fp, r0
 80060fe:	3a02      	subs	r2, #2
 8006100:	2a02      	cmp	r2, #2
 8006102:	f200 80de 	bhi.w	80062c2 <recvfrom+0x1ea>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8006106:	f1b9 0f00 	cmp.w	r9, #0
 800610a:	f000 80dd 	beq.w	80062c8 <recvfrom+0x1f0>
   if(sock_remained_size[sn] == 0)
 800610e:	4e71      	ldr	r6, [pc, #452]	; (80062d4 <recvfrom+0x1fc>)
 8006110:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 8006114:	2a00      	cmp	r2, #0
 8006116:	d179      	bne.n	800620c <recvfrom+0x134>
 8006118:	2201      	movs	r2, #1
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800611a:	1cfb      	adds	r3, r7, #3
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800611c:	496e      	ldr	r1, [pc, #440]	; (80062d8 <recvfrom+0x200>)
 800611e:	40a2      	lsls	r2, r4
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006120:	9301      	str	r3, [sp, #4]
         pack_len = getSn_RX_RSR(sn);
 8006122:	4620      	mov	r0, r4
 8006124:	9103      	str	r1, [sp, #12]
 8006126:	9202      	str	r2, [sp, #8]
 8006128:	f000 f9f7 	bl	800651a <getSn_RX_RSR>
 800612c:	4605      	mov	r5, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800612e:	9801      	ldr	r0, [sp, #4]
 8006130:	f000 f95c 	bl	80063ec <WIZCHIP_READ>
 8006134:	2800      	cmp	r0, #0
 8006136:	f000 80ca 	beq.w	80062ce <recvfrom+0x1f6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800613a:	9903      	ldr	r1, [sp, #12]
 800613c:	9a02      	ldr	r2, [sp, #8]
 800613e:	8808      	ldrh	r0, [r1, #0]
 8006140:	4210      	tst	r0, r2
 8006142:	d002      	beq.n	800614a <recvfrom+0x72>
 8006144:	b91d      	cbnz	r5, 800614e <recvfrom+0x76>
 8006146:	4628      	mov	r0, r5
 8006148:	e087      	b.n	800625a <recvfrom+0x182>
         if(pack_len != 0) break;
 800614a:	2d00      	cmp	r5, #0
 800614c:	d0e9      	beq.n	8006122 <recvfrom+0x4a>
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800614e:	f00b 0007 	and.w	r0, fp, #7
 8006152:	3701      	adds	r7, #1
 8006154:	2803      	cmp	r0, #3
 8006156:	f000 8083 	beq.w	8006260 <recvfrom+0x188>
 800615a:	2804      	cmp	r0, #4
 800615c:	d058      	beq.n	8006210 <recvfrom+0x138>
 800615e:	2802      	cmp	r0, #2
 8006160:	f040 80a5 	bne.w	80062ae <recvfrom+0x1d6>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8006164:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8006168:	bb83      	cbnz	r3, 80061cc <recvfrom+0xf4>
	      {
   			wiz_recv_data(sn, head, 8);
 800616a:	a904      	add	r1, sp, #16
 800616c:	4620      	mov	r0, r4
 800616e:	2208      	movs	r2, #8
 8006170:	f000 fa72 	bl	8006658 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4638      	mov	r0, r7
 8006178:	f000 f918 	bl	80063ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800617c:	4638      	mov	r0, r7
 800617e:	f000 f935 	bl	80063ec <WIZCHIP_READ>
 8006182:	2800      	cmp	r0, #0
 8006184:	d1fa      	bne.n	800617c <recvfrom+0xa4>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8006186:	f89d 3010 	ldrb.w	r3, [sp, #16]
      			addr[1] = head[1];
      			addr[2] = head[2];
      			addr[3] = head[3];
      			*port = head[4];
 800618a:	f89d 2014 	ldrb.w	r2, [sp, #20]
               addr[0] = head[0];
 800618e:	f888 3000 	strb.w	r3, [r8]
      			addr[1] = head[1];
 8006192:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006196:	f888 3001 	strb.w	r3, [r8, #1]
      			addr[2] = head[2];
 800619a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800619e:	f888 3002 	strb.w	r3, [r8, #2]
      			addr[3] = head[3];
 80061a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80061a6:	f888 3003 	strb.w	r3, [r8, #3]
      			*port = (*port << 8) + head[5];
 80061aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80061ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80061b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061b4:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
 80061b6:	f89d 2016 	ldrb.w	r2, [sp, #22]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80061ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
   			addr[2] = head[2];
   			addr[3] = head[3];
   			sock_remained_size[sn] = head[4];
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80061be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80061c2:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80061c6:	2280      	movs	r2, #128	; 0x80
 80061c8:	4b44      	ldr	r3, [pc, #272]	; (80062dc <recvfrom+0x204>)
 80061ca:	551a      	strb	r2, [r3, r4]
 80061cc:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80061d0:	4651      	mov	r1, sl
 80061d2:	4620      	mov	r0, r4
 80061d4:	454d      	cmp	r5, r9
 80061d6:	bf28      	it	cs
 80061d8:	464d      	movcs	r5, r9
 80061da:	462a      	mov	r2, r5
 80061dc:	f000 fa3c 	bl	8006658 <wiz_recv_data>
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
         sock_remained_size[sn] = pack_len;
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	4638      	mov	r0, r7
 80061e4:	f000 f8e2 	bl	80063ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80061e8:	4638      	mov	r0, r7
 80061ea:	f000 f8ff 	bl	80063ec <WIZCHIP_READ>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d1fa      	bne.n	80061e8 <recvfrom+0x110>
	sock_remained_size[sn] -= pack_len;
 80061f2:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 80061f6:	4a39      	ldr	r2, [pc, #228]	; (80062dc <recvfrom+0x204>)
 80061f8:	1b5b      	subs	r3, r3, r5
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006200:	b113      	cbz	r3, 8006208 <recvfrom+0x130>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8006202:	5d13      	ldrb	r3, [r2, r4]
 8006204:	f043 0301 	orr.w	r3, r3, #1
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8006208:	5513      	strb	r3, [r2, r4]
 800620a:	e79c      	b.n	8006146 <recvfrom+0x6e>
	uint16_t pack_len=0;
 800620c:	2500      	movs	r5, #0
 800620e:	e79e      	b.n	800614e <recvfrom+0x76>
	      if(sock_remained_size[sn] == 0)
 8006210:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1d9      	bne.n	80061cc <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 2);
 8006218:	a904      	add	r1, sp, #16
 800621a:	4620      	mov	r0, r4
 800621c:	2202      	movs	r2, #2
 800621e:	f000 fa1b 	bl	8006658 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006222:	2140      	movs	r1, #64	; 0x40
 8006224:	4638      	mov	r0, r7
 8006226:	f000 f8c1 	bl	80063ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800622a:	4638      	mov	r0, r7
 800622c:	f000 f8de 	bl	80063ec <WIZCHIP_READ>
 8006230:	2800      	cmp	r0, #0
 8006232:	d1fa      	bne.n	800622a <recvfrom+0x152>
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8006234:	f89d 3011 	ldrb.w	r3, [sp, #17]
    			sock_remained_size[sn] = head[0];
 8006238:	f89d 2010 	ldrb.w	r2, [sp, #16]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800623c:	3b02      	subs	r3, #2
 800623e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   			if(sock_remained_size[sn] > 1514) 
 8006242:	f240 52ea 	movw	r2, #1514	; 0x5ea
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8006246:	b29b      	uxth	r3, r3
   			if(sock_remained_size[sn] > 1514) 
 8006248:	4293      	cmp	r3, r2
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800624a:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 800624e:	d9ba      	bls.n	80061c6 <recvfrom+0xee>
   			   close(sn);
 8006250:	4620      	mov	r0, r4
 8006252:	f7ff fc09 	bl	8005a68 <close>
   			   return SOCKFATAL_PACKLEN;
 8006256:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
 800625a:	b007      	add	sp, #28
 800625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   if(sock_remained_size[sn] == 0)
 8006260:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1b1      	bne.n	80061cc <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 6);
 8006268:	a904      	add	r1, sp, #16
 800626a:	4620      	mov	r0, r4
 800626c:	2206      	movs	r2, #6
 800626e:	f000 f9f3 	bl	8006658 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006272:	2140      	movs	r1, #64	; 0x40
 8006274:	4638      	mov	r0, r7
 8006276:	f000 f899 	bl	80063ac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800627a:	4638      	mov	r0, r7
 800627c:	f000 f8b6 	bl	80063ec <WIZCHIP_READ>
 8006280:	2800      	cmp	r0, #0
 8006282:	d1fa      	bne.n	800627a <recvfrom+0x1a2>
   			addr[0] = head[0];
 8006284:	f89d 3010 	ldrb.w	r3, [sp, #16]
   			sock_remained_size[sn] = head[4];
 8006288:	f89d 2014 	ldrb.w	r2, [sp, #20]
   			addr[0] = head[0];
 800628c:	f888 3000 	strb.w	r3, [r8]
   			addr[1] = head[1];
 8006290:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006294:	f888 3001 	strb.w	r3, [r8, #1]
   			addr[2] = head[2];
 8006298:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800629c:	f888 3002 	strb.w	r3, [r8, #2]
   			addr[3] = head[3];
 80062a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80062a4:	f888 3003 	strb.w	r3, [r8, #3]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80062a8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80062ac:	e787      	b.n	80061be <recvfrom+0xe6>
         wiz_recv_ignore(sn, pack_len); // data copy.
 80062ae:	4629      	mov	r1, r5
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fa25 	bl	8006700 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80062b6:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
         break;
 80062ba:	e791      	b.n	80061e0 <recvfrom+0x108>
   CHECK_SOCKNUM();
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e7cb      	b.n	800625a <recvfrom+0x182>
         return SOCKERR_SOCKMODE;
 80062c2:	f06f 0004 	mvn.w	r0, #4
 80062c6:	e7c8      	b.n	800625a <recvfrom+0x182>
   CHECK_SOCKDATA();
 80062c8:	f06f 000d 	mvn.w	r0, #13
 80062cc:	e7c5      	b.n	800625a <recvfrom+0x182>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80062ce:	f06f 0003 	mvn.w	r0, #3
 80062d2:	e7c2      	b.n	800625a <recvfrom+0x182>
 80062d4:	20003e36 	.word	0x20003e36
 80062d8:	20003e1a 	.word	0x20003e1a
 80062dc:	20003e2e 	.word	0x20003e2e

080062e0 <setsockopt>:

int8_t  setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 // M20131220 : Remove warning
 //uint8_t tmp;
   CHECK_SOCKNUM();
 80062e0:	2808      	cmp	r0, #8
{
 80062e2:	b538      	push	{r3, r4, r5, lr}
 80062e4:	4615      	mov	r5, r2
   CHECK_SOCKNUM();
 80062e6:	d857      	bhi.n	8006398 <setsockopt+0xb8>
   switch(sotype)
 80062e8:	3901      	subs	r1, #1
 80062ea:	2905      	cmp	r1, #5
 80062ec:	d857      	bhi.n	800639e <setsockopt+0xbe>
 80062ee:	e8df f001 	tbb	[pc, r1]
 80062f2:	0b03      	.short	0x0b03
 80062f4:	33271d11 	.word	0x33271d11
   {
      case SO_TTL:
         setSn_TTL(sn,*(uint8_t*)arg);
 80062f8:	0200      	lsls	r0, r0, #8
 80062fa:	7811      	ldrb	r1, [r2, #0]
 80062fc:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8006300:	3016      	adds	r0, #22
         break;
      case SO_DESTIP:
         setSn_DIPR(sn, (uint8_t*)arg);
         break;
      case SO_DESTPORT:
         setSn_DPORT(sn, *(uint16_t*)arg);
 8006302:	f000 f853 	bl	80063ac <WIZCHIP_WRITE>
 8006306:	e019      	b.n	800633c <setsockopt+0x5c>
         setSn_TOS(sn,*(uint8_t*)arg);
 8006308:	0200      	lsls	r0, r0, #8
 800630a:	7811      	ldrb	r1, [r2, #0]
 800630c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8006310:	3015      	adds	r0, #21
 8006312:	e7f6      	b.n	8006302 <setsockopt+0x22>
         setSn_MSSR(sn,*(uint16_t*)arg);
 8006314:	3040      	adds	r0, #64	; 0x40
 8006316:	8811      	ldrh	r1, [r2, #0]
 8006318:	0204      	lsls	r4, r0, #8
 800631a:	0a09      	lsrs	r1, r1, #8
 800631c:	f104 0012 	add.w	r0, r4, #18
 8006320:	f000 f844 	bl	80063ac <WIZCHIP_WRITE>
 8006324:	7829      	ldrb	r1, [r5, #0]
 8006326:	f104 0013 	add.w	r0, r4, #19
 800632a:	e7ea      	b.n	8006302 <setsockopt+0x22>
         setSn_DIPR(sn, (uint8_t*)arg);
 800632c:	0200      	lsls	r0, r0, #8
 800632e:	2204      	movs	r2, #4
 8006330:	4629      	mov	r1, r5
 8006332:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8006336:	300c      	adds	r0, #12
 8006338:	f000 f878 	bl	800642c <WIZCHIP_WRITE_BUF>
   #endif      
#endif   
      default:
         return SOCKERR_ARG;
   }   
   return SOCK_OK;
 800633c:	2001      	movs	r0, #1
 800633e:	bd38      	pop	{r3, r4, r5, pc}
         setSn_DPORT(sn, *(uint16_t*)arg);
 8006340:	3040      	adds	r0, #64	; 0x40
 8006342:	8811      	ldrh	r1, [r2, #0]
 8006344:	0204      	lsls	r4, r0, #8
 8006346:	0a09      	lsrs	r1, r1, #8
 8006348:	f104 0010 	add.w	r0, r4, #16
 800634c:	f000 f82e 	bl	80063ac <WIZCHIP_WRITE>
 8006350:	7829      	ldrb	r1, [r5, #0]
 8006352:	f104 0011 	add.w	r0, r4, #17
 8006356:	e7d4      	b.n	8006302 <setsockopt+0x22>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8006358:	3040      	adds	r0, #64	; 0x40
 800635a:	0204      	lsls	r4, r0, #8
 800635c:	4620      	mov	r0, r4
 800635e:	f000 f845 	bl	80063ec <WIZCHIP_READ>
 8006362:	f000 000f 	and.w	r0, r0, #15
 8006366:	2801      	cmp	r0, #1
 8006368:	d11c      	bne.n	80063a4 <setsockopt+0xc4>
            setSn_CR(sn,Sn_CR_SEND_KEEP);
 800636a:	1c65      	adds	r5, r4, #1
               if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800636c:	3402      	adds	r4, #2
            setSn_CR(sn,Sn_CR_SEND_KEEP);
 800636e:	2122      	movs	r1, #34	; 0x22
 8006370:	4628      	mov	r0, r5
 8006372:	f000 f81b 	bl	80063ac <WIZCHIP_WRITE>
            while(getSn_CR(sn) != 0)
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f838 	bl	80063ec <WIZCHIP_READ>
 800637c:	2800      	cmp	r0, #0
 800637e:	d0dd      	beq.n	800633c <setsockopt+0x5c>
               if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f833 	bl	80063ec <WIZCHIP_READ>
 8006386:	0703      	lsls	r3, r0, #28
 8006388:	d5f5      	bpl.n	8006376 <setsockopt+0x96>
         			setSn_IR(sn, Sn_IR_TIMEOUT);
 800638a:	4620      	mov	r0, r4
 800638c:	2108      	movs	r1, #8
 800638e:	f000 f80d 	bl	80063ac <WIZCHIP_WRITE>
                  return SOCKERR_TIMEOUT;
 8006392:	f06f 000c 	mvn.w	r0, #12
 8006396:	bd38      	pop	{r3, r4, r5, pc}
   CHECK_SOCKNUM();
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	bd38      	pop	{r3, r4, r5, pc}
         return SOCKERR_ARG;
 800639e:	f06f 0009 	mvn.w	r0, #9
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
         CHECK_SOCKMODE(Sn_MR_TCP);
 80063a4:	f06f 0004 	mvn.w	r0, #4
}
 80063a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080063ac <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5200)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80063ac:	b570      	push	{r4, r5, r6, lr}
	WIZCHIP_CRITICAL_ENTER();
 80063ae:	4c0e      	ldr	r4, [pc, #56]	; (80063e8 <WIZCHIP_WRITE+0x3c>)
{
 80063b0:	4605      	mov	r5, r0
 80063b2:	460e      	mov	r6, r1
	WIZCHIP_CRITICAL_ENTER();
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80063bc:	69e3      	ldr	r3, [r4, #28]
 80063be:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80063c2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80063c4:	69e3      	ldr	r3, [r4, #28]
 80063c6:	b2e8      	uxtb	r0, r5
 80063c8:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(_W5200_SPI_WRITE_);  // Data write command and Write data length upper
 80063ca:	69e3      	ldr	r3, [r4, #28]
 80063cc:	2080      	movs	r0, #128	; 0x80
 80063ce:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x01);  // Write data length lower
 80063d0:	69e3      	ldr	r3, [r4, #28]
 80063d2:	2001      	movs	r0, #1
 80063d4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 80063d6:	69e3      	ldr	r3, [r4, #28]
 80063d8:	4630      	mov	r0, r6
 80063da:	4798      	blx	r3

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!"
#endif

   WIZCHIP.CS._deselect();
 80063dc:	6963      	ldr	r3, [r4, #20]
 80063de:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80063e0:	68e3      	ldr	r3, [r4, #12]
}
 80063e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   WIZCHIP_CRITICAL_EXIT();
 80063e6:	4718      	bx	r3
 80063e8:	20000010 	.word	0x20000010

080063ec <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80063ec:	b538      	push	{r3, r4, r5, lr}
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80063ee:	4c0e      	ldr	r4, [pc, #56]	; (8006428 <WIZCHIP_READ+0x3c>)
{
 80063f0:	4605      	mov	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80063fa:	69e3      	ldr	r3, [r4, #28]
 80063fc:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8006400:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006402:	69e3      	ldr	r3, [r4, #28]
 8006404:	b2e8      	uxtb	r0, r5
 8006406:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(_W5200_SPI_READ_);                             // Read data length upper    
 8006408:	69e3      	ldr	r3, [r4, #28]
 800640a:	2000      	movs	r0, #0
 800640c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x01);                             // Data length lower  
 800640e:	69e3      	ldr	r3, [r4, #28]
 8006410:	2001      	movs	r0, #1
 8006412:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8006414:	69a3      	ldr	r3, [r4, #24]
 8006416:	4798      	blx	r3
   	
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8006418:	6963      	ldr	r3, [r4, #20]
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800641a:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 800641c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	4798      	blx	r3
   return ret;
}
 8006422:	4628      	mov	r0, r5
 8006424:	bd38      	pop	{r3, r4, r5, pc}
 8006426:	bf00      	nop
 8006428:	20000010 	.word	0x20000010

0800642c <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint16_t i = 0;
   WIZCHIP_CRITICAL_ENTER();
 8006430:	4c13      	ldr	r4, [pc, #76]	; (8006480 <WIZCHIP_WRITE_BUF+0x54>)
{
 8006432:	4607      	mov	r7, r0
 8006434:	4615      	mov	r5, r2
 8006436:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8006438:	68a3      	ldr	r3, [r4, #8]
 800643a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006440:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8006444:	69e3      	ldr	r3, [r4, #28]
 8006446:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006448:	69e3      	ldr	r3, [r4, #28]
 800644a:	b2f8      	uxtb	r0, r7
 800644c:	1e77      	subs	r7, r6, #1
 800644e:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte(_W5200_SPI_WRITE_ | ((len & 0x7F00) >> 8));         // Write data op code and length upper    
 8006450:	69e3      	ldr	r3, [r4, #28]
 8006452:	0a28      	lsrs	r0, r5, #8
 8006454:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006458:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((len & 0x00FF) >> 0);         // length lower
 800645a:	69e3      	ldr	r3, [r4, #28]
 800645c:	b2e8      	uxtb	r0, r5
 800645e:	3d01      	subs	r5, #1
 8006460:	4798      	blx	r3
 8006462:	4435      	add	r5, r6
  for(i = 0; i < len; i++)
 8006464:	42af      	cmp	r7, r5
 8006466:	d105      	bne.n	8006474 <WIZCHIP_WRITE_BUF+0x48>
   WIZCHIP_WRITE(MR, WIZCHIP_READ(MR) & ~MR_AI);   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8006468:	6963      	ldr	r3, [r4, #20]
 800646a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800646c:	68e3      	ldr	r3, [r4, #12]
}
 800646e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   WIZCHIP_CRITICAL_EXIT();
 8006472:	4718      	bx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8006474:	69e3      	ldr	r3, [r4, #28]
 8006476:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 800647a:	4798      	blx	r3
 800647c:	e7f2      	b.n	8006464 <WIZCHIP_WRITE_BUF+0x38>
 800647e:	bf00      	nop
 8006480:	20000010 	.word	0x20000010

08006484 <WIZCHIP_READ_BUF>:

/**
@brief  This function reads into W5200 memory(Buffer)
*/ 
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint16_t i = 0;
   WIZCHIP_CRITICAL_ENTER();
 8006488:	4c12      	ldr	r4, [pc, #72]	; (80064d4 <WIZCHIP_READ_BUF+0x50>)
{
 800648a:	4607      	mov	r7, r0
 800648c:	4615      	mov	r5, r2
 800648e:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8006490:	68a3      	ldr	r3, [r4, #8]
 8006492:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006498:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800649c:	69e3      	ldr	r3, [r4, #28]
 800649e:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80064a0:	69e3      	ldr	r3, [r4, #28]
 80064a2:	b2f8      	uxtb	r0, r7
 80064a4:	1e77      	subs	r7, r6, #1
 80064a6:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte( _W5200_SPI_READ_ | ((len & 0x7F00) >> 8));         // Write data op code and length upper    
 80064a8:	f3c5 2006 	ubfx	r0, r5, #8, #7
 80064ac:	69e3      	ldr	r3, [r4, #28]
 80064ae:	4798      	blx	r3
  WIZCHIP.IF.SPI._write_byte((len & 0x00FF) >> 0);         // length lower
 80064b0:	69e3      	ldr	r3, [r4, #28]
 80064b2:	b2e8      	uxtb	r0, r5
 80064b4:	3d01      	subs	r5, #1
 80064b6:	4798      	blx	r3
 80064b8:	4435      	add	r5, r6
  for(i = 0; i < len; i++)
 80064ba:	42af      	cmp	r7, r5
 80064bc:	d105      	bne.n	80064ca <WIZCHIP_READ_BUF+0x46>
   setMR(getMR() & ~MR_AI); 
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5200. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80064be:	6963      	ldr	r3, [r4, #20]
 80064c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80064c2:	68e3      	ldr	r3, [r4, #12]
}
 80064c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   WIZCHIP_CRITICAL_EXIT();
 80064c8:	4718      	bx	r3
    pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80064ca:	69a3      	ldr	r3, [r4, #24]
 80064cc:	4798      	blx	r3
 80064ce:	f807 0f01 	strb.w	r0, [r7, #1]!
 80064d2:	e7f2      	b.n	80064ba <WIZCHIP_READ_BUF+0x36>
 80064d4:	20000010 	.word	0x20000010

080064d8 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80064da:	f100 0640 	add.w	r6, r0, #64	; 0x40
   uint16_t val=0,val1=0;
 80064de:	2400      	movs	r4, #0
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80064e0:	0236      	lsls	r6, r6, #8
 80064e2:	f106 0720 	add.w	r7, r6, #32
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80064e6:	3621      	adds	r6, #33	; 0x21
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ff7f 	bl	80063ec <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80064ee:	0200      	lsls	r0, r0, #8
 80064f0:	b285      	uxth	r5, r0
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ff7a 	bl	80063ec <WIZCHIP_READ>
 80064f8:	4405      	add	r5, r0
 80064fa:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 80064fc:	b14d      	cbz	r5, 8006512 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80064fe:	4638      	mov	r0, r7
 8006500:	f7ff ff74 	bl	80063ec <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8006504:	0200      	lsls	r0, r0, #8
 8006506:	b284      	uxth	r4, r0
 8006508:	4630      	mov	r0, r6
 800650a:	f7ff ff6f 	bl	80063ec <WIZCHIP_READ>
 800650e:	4404      	add	r4, r0
 8006510:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8006512:	42ac      	cmp	r4, r5
 8006514:	d1e8      	bne.n	80064e8 <getSn_TX_FSR+0x10>
   return val;
}
 8006516:	4620      	mov	r0, r4
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800651a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800651a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800651c:	f100 0640 	add.w	r6, r0, #64	; 0x40
   uint16_t val=0,val1=0;
 8006520:	2400      	movs	r4, #0
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006522:	0236      	lsls	r6, r6, #8
 8006524:	f106 0726 	add.w	r7, r6, #38	; 0x26
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006528:	3627      	adds	r6, #39	; 0x27
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800652a:	4638      	mov	r0, r7
 800652c:	f7ff ff5e 	bl	80063ec <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006530:	0200      	lsls	r0, r0, #8
 8006532:	b285      	uxth	r5, r0
 8006534:	4630      	mov	r0, r6
 8006536:	f7ff ff59 	bl	80063ec <WIZCHIP_READ>
 800653a:	4405      	add	r5, r0
 800653c:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 800653e:	b14d      	cbz	r5, 8006554 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ff53 	bl	80063ec <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006546:	0200      	lsls	r0, r0, #8
 8006548:	b284      	uxth	r4, r0
 800654a:	4630      	mov	r0, r6
 800654c:	f7ff ff4e 	bl	80063ec <WIZCHIP_READ>
 8006550:	4404      	add	r4, r0
 8006552:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8006554:	42ac      	cmp	r4, r5
 8006556:	d1e8      	bne.n	800652a <getSn_RX_RSR+0x10>
   return val;
}
 8006558:	4620      	mov	r0, r4
 800655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800655c <getSn_RxBASE>:
/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////

uint16_t getSn_RxBASE(uint8_t sn)
{
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4606      	mov	r6, r0
   int8_t  i;
   uint16_t rxbase = _WIZCHIP_IO_RXBUF_;
   for(i = 0; i < sn; i++)
 8006560:	2500      	movs	r5, #0
   uint16_t rxbase = _WIZCHIP_IO_RXBUF_;
 8006562:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   for(i = 0; i < sn; i++)
 8006566:	b268      	sxtb	r0, r5
 8006568:	3501      	adds	r5, #1
 800656a:	42b0      	cmp	r0, r6
 800656c:	db01      	blt.n	8006572 <getSn_RxBASE+0x16>
      rxbase += getSn_RxMAX(i);
   return rxbase;
}
 800656e:	4620      	mov	r0, r4
 8006570:	bd70      	pop	{r4, r5, r6, pc}
      rxbase += getSn_RxMAX(i);
 8006572:	0200      	lsls	r0, r0, #8
 8006574:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8006578:	301e      	adds	r0, #30
 800657a:	f7ff ff37 	bl	80063ec <WIZCHIP_READ>
 800657e:	eb04 2480 	add.w	r4, r4, r0, lsl #10
 8006582:	b2a4      	uxth	r4, r4
 8006584:	e7ef      	b.n	8006566 <getSn_RxBASE+0xa>

08006586 <getSn_TxBASE>:

uint16_t getSn_TxBASE(uint8_t sn)
{
 8006586:	b570      	push	{r4, r5, r6, lr}
 8006588:	4606      	mov	r6, r0
   int8_t  i;
   uint16_t txbase = _WIZCHIP_IO_TXBUF_;
   for(i = 0; i < sn; i++)
 800658a:	2500      	movs	r5, #0
   uint16_t txbase = _WIZCHIP_IO_TXBUF_;
 800658c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   for(i = 0; i < sn; i++)
 8006590:	b268      	sxtb	r0, r5
 8006592:	3501      	adds	r5, #1
 8006594:	42b0      	cmp	r0, r6
 8006596:	db01      	blt.n	800659c <getSn_TxBASE+0x16>
      txbase += getSn_TxMAX(i);
   return txbase;
}
 8006598:	4620      	mov	r0, r4
 800659a:	bd70      	pop	{r4, r5, r6, pc}
      txbase += getSn_TxMAX(i);
 800659c:	0200      	lsls	r0, r0, #8
 800659e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 80065a2:	301f      	adds	r0, #31
 80065a4:	f7ff ff22 	bl	80063ec <WIZCHIP_READ>
 80065a8:	eb04 2480 	add.w	r4, r4, r0, lsl #10
 80065ac:	b2a4      	uxth	r4, r4
 80065ae:	e7ef      	b.n	8006590 <getSn_TxBASE+0xa>

080065b0 <wiz_send_data>:
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint8_t * dst_ptr;

  ptr = getSn_TX_WR(sn);
 80065b0:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 80065b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ptr = getSn_TX_WR(sn);
 80065b8:	ea4f 2903 	mov.w	r9, r3, lsl #8
{
 80065bc:	4680      	mov	r8, r0
 80065be:	460e      	mov	r6, r1
 80065c0:	4617      	mov	r7, r2
  ptr = getSn_TX_WR(sn);
 80065c2:	f109 0a24 	add.w	sl, r9, #36	; 0x24
 80065c6:	4650      	mov	r0, sl
 80065c8:	f7ff ff10 	bl	80063ec <WIZCHIP_READ>
 80065cc:	f109 0325 	add.w	r3, r9, #37	; 0x25
 80065d0:	4605      	mov	r5, r0


  dst_mask = (uint32_t)ptr & getSn_TxMASK(sn);
 80065d2:	f109 091f 	add.w	r9, r9, #31
  ptr = getSn_TX_WR(sn);
 80065d6:	4618      	mov	r0, r3
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	f7ff ff07 	bl	80063ec <WIZCHIP_READ>
 80065de:	eb00 2505 	add.w	r5, r0, r5, lsl #8
  dst_mask = (uint32_t)ptr & getSn_TxMASK(sn);
 80065e2:	4648      	mov	r0, r9
 80065e4:	f7ff ff02 	bl	80063ec <WIZCHIP_READ>
 80065e8:	0284      	lsls	r4, r0, #10
  dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn) + dst_mask);
 80065ea:	4640      	mov	r0, r8
  ptr = getSn_TX_WR(sn);
 80065ec:	b2ad      	uxth	r5, r5
  dst_mask = (uint32_t)ptr & getSn_TxMASK(sn);
 80065ee:	3c01      	subs	r4, #1
  dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn) + dst_mask);
 80065f0:	f7ff ffc9 	bl	8006586 <getSn_TxBASE>
  dst_mask = (uint32_t)ptr & getSn_TxMASK(sn);
 80065f4:	402c      	ands	r4, r5
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 80065f6:	19e2      	adds	r2, r4, r7
  dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn) + dst_mask);
 80065f8:	eb00 0b04 	add.w	fp, r0, r4
  if (dst_mask + len > getSn_TxMAX(sn)) 
 80065fc:	4648      	mov	r0, r9
 80065fe:	9201      	str	r2, [sp, #4]
 8006600:	f7ff fef4 	bl	80063ec <WIZCHIP_READ>
 8006604:	9a01      	ldr	r2, [sp, #4]
 8006606:	ebb2 2f80 	cmp.w	r2, r0, lsl #10
 800660a:	dd21      	ble.n	8006650 <wiz_send_data+0xa0>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 800660c:	4648      	mov	r0, r9
 800660e:	f7ff feed 	bl	80063ec <WIZCHIP_READ>
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 8006612:	4631      	mov	r1, r6
    size = getSn_TxMAX(sn) - dst_mask;
 8006614:	ebc4 2480 	rsb	r4, r4, r0, lsl #10
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 8006618:	4658      	mov	r0, fp
    size = getSn_TxMAX(sn) - dst_mask;
 800661a:	b2a4      	uxth	r4, r4
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 800661c:	4622      	mov	r2, r4
    wizdata += size;
 800661e:	4426      	add	r6, r4
    size = len - size;
 8006620:	1b3c      	subs	r4, r7, r4
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 8006622:	f7ff ff03 	bl	800642c <WIZCHIP_WRITE_BUF>
    dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn));
 8006626:	4640      	mov	r0, r8
    size = len - size;
 8006628:	b2a4      	uxth	r4, r4
    dst_ptr = (uint8_t*)((uint32_t)getSn_TxBASE(sn));
 800662a:	f7ff ffac 	bl	8006586 <getSn_TxBASE>
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, size);
 800662e:	4631      	mov	r1, r6
 8006630:	4622      	mov	r2, r4
  else
  {
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, len);
  }

  ptr += len;
 8006632:	443d      	add	r5, r7
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, len);
 8006634:	f7ff fefa 	bl	800642c <WIZCHIP_WRITE_BUF>

  setSn_TX_WR(sn, ptr);  
 8006638:	4650      	mov	r0, sl
  ptr += len;
 800663a:	b2ad      	uxth	r5, r5
  setSn_TX_WR(sn, ptr);  
 800663c:	0a29      	lsrs	r1, r5, #8
 800663e:	f7ff feb5 	bl	80063ac <WIZCHIP_WRITE>
 8006642:	9800      	ldr	r0, [sp, #0]
 8006644:	b2e9      	uxtb	r1, r5
}
 8006646:	b003      	add	sp, #12
 8006648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSn_TX_WR(sn, ptr);  
 800664c:	f7ff beae 	b.w	80063ac <WIZCHIP_WRITE>
    WIZCHIP_WRITE_BUF((uint32_t)dst_ptr, wizdata, len);
 8006650:	463a      	mov	r2, r7
 8006652:	4631      	mov	r1, r6
 8006654:	4658      	mov	r0, fp
 8006656:	e7ec      	b.n	8006632 <wiz_send_data+0x82>

08006658 <wiz_recv_data>:
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint8_t * src_ptr;

  ptr = getSn_RX_RD(sn);
 8006658:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 800665c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ptr = getSn_RX_RD(sn);
 8006660:	ea4f 2903 	mov.w	r9, r3, lsl #8
{
 8006664:	4680      	mov	r8, r0
 8006666:	460e      	mov	r6, r1
 8006668:	4617      	mov	r7, r2
  ptr = getSn_RX_RD(sn);
 800666a:	f109 0a28 	add.w	sl, r9, #40	; 0x28
 800666e:	4650      	mov	r0, sl
 8006670:	f7ff febc 	bl	80063ec <WIZCHIP_READ>
 8006674:	f109 0329 	add.w	r3, r9, #41	; 0x29
 8006678:	4605      	mov	r5, r0
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800667a:	f109 091e 	add.w	r9, r9, #30
  ptr = getSn_RX_RD(sn);
 800667e:	4618      	mov	r0, r3
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	f7ff feb3 	bl	80063ec <WIZCHIP_READ>
 8006686:	eb00 2505 	add.w	r5, r0, r5, lsl #8
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800668a:	4648      	mov	r0, r9
 800668c:	f7ff feae 	bl	80063ec <WIZCHIP_READ>
 8006690:	0284      	lsls	r4, r0, #10
  src_ptr = (uint8_t *)((uint32_t)getSn_RxBASE(sn) + src_mask);
 8006692:	4640      	mov	r0, r8
  ptr = getSn_RX_RD(sn);
 8006694:	b2ad      	uxth	r5, r5
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 8006696:	3c01      	subs	r4, #1
  src_ptr = (uint8_t *)((uint32_t)getSn_RxBASE(sn) + src_mask);
 8006698:	f7ff ff60 	bl	800655c <getSn_RxBASE>
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800669c:	402c      	ands	r4, r5
  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 800669e:	19e2      	adds	r2, r4, r7
  src_ptr = (uint8_t *)((uint32_t)getSn_RxBASE(sn) + src_mask);
 80066a0:	eb00 0b04 	add.w	fp, r0, r4
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 80066a4:	4648      	mov	r0, r9
 80066a6:	9201      	str	r2, [sp, #4]
 80066a8:	f7ff fea0 	bl	80063ec <WIZCHIP_READ>
 80066ac:	9a01      	ldr	r2, [sp, #4]
 80066ae:	ebb2 2f80 	cmp.w	r2, r0, lsl #10
 80066b2:	dd21      	ble.n	80066f8 <wiz_recv_data+0xa0>
  {
    size = getSn_RxMAX(sn) - src_mask;
 80066b4:	4648      	mov	r0, r9
 80066b6:	f7ff fe99 	bl	80063ec <WIZCHIP_READ>
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80066ba:	4631      	mov	r1, r6
    size = getSn_RxMAX(sn) - src_mask;
 80066bc:	ebc4 2480 	rsb	r4, r4, r0, lsl #10
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80066c0:	4658      	mov	r0, fp
    size = getSn_RxMAX(sn) - src_mask;
 80066c2:	b2a4      	uxth	r4, r4
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80066c4:	4622      	mov	r2, r4
    wizdata += size;
 80066c6:	4426      	add	r6, r4
    size = len - size;
 80066c8:	1b3c      	subs	r4, r7, r4
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80066ca:	f7ff fedb 	bl	8006484 <WIZCHIP_READ_BUF>
    src_ptr = (uint8_t*)((uint32_t)getSn_RxBASE(sn));
 80066ce:	4640      	mov	r0, r8
    size = len - size;
 80066d0:	b2a4      	uxth	r4, r4
    src_ptr = (uint8_t*)((uint32_t)getSn_RxBASE(sn));
 80066d2:	f7ff ff43 	bl	800655c <getSn_RxBASE>
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80066d6:	4631      	mov	r1, r6
 80066d8:	4622      	mov	r2, r4
  else
  {
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, len);
  }
    
  ptr += len;
 80066da:	443d      	add	r5, r7
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, len);
 80066dc:	f7ff fed2 	bl	8006484 <WIZCHIP_READ_BUF>
  
  setSn_RX_RD(sn, ptr);
 80066e0:	4650      	mov	r0, sl
  ptr += len;
 80066e2:	b2ad      	uxth	r5, r5
  setSn_RX_RD(sn, ptr);
 80066e4:	0a29      	lsrs	r1, r5, #8
 80066e6:	f7ff fe61 	bl	80063ac <WIZCHIP_WRITE>
 80066ea:	9800      	ldr	r0, [sp, #0]
 80066ec:	b2e9      	uxtb	r1, r5
}
 80066ee:	b003      	add	sp, #12
 80066f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSn_RX_RD(sn, ptr);
 80066f4:	f7ff be5a 	b.w	80063ac <WIZCHIP_WRITE>
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, len);
 80066f8:	463a      	mov	r2, r7
 80066fa:	4631      	mov	r1, r6
 80066fc:	4658      	mov	r0, fp
 80066fe:	e7ec      	b.n	80066da <wiz_recv_data+0x82>

08006700 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8006700:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 8006704:	f100 0640 	add.w	r6, r0, #64	; 0x40
{
 8006708:	460c      	mov	r4, r1
  ptr = getSn_RX_RD(sn);
 800670a:	0236      	lsls	r6, r6, #8
 800670c:	f106 0728 	add.w	r7, r6, #40	; 0x28
 8006710:	3629      	adds	r6, #41	; 0x29
 8006712:	4638      	mov	r0, r7
 8006714:	f7ff fe6a 	bl	80063ec <WIZCHIP_READ>
 8006718:	4680      	mov	r8, r0
 800671a:	4630      	mov	r0, r6
 800671c:	f7ff fe66 	bl	80063ec <WIZCHIP_READ>
  
  ptr += len;
 8006720:	4404      	add	r4, r0
  setSn_RX_RD(sn,ptr);
 8006722:	4638      	mov	r0, r7
  ptr += len;
 8006724:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8006728:	b2a4      	uxth	r4, r4
  setSn_RX_RD(sn,ptr);
 800672a:	0a21      	lsrs	r1, r4, #8
 800672c:	f7ff fe3e 	bl	80063ac <WIZCHIP_WRITE>
 8006730:	4630      	mov	r0, r6
 8006732:	b2e1      	uxtb	r1, r4
}
 8006734:	e8bd 41d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, lr}
  setSn_RX_RD(sn,ptr);
 8006738:	f7ff be38 	b.w	80063ac <WIZCHIP_WRITE>

0800673c <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800673c:	4770      	bx	lr
	...

08006740 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {
	PIN_nCS1(RESET);
 8006740:	2200      	movs	r2, #0
 8006742:	2140      	movs	r1, #64	; 0x40
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <wizchip_cs_select+0xc>)
 8006746:	f7fa bf23 	b.w	8001590 <HAL_GPIO_WritePin>
 800674a:	bf00      	nop
 800674c:	58020400 	.word	0x58020400

08006750 <wizchip_cs_deselect>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {
	PIN_nCS1(SET);
 8006750:	2201      	movs	r2, #1
 8006752:	2140      	movs	r1, #64	; 0x40
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <wizchip_cs_deselect+0xc>)
 8006756:	f7fa bf1b 	b.w	8001590 <HAL_GPIO_WritePin>
 800675a:	bf00      	nop
 800675c:	58020400 	.word	0x58020400

08006760 <wizchip_spi_writebyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb)
{
 8006760:	b507      	push	{r0, r1, r2, lr}
 8006762:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&hspi3, &wb, 1, 20);
 8006764:	2314      	movs	r3, #20
 8006766:	2201      	movs	r2, #1
{
 8006768:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi3, &wb, 1, 20);
 800676c:	4802      	ldr	r0, [pc, #8]	; (8006778 <wizchip_spi_writebyte+0x18>)
 800676e:	f7fc faef 	bl	8002d50 <HAL_SPI_Transmit>
}
 8006772:	b003      	add	sp, #12
 8006774:	f85d fb04 	ldr.w	pc, [sp], #4
 8006778:	20004134 	.word	0x20004134

0800677c <wizchip_spi_readbyte>:
{
 800677c:	b507      	push	{r0, r1, r2, lr}
	HAL_SPI_Receive(&hspi3,&buf,1,20);
 800677e:	2314      	movs	r3, #20
 8006780:	2201      	movs	r2, #1
 8006782:	f10d 0107 	add.w	r1, sp, #7
 8006786:	4804      	ldr	r0, [pc, #16]	; (8006798 <wizchip_spi_readbyte+0x1c>)
 8006788:	f7fc fd9d 	bl	80032c6 <HAL_SPI_Receive>
}
 800678c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006790:	b003      	add	sp, #12
 8006792:	f85d fb04 	ldr.w	pc, [sp], #4
 8006796:	bf00      	nop
 8006798:	20004134 	.word	0x20004134

0800679c <wizchip_cris_enter>:
 800679c:	4770      	bx	lr
	...

080067a0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80067a4:	4601      	mov	r1, r0
 80067a6:	2206      	movs	r2, #6
 80067a8:	2009      	movs	r0, #9
 80067aa:	f7ff fe3f 	bl	800642c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80067ae:	2204      	movs	r2, #4
 80067b0:	f104 010e 	add.w	r1, r4, #14
 80067b4:	2001      	movs	r0, #1
 80067b6:	f7ff fe39 	bl	800642c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80067ba:	2204      	movs	r2, #4
 80067bc:	f104 010a 	add.w	r1, r4, #10
 80067c0:	2005      	movs	r0, #5
 80067c2:	f7ff fe33 	bl	800642c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80067c6:	2204      	movs	r2, #4
 80067c8:	1da1      	adds	r1, r4, #6
 80067ca:	200f      	movs	r0, #15
 80067cc:	f7ff fe2e 	bl	800642c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <wizchip_setnetinfo+0x4c>)
 80067d2:	7ca2      	ldrb	r2, [r4, #18]
 80067d4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80067d6:	7ce2      	ldrb	r2, [r4, #19]
 80067d8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80067da:	7d22      	ldrb	r2, [r4, #20]
 80067dc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80067de:	7d62      	ldrb	r2, [r4, #21]
 80067e0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80067e2:	7da2      	ldrb	r2, [r4, #22]
 80067e4:	4b02      	ldr	r3, [pc, #8]	; (80067f0 <wizchip_setnetinfo+0x50>)
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	20003e47 	.word	0x20003e47
 80067f0:	20003e46 	.word	0x20003e46

080067f4 <vTimerCallback>:
	data[4] = data_value;
	HAL_SPI_Transmit(hspi, data, 5, 10);
	PIN_nCS1(SET);
}

void vTimerCallback(TimerHandle_t Timer){
 80067f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  	extern IWDG_HandleTypeDef hiwdg1;
	HAL_IWDG_Refresh(&hiwdg1);
 80067f6:	480f      	ldr	r0, [pc, #60]	; (8006834 <vTimerCallback+0x40>)
 80067f8:	f7fa ff0f 	bl	800161a <HAL_IWDG_Refresh>
	static a=0;
	LED_VD6(a^=1);
 80067fc:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <vTimerCallback+0x44>)
 80067fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006802:	480e      	ldr	r0, [pc, #56]	; (800683c <vTimerCallback+0x48>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	f082 0201 	eor.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	f7fa febf 	bl	8001590 <HAL_GPIO_WritePin>
	uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 8006812:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <vTimerCallback+0x4c>)
 8006814:	ab02      	add	r3, sp, #8
 8006816:	6810      	ldr	r0, [r2, #0]
 8006818:	6851      	ldr	r1, [r2, #4]
	extern FDCAN_HandleTypeDef hfdcan2;
	can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER4);
 800681a:	2208      	movs	r2, #8
	uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 800681c:	c303      	stmia	r3!, {r0, r1}
	can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER4);
 800681e:	2310      	movs	r3, #16
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	4808      	ldr	r0, [pc, #32]	; (8006844 <vTimerCallback+0x50>)
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	ab02      	add	r3, sp, #8
 8006828:	f001 fb96 	bl	8007f58 <can_tx_func>
}
 800682c:	b005      	add	sp, #20
 800682e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006832:	bf00      	nop
 8006834:	20004124 	.word	0x20004124
 8006838:	20003e4c 	.word	0x20003e4c
 800683c:	58020800 	.word	0x58020800
 8006840:	080084f5 	.word	0x080084f5
 8006844:	20004300 	.word	0x20004300

08006848 <fobos_eth_protocol_send>:
void fobos_eth_protocol_send(uint8_t CMD, uint8_t bytes_in_packet_N, fobos_protocol_buf_u *fobos_eth_buf){//убрать строку с [0]=0!
 8006848:	4613      	mov	r3, r2
	fobos_eth_buf->fobos_protocol_buf_t.CMD = CMD;
 800684a:	7010      	strb	r0, [r2, #0]
	fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = bytes_in_packet_N;
 800684c:	7051      	strb	r1, [r2, #1]
	send(SOCKET0,fobos_eth_buf->data_to_transmit,bytes_in_packet_N+2);
 800684e:	2000      	movs	r0, #0
 8006850:	1c8a      	adds	r2, r1, #2
 8006852:	4619      	mov	r1, r3
 8006854:	f7ff ba42 	b.w	8005cdc <send>

08006858 <feedback_params>:
void feedback_params(fobos_protocol_buf_u *fobos_eth_buf, uint8_t *data_for_copy, uint8_t tx_bytes){
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4604      	mov	r4, r0
 800685c:	4615      	mov	r5, r2
  memcpy(&fobos_eth_buf->fobos_protocol_buf_t.data[1], data_for_copy, tx_bytes-1);
 800685e:	3003      	adds	r0, #3
  fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = tx_bytes;
 8006860:	7062      	strb	r2, [r4, #1]
  memcpy(&fobos_eth_buf->fobos_protocol_buf_t.data[1], data_for_copy, tx_bytes-1);
 8006862:	3a01      	subs	r2, #1
 8006864:	f001 fe24 	bl	80084b0 <memcpy>
  send(SOCKET0,
 8006868:	1caa      	adds	r2, r5, #2
 800686a:	4621      	mov	r1, r4
 800686c:	2000      	movs	r0, #0
}
 800686e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  send(SOCKET0,
 8006872:	f7ff ba33 	b.w	8005cdc <send>

08006876 <confirmation>:
uint8_t confirmation(fobos_protocol_buf_u *fobos_eth_buf, uint8_t *data_for_copy){
 8006876:	b510      	push	{r4, lr}
	if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 4)
 8006878:	7842      	ldrb	r2, [r0, #1]
uint8_t confirmation(fobos_protocol_buf_u *fobos_eth_buf, uint8_t *data_for_copy){
 800687a:	4603      	mov	r3, r0
	if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 4)
 800687c:	2a04      	cmp	r2, #4
 800687e:	d10c      	bne.n	800689a <confirmation+0x24>
 8006880:	f8d0 2002 	ldr.w	r2, [r0, #2]
		memcpy(data_for_copy,
 8006884:	600a      	str	r2, [r1, #0]
				fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 8006886:	2401      	movs	r4, #1
				fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006888:	2000      	movs	r0, #0
				send(SOCKET0,
 800688a:	2203      	movs	r2, #3
 800688c:	4619      	mov	r1, r3
				fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800688e:	7098      	strb	r0, [r3, #2]
				fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 8006890:	705c      	strb	r4, [r3, #1]
				send(SOCKET0,
 8006892:	f7ff fa23 	bl	8005cdc <send>
 8006896:	4620      	mov	r0, r4
 8006898:	bd10      	pop	{r4, pc}
	else if(fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N == 2
 800689a:	2a02      	cmp	r2, #2
 800689c:	d109      	bne.n	80068b2 <confirmation+0x3c>
			&& (fobos_eth_buf->fobos_protocol_buf_t.CMD == FOBOS_ETH_CHANGE_PORT
 800689e:	7802      	ldrb	r2, [r0, #0]
 80068a0:	2a03      	cmp	r2, #3
 80068a2:	d001      	beq.n	80068a8 <confirmation+0x32>
					|| fobos_eth_buf->fobos_protocol_buf_t.CMD == FOBOS_CHANGE_TIMEOUT)){
 80068a4:	2a05      	cmp	r2, #5
 80068a6:	d104      	bne.n	80068b2 <confirmation+0x3c>
				*data_for_copy = fobos_eth_buf->fobos_protocol_buf_t.data[1];
 80068a8:	78da      	ldrb	r2, [r3, #3]
 80068aa:	700a      	strb	r2, [r1, #0]
				*(data_for_copy + 1) = fobos_eth_buf->fobos_protocol_buf_t.data[0];
 80068ac:	789a      	ldrb	r2, [r3, #2]
 80068ae:	704a      	strb	r2, [r1, #1]
 80068b0:	e7e9      	b.n	8006886 <confirmation+0x10>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 80068b2:	2204      	movs	r2, #4
		send(SOCKET0,
 80068b4:	4619      	mov	r1, r3
 80068b6:	2000      	movs	r0, #0
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 80068b8:	709a      	strb	r2, [r3, #2]
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 80068ba:	2201      	movs	r2, #1
 80068bc:	705a      	strb	r2, [r3, #1]
		send(SOCKET0,
 80068be:	2203      	movs	r2, #3
 80068c0:	f7ff fa0c 	bl	8005cdc <send>
		return 0;
 80068c4:	2000      	movs	r0, #0
}
 80068c6:	bd10      	pop	{r4, pc}

080068c8 <eth_cmds_analysis>:
void eth_cmds_analysis(fobos_protocol_buf_u *fobos_eth_buf){
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 80068cc:	7805      	ldrb	r5, [r0, #0]
void eth_cmds_analysis(fobos_protocol_buf_u *fobos_eth_buf){
 80068ce:	b092      	sub	sp, #72	; 0x48
 80068d0:	4604      	mov	r4, r0
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 80068d2:	2d0c      	cmp	r5, #12
 80068d4:	f000 80fb 	beq.w	8006ace <eth_cmds_analysis+0x206>
 80068d8:	d84a      	bhi.n	8006970 <eth_cmds_analysis+0xa8>
 80068da:	2d04      	cmp	r5, #4
 80068dc:	f000 81da 	beq.w	8006c94 <eth_cmds_analysis+0x3cc>
 80068e0:	d80f      	bhi.n	8006902 <eth_cmds_analysis+0x3a>
 80068e2:	2d01      	cmp	r5, #1
 80068e4:	f000 818a 	beq.w	8006bfc <eth_cmds_analysis+0x334>
 80068e8:	d375      	bcc.n	80069d6 <eth_cmds_analysis+0x10e>
 80068ea:	2d02      	cmp	r5, #2
 80068ec:	f000 8192 	beq.w	8006c14 <eth_cmds_analysis+0x34c>
 80068f0:	2d03      	cmp	r5, #3
 80068f2:	f000 81a9 	beq.w	8006c48 <eth_cmds_analysis+0x380>
	  fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 80068f6:	2101      	movs	r1, #1
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_CMD;
 80068f8:	2306      	movs	r3, #6
	  fobos_eth_protocol_send(fobos_eth_buf->fobos_protocol_buf_t.CMD, 1, fobos_eth_buf);
 80068fa:	4622      	mov	r2, r4
	  fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 80068fc:	7061      	strb	r1, [r4, #1]
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_CMD;
 80068fe:	70a3      	strb	r3, [r4, #2]
 8006900:	e046      	b.n	8006990 <eth_cmds_analysis+0xc8>
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 8006902:	2d07      	cmp	r5, #7
 8006904:	d070      	beq.n	80069e8 <eth_cmds_analysis+0x120>
 8006906:	d80a      	bhi.n	800691e <eth_cmds_analysis+0x56>
 8006908:	2d05      	cmp	r5, #5
 800690a:	f000 81b5 	beq.w	8006c78 <eth_cmds_analysis+0x3b0>
 800690e:	2d06      	cmp	r5, #6
 8006910:	d1f1      	bne.n	80068f6 <eth_cmds_analysis+0x2e>
		fobos_eth_protocol_send(FOBOS_ETH_RST, 1, fobos_eth_buf);
 8006912:	4602      	mov	r2, r0
 8006914:	2101      	movs	r1, #1
 8006916:	4628      	mov	r0, r5
 8006918:	f7ff ff96 	bl	8006848 <fobos_eth_protocol_send>
 800691c:	e7fe      	b.n	800691c <eth_cmds_analysis+0x54>
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 800691e:	2d0a      	cmp	r5, #10
 8006920:	d07b      	beq.n	8006a1a <eth_cmds_analysis+0x152>
 8006922:	2d0b      	cmp	r5, #11
 8006924:	d1e7      	bne.n	80068f6 <eth_cmds_analysis+0x2e>
	    can_tx_func(&hfdcan2, 0x620+2, 0, can_data_buf, FDCAN_TX_BUFFER1);
 8006926:	2302      	movs	r3, #2
 8006928:	2200      	movs	r2, #0
 800692a:	f240 6122 	movw	r1, #1570	; 0x622
 800692e:	48be      	ldr	r0, [pc, #760]	; (8006c28 <eth_cmds_analysis+0x360>)
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	ab04      	add	r3, sp, #16
 8006934:	f001 fb10 	bl	8007f58 <can_tx_func>
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006938:	2300      	movs	r3, #0
	    if(DIG_IN8)
 800693a:	2104      	movs	r1, #4
 800693c:	48bb      	ldr	r0, [pc, #748]	; (8006c2c <eth_cmds_analysis+0x364>)
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 800693e:	70a3      	strb	r3, [r4, #2]
	    while(RxHeader.Identifier != 0x722)
 8006940:	f240 7622 	movw	r6, #1826	; 0x722
	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 8006944:	70e3      	strb	r3, [r4, #3]
	    if(DIG_IN8)
 8006946:	f7fa fe1d 	bl	8001584 <HAL_GPIO_ReadPin>
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 800694a:	4fb7      	ldr	r7, [pc, #732]	; (8006c28 <eth_cmds_analysis+0x360>)
	    if(DIG_IN8)
 800694c:	2800      	cmp	r0, #0
 800694e:	bf14      	ite	ne
 8006950:	25ff      	movne	r5, #255	; 0xff
 8006952:	2500      	moveq	r5, #0
	    while(RxHeader.Identifier != 0x722)
 8006954:	9b08      	ldr	r3, [sp, #32]
 8006956:	42b3      	cmp	r3, r6
 8006958:	f040 80b3 	bne.w	8006ac2 <eth_cmds_analysis+0x1fa>
	    if(can_data_buf[1] & 0x04)
 800695c:	f89d 3011 	ldrb.w	r3, [sp, #17]
	    fobos_eth_protocol_send(FOBOS_GENERATOR_STATE, 2, fobos_eth_buf);
 8006960:	4622      	mov	r2, r4
 8006962:	2102      	movs	r1, #2
 8006964:	200b      	movs	r0, #11
	    if(can_data_buf[1] & 0x04)
 8006966:	f343 0380 	sbfx	r3, r3, #2, #1
	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = interlock_generator_state & interlock_door_and_generator_state;
 800696a:	401d      	ands	r5, r3
 800696c:	70e5      	strb	r5, [r4, #3]
 800696e:	e051      	b.n	8006a14 <eth_cmds_analysis+0x14c>
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 8006970:	2d1e      	cmp	r5, #30
 8006972:	f000 8119 	beq.w	8006ba8 <eth_cmds_analysis+0x2e0>
 8006976:	d80d      	bhi.n	8006994 <eth_cmds_analysis+0xcc>
 8006978:	2d0e      	cmp	r5, #14
 800697a:	f000 811b 	beq.w	8006bb4 <eth_cmds_analysis+0x2ec>
 800697e:	f0c0 80ce 	bcc.w	8006b1e <eth_cmds_analysis+0x256>
 8006982:	2d14      	cmp	r5, #20
 8006984:	f000 80d2 	beq.w	8006b2c <eth_cmds_analysis+0x264>
 8006988:	2d15      	cmp	r5, #21
 800698a:	d1b4      	bne.n	80068f6 <eth_cmds_analysis+0x2e>
	  fobos_eth_protocol_send(FOBOS_CMD_WORK, 1, fobos_eth_buf);
 800698c:	4602      	mov	r2, r0
 800698e:	2101      	movs	r1, #1
	  fobos_eth_protocol_send(fobos_eth_buf->fobos_protocol_buf_t.CMD, 1, fobos_eth_buf);
 8006990:	4628      	mov	r0, r5
 8006992:	e03f      	b.n	8006a14 <eth_cmds_analysis+0x14c>
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 8006994:	2dfc      	cmp	r5, #252	; 0xfc
 8006996:	f000 819f 	beq.w	8006cd8 <eth_cmds_analysis+0x410>
 800699a:	d80d      	bhi.n	80069b8 <eth_cmds_analysis+0xf0>
 800699c:	2dfa      	cmp	r5, #250	; 0xfa
 800699e:	f000 81b4 	beq.w	8006d0a <eth_cmds_analysis+0x442>
 80069a2:	2dfb      	cmp	r5, #251	; 0xfb
 80069a4:	d1a7      	bne.n	80068f6 <eth_cmds_analysis+0x2e>
	    dhcp_state = wiz_NetData.dhcp;
 80069a6:	4ba2      	ldr	r3, [pc, #648]	; (8006c30 <eth_cmds_analysis+0x368>)
 80069a8:	a912      	add	r1, sp, #72	; 0x48
	    feedback_params(fobos_eth_buf, &dhcp_state, 1+1);
 80069aa:	2202      	movs	r2, #2
	    dhcp_state = wiz_NetData.dhcp;
 80069ac:	7d9b      	ldrb	r3, [r3, #22]
 80069ae:	f801 3d28 	strb.w	r3, [r1, #-40]!
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 80069b2:	2300      	movs	r3, #0
 80069b4:	7083      	strb	r3, [r0, #2]
 80069b6:	e179      	b.n	8006cac <eth_cmds_analysis+0x3e4>
	switch(fobos_eth_buf->fobos_protocol_buf_t.CMD)
 80069b8:	2dfd      	cmp	r5, #253	; 0xfd
 80069ba:	f000 817f 	beq.w	8006cbc <eth_cmds_analysis+0x3f4>
 80069be:	2dfe      	cmp	r5, #254	; 0xfe
 80069c0:	d199      	bne.n	80068f6 <eth_cmds_analysis+0x2e>
	    getSIPR(ip);
 80069c2:	2204      	movs	r2, #4
 80069c4:	a908      	add	r1, sp, #32
 80069c6:	200f      	movs	r0, #15
 80069c8:	f7ff fd5c 	bl	8006484 <WIZCHIP_READ_BUF>
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 80069cc:	2300      	movs	r3, #0
	    feedback_params(fobos_eth_buf, ip, 4+1);
 80069ce:	2205      	movs	r2, #5
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 80069d0:	70a3      	strb	r3, [r4, #2]
		    feedback_params(fobos_eth_buf, timeout, 2+1);
 80069d2:	a908      	add	r1, sp, #32
 80069d4:	e17e      	b.n	8006cd4 <eth_cmds_analysis+0x40c>
			fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 80069d6:	7842      	ldrb	r2, [r0, #1]
		send(SOCKET0,
 80069d8:	3202      	adds	r2, #2
 80069da:	4621      	mov	r1, r4
 80069dc:	2000      	movs	r0, #0
 80069de:	f7ff f97d 	bl	8005cdc <send>
}
 80069e2:	b012      	add	sp, #72	; 0x48
 80069e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    uint8_t mac_adr[6] = {0};
 80069e8:	2600      	movs	r6, #0
	    getSHAR(mac_adr);
 80069ea:	2206      	movs	r2, #6
 80069ec:	a908      	add	r1, sp, #32
 80069ee:	2009      	movs	r0, #9
	    uint8_t mac_adr[6] = {0};
 80069f0:	9608      	str	r6, [sp, #32]
 80069f2:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
	    getSHAR(mac_adr);
 80069f6:	f7ff fd45 	bl	8006484 <WIZCHIP_READ_BUF>
	    memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, mac_adr, 6);
 80069fa:	9808      	ldr	r0, [sp, #32]
	    fobos_eth_protocol_send(FOBOS_ETH_GET_MAC, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 80069fc:	4622      	mov	r2, r4
	    memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, mac_adr, 6);
 80069fe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
	    fobos_eth_protocol_send(FOBOS_ETH_GET_MAC, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 8006a02:	4629      	mov	r1, r5
	    memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, mac_adr, 6);
 8006a04:	f8c4 0003 	str.w	r0, [r4, #3]
	    fobos_eth_protocol_send(FOBOS_ETH_GET_MAC, fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N, fobos_eth_buf);
 8006a08:	4628      	mov	r0, r5
	    fobos_eth_buf->fobos_protocol_buf_t.CMD = FOBOS_ETH_GET_MAC;
 8006a0a:	7025      	strb	r5, [r4, #0]
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006a0c:	70a6      	strb	r6, [r4, #2]
	    memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, mac_adr, 6);
 8006a0e:	f8a4 3007 	strh.w	r3, [r4, #7]
	    fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 6+1;
 8006a12:	7065      	strb	r5, [r4, #1]
	  fobos_eth_protocol_send(fobos_eth_buf->fobos_protocol_buf_t.CMD, 1, fobos_eth_buf);
 8006a14:	f7ff ff18 	bl	8006848 <fobos_eth_protocol_send>
}
 8006a18:	e7e3      	b.n	80069e2 <eth_cmds_analysis+0x11a>
			uint8_t sensors_state = 0, temp_lim_switches = 0;
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	ab12      	add	r3, sp, #72	; 0x48
			can_tx_func(&hfdcan2, 0x620+2, 0, &sensors_state, FDCAN_TX_BUFFER1);
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f240 6122 	movw	r1, #1570	; 0x622
			uint8_t sensors_state = 0, temp_lim_switches = 0;
 8006a24:	f803 5d39 	strb.w	r5, [r3, #-57]!
			can_tx_func(&hfdcan2, 0x620+2, 0, &sensors_state, FDCAN_TX_BUFFER1);
 8006a28:	487f      	ldr	r0, [pc, #508]	; (8006c28 <eth_cmds_analysis+0x360>)
 8006a2a:	9200      	str	r2, [sp, #0]
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	f001 fa93 	bl	8007f58 <can_tx_func>
			fobos_eth_buf->fobos_protocol_buf_t.data[2] = temp_lim_switches;//DATA2?
 8006a32:	7125      	strb	r5, [r4, #4]
			fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006a34:	70a5      	strb	r5, [r4, #2]
			if(TABLE_LOCK_SENSOR_LEFT)
 8006a36:	2110      	movs	r1, #16
 8006a38:	487e      	ldr	r0, [pc, #504]	; (8006c34 <eth_cmds_analysis+0x36c>)
			uint8_t can_data_buf[8] = {0};
 8006a3a:	9504      	str	r5, [sp, #16]
 8006a3c:	9505      	str	r5, [sp, #20]
			if(TABLE_LOCK_SENSOR_LEFT)
 8006a3e:	f7fa fda1 	bl	8001584 <HAL_GPIO_ReadPin>
 8006a42:	b128      	cbz	r0, 8006a50 <eth_cmds_analysis+0x188>
				sensors_state |= 0x01;
 8006a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006a48:	f043 0301 	orr.w	r3, r3, #1
 8006a4c:	f88d 300f 	strb.w	r3, [sp, #15]
			if(EMERGENCY_LIMIT_SW1)
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	4879      	ldr	r0, [pc, #484]	; (8006c38 <eth_cmds_analysis+0x370>)
 8006a54:	f7fa fd96 	bl	8001584 <HAL_GPIO_ReadPin>
 8006a58:	b128      	cbz	r0, 8006a66 <eth_cmds_analysis+0x19e>
				sensors_state |= 0x02;
 8006a5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006a5e:	f043 0302 	orr.w	r3, r3, #2
 8006a62:	f88d 300f 	strb.w	r3, [sp, #15]
			if(EMERGENCY_LIMIT_SW2)
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	4873      	ldr	r0, [pc, #460]	; (8006c38 <eth_cmds_analysis+0x370>)
 8006a6a:	f7fa fd8b 	bl	8001584 <HAL_GPIO_ReadPin>
 8006a6e:	b128      	cbz	r0, 8006a7c <eth_cmds_analysis+0x1b4>
				sensors_state |= 0x04;
 8006a70:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006a74:	f043 0304 	orr.w	r3, r3, #4
 8006a78:	f88d 300f 	strb.w	r3, [sp, #15]
			if(TABLE_LOCK_SENSOR_RIGHT)
 8006a7c:	2120      	movs	r1, #32
 8006a7e:	486d      	ldr	r0, [pc, #436]	; (8006c34 <eth_cmds_analysis+0x36c>)
 8006a80:	f7fa fd80 	bl	8001584 <HAL_GPIO_ReadPin>
 8006a84:	b128      	cbz	r0, 8006a92 <eth_cmds_analysis+0x1ca>
				sensors_state |= 0x08;
 8006a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006a8a:	f043 0308 	orr.w	r3, r3, #8
 8006a8e:	f88d 300f 	strb.w	r3, [sp, #15]
			fobos_eth_buf->fobos_protocol_buf_t.data[3] = sensors_state;
 8006a92:	f89d 300f 	ldrb.w	r3, [sp, #15]
			while(RxHeader.Identifier != 0x722)
 8006a96:	f240 7522 	movw	r5, #1826	; 0x722
			  can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006a9a:	4e63      	ldr	r6, [pc, #396]	; (8006c28 <eth_cmds_analysis+0x360>)
			fobos_eth_buf->fobos_protocol_buf_t.data[3] = sensors_state;
 8006a9c:	7163      	strb	r3, [r4, #5]
			while(RxHeader.Identifier != 0x722)
 8006a9e:	9b08      	ldr	r3, [sp, #32]
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	d108      	bne.n	8006ab6 <eth_cmds_analysis+0x1ee>
			fobos_eth_buf->fobos_protocol_buf_t.data[1] = temp_lim_switches;
 8006aa4:	f89d 3011 	ldrb.w	r3, [sp, #17]
			fobos_eth_protocol_send(FOBOS_SENSORS_STATE, 4, fobos_eth_buf);
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	2104      	movs	r1, #4
 8006aac:	200a      	movs	r0, #10
			fobos_eth_buf->fobos_protocol_buf_t.data[1] = temp_lim_switches;
 8006aae:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8006ab2:	70e3      	strb	r3, [r4, #3]
 8006ab4:	e7ae      	b.n	8006a14 <eth_cmds_analysis+0x14c>
			  can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006ab6:	aa04      	add	r2, sp, #16
 8006ab8:	a908      	add	r1, sp, #32
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7fe ffba 	bl	8005a34 <can_protocol_data_analyzing>
 8006ac0:	e7ed      	b.n	8006a9e <eth_cmds_analysis+0x1d6>
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006ac2:	aa04      	add	r2, sp, #16
 8006ac4:	a908      	add	r1, sp, #32
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f7fe ffb4 	bl	8005a34 <can_protocol_data_analyzing>
 8006acc:	e742      	b.n	8006954 <eth_cmds_analysis+0x8c>
	    can_tx_func(&hfdcan2, 0x620+2, 0, can_data_buf, FDCAN_TX_BUFFER1);
 8006ace:	2302      	movs	r3, #2
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f240 6122 	movw	r1, #1570	; 0x622
 8006ad6:	4854      	ldr	r0, [pc, #336]	; (8006c28 <eth_cmds_analysis+0x360>)
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	ab04      	add	r3, sp, #16
 8006adc:	f001 fa3c 	bl	8007f58 <can_tx_func>
	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = servo_pos>>8;
 8006ae0:	2206      	movs	r2, #6
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006ae2:	2300      	movs	r3, #0
	    while(RxHeader.Identifier != 0x720+2)
 8006ae4:	f240 7522 	movw	r5, #1826	; 0x722
	    fobos_eth_buf->fobos_protocol_buf_t.data[1] = servo_pos>>8;
 8006ae8:	70e2      	strb	r2, [r4, #3]
	    fobos_eth_buf->fobos_protocol_buf_t.data[2] = servo_pos;
 8006aea:	2253      	movs	r2, #83	; 0x53
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006aec:	4e4e      	ldr	r6, [pc, #312]	; (8006c28 <eth_cmds_analysis+0x360>)
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006aee:	70a3      	strb	r3, [r4, #2]
	    fobos_eth_buf->fobos_protocol_buf_t.data[2] = servo_pos;
 8006af0:	7122      	strb	r2, [r4, #4]
	      fobos_eth_buf->fobos_protocol_buf_t.data[3] = 0;
 8006af2:	7163      	strb	r3, [r4, #5]
	    while(RxHeader.Identifier != 0x720+2)
 8006af4:	9b08      	ldr	r3, [sp, #32]
 8006af6:	42ab      	cmp	r3, r5
 8006af8:	d10b      	bne.n	8006b12 <eth_cmds_analysis+0x24a>
 8006afa:	f89d 3011 	ldrb.w	r3, [sp, #17]
	    fobos_eth_protocol_send(FOBOS_SERVOMOTOR_PLACEMENT, 4, fobos_eth_buf);
 8006afe:	2104      	movs	r1, #4
 8006b00:	200c      	movs	r0, #12
 8006b02:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
	    if(temp_lim_switches && temp_lim_switches < 3)
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	2a01      	cmp	r2, #1
	    fobos_eth_protocol_send(FOBOS_SERVOMOTOR_PLACEMENT, 4, fobos_eth_buf);
 8006b0a:	4622      	mov	r2, r4
	      fobos_eth_buf->fobos_protocol_buf_t.data[3] = temp_lim_switches;
 8006b0c:	bf98      	it	ls
 8006b0e:	7163      	strbls	r3, [r4, #5]
 8006b10:	e780      	b.n	8006a14 <eth_cmds_analysis+0x14c>
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006b12:	aa04      	add	r2, sp, #16
 8006b14:	a908      	add	r1, sp, #32
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7fe ff8c 	bl	8005a34 <can_protocol_data_analyzing>
 8006b1c:	e7ea      	b.n	8006af4 <eth_cmds_analysis+0x22c>
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006b1e:	2300      	movs	r3, #0
	  fobos_eth_protocol_send(FOBOS_STATEMENT, 2, fobos_eth_buf);
 8006b20:	4602      	mov	r2, r0
 8006b22:	2102      	movs	r1, #2
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006b24:	7083      	strb	r3, [r0, #2]
	  fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;			//не готово устройство
 8006b26:	70c3      	strb	r3, [r0, #3]
	  fobos_eth_protocol_send(FOBOS_STATEMENT, 2, fobos_eth_buf);
 8006b28:	200d      	movs	r0, #13
 8006b2a:	e773      	b.n	8006a14 <eth_cmds_analysis+0x14c>
	    uint8_t can_data_buf[16] = {0x08, 0x05, 0x4B, 0x08, 0x00, 0x83, 0xDE, 0x00, 0x08, 0x47}, temp_lim_switches = 0;
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	2100      	movs	r1, #0
 8006b30:	2508      	movs	r5, #8
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006b32:	4e3d      	ldr	r6, [pc, #244]	; (8006c28 <eth_cmds_analysis+0x360>)
	    uint8_t can_data_buf[16] = {0x08, 0x05, 0x4B, 0x08, 0x00, 0x83, 0xDE, 0x00, 0x08, 0x47}, temp_lim_switches = 0;
 8006b34:	eb0d 0002 	add.w	r0, sp, r2
 8006b38:	f001 fcc5 	bl	80084c6 <memset>
 8006b3c:	2305      	movs	r3, #5
	    can_tx_func(&hfdcan2, 0x640+2, 8, &can_data_buf[0], FDCAN_TX_BUFFER1);
 8006b3e:	462a      	mov	r2, r5
 8006b40:	f240 6142 	movw	r1, #1602	; 0x642
	    uint8_t can_data_buf[16] = {0x08, 0x05, 0x4B, 0x08, 0x00, 0x83, 0xDE, 0x00, 0x08, 0x47}, temp_lim_switches = 0;
 8006b44:	f88d 3011 	strb.w	r3, [sp, #17]
 8006b48:	234b      	movs	r3, #75	; 0x4b
	    can_tx_func(&hfdcan2, 0x640+2, 8, &can_data_buf[0], FDCAN_TX_BUFFER1);
 8006b4a:	4837      	ldr	r0, [pc, #220]	; (8006c28 <eth_cmds_analysis+0x360>)
	    uint8_t can_data_buf[16] = {0x08, 0x05, 0x4B, 0x08, 0x00, 0x83, 0xDE, 0x00, 0x08, 0x47}, temp_lim_switches = 0;
 8006b4c:	f88d 3012 	strb.w	r3, [sp, #18]
 8006b50:	2383      	movs	r3, #131	; 0x83
 8006b52:	f88d 5010 	strb.w	r5, [sp, #16]
 8006b56:	f88d 3015 	strb.w	r3, [sp, #21]
 8006b5a:	23de      	movs	r3, #222	; 0xde
 8006b5c:	f88d 5013 	strb.w	r5, [sp, #19]
 8006b60:	f88d 3016 	strb.w	r3, [sp, #22]
 8006b64:	2347      	movs	r3, #71	; 0x47
 8006b66:	f88d 5018 	strb.w	r5, [sp, #24]
 8006b6a:	f88d 3019 	strb.w	r3, [sp, #25]
	    can_tx_func(&hfdcan2, 0x640+2, 8, &can_data_buf[0], FDCAN_TX_BUFFER1);
 8006b6e:	2302      	movs	r3, #2
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	ab04      	add	r3, sp, #16
 8006b74:	f001 f9f0 	bl	8007f58 <can_tx_func>
	    can_tx_func(&hfdcan2, 0x640+2, 8, &can_data_buf[8], FDCAN_TX_BUFFER2);
 8006b78:	2304      	movs	r3, #4
 8006b7a:	462a      	mov	r2, r5
	    while(RxHeader.Identifier != 0x740+2)
 8006b7c:	f240 7542 	movw	r5, #1858	; 0x742
	    can_tx_func(&hfdcan2, 0x640+2, 8, &can_data_buf[8], FDCAN_TX_BUFFER2);
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	f240 6142 	movw	r1, #1602	; 0x642
 8006b86:	ab06      	add	r3, sp, #24
 8006b88:	4827      	ldr	r0, [pc, #156]	; (8006c28 <eth_cmds_analysis+0x360>)
 8006b8a:	f001 f9e5 	bl	8007f58 <can_tx_func>
	    while(RxHeader.Identifier != 0x740+2)
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	d103      	bne.n	8006b9c <eth_cmds_analysis+0x2d4>
	    fobos_eth_protocol_send(FOBOS_CMD_BASING, 1, fobos_eth_buf);
 8006b94:	4622      	mov	r2, r4
 8006b96:	2101      	movs	r1, #1
 8006b98:	2014      	movs	r0, #20
 8006b9a:	e73b      	b.n	8006a14 <eth_cmds_analysis+0x14c>
	      can_protocol_data_analyzing(&hfdcan2, &RxHeader, can_data_buf);
 8006b9c:	aa04      	add	r2, sp, #16
 8006b9e:	a908      	add	r1, sp, #32
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7fe ff47 	bl	8005a34 <can_protocol_data_analyzing>
 8006ba6:	e7f2      	b.n	8006b8e <eth_cmds_analysis+0x2c6>
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006ba8:	2300      	movs	r3, #0
	  fobos_eth_protocol_send(FOBOS_CMD_BARRIER, 2, fobos_eth_buf);
 8006baa:	4602      	mov	r2, r0
 8006bac:	2102      	movs	r1, #2
	  fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006bae:	7083      	strb	r3, [r0, #2]
	  fobos_eth_buf->fobos_protocol_buf_t.data[1] = 0;
 8006bb0:	70c3      	strb	r3, [r0, #3]
 8006bb2:	e6ed      	b.n	8006990 <eth_cmds_analysis+0xc8>
		char string_data[] = {"Fobos embedded software version 0.12"};
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <eth_cmds_analysis+0x374>)
 8006bb6:	aa08      	add	r2, sp, #32
 8006bb8:	f103 0620 	add.w	r6, r3, #32
 8006bbc:	4690      	mov	r8, r2
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006bc6:	4615      	mov	r5, r2
 8006bc8:	42b3      	cmp	r3, r6
 8006bca:	c503      	stmia	r5!, {r0, r1}
 8006bcc:	462a      	mov	r2, r5
 8006bce:	d1f6      	bne.n	8006bbe <eth_cmds_analysis+0x2f6>
 8006bd0:	6818      	ldr	r0, [r3, #0]
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006bd2:	2600      	movs	r6, #0
		char string_data[] = {"Fobos embedded software version 0.12"};
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	6028      	str	r0, [r5, #0]
		int length = strlen(string_data)+1;
 8006bd8:	4640      	mov	r0, r8
		char string_data[] = {"Fobos embedded software version 0.12"};
 8006bda:	712b      	strb	r3, [r5, #4]
		int length = strlen(string_data)+1;
 8006bdc:	f7f9 fb80 	bl	80002e0 <strlen>
		fobos_eth_buf->fobos_protocol_buf_t.CMD = FOBOS_EMB_SOFT_VER;
 8006be0:	230e      	movs	r3, #14
		int length = strlen(string_data)+1;
 8006be2:	1c47      	adds	r7, r0, #1
 8006be4:	4605      	mov	r5, r0
		fobos_eth_buf->fobos_protocol_buf_t.CMD = FOBOS_EMB_SOFT_VER;
 8006be6:	7023      	strb	r3, [r4, #0]
		memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, string_data, length);
 8006be8:	4641      	mov	r1, r8
 8006bea:	463a      	mov	r2, r7
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006bec:	70a6      	strb	r6, [r4, #2]
		memcpy(fobos_eth_buf->fobos_protocol_buf_t.data+1, string_data, length);
 8006bee:	1ce0      	adds	r0, r4, #3
 8006bf0:	f001 fc5e 	bl	80084b0 <memcpy>
		send(SOCKET0,fobos_eth_buf->data_to_transmit,length+2);
 8006bf4:	1cea      	adds	r2, r5, #3
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = length;
 8006bf6:	7067      	strb	r7, [r4, #1]
		send(SOCKET0,fobos_eth_buf->data_to_transmit,length+2);
 8006bf8:	b292      	uxth	r2, r2
 8006bfa:	e6ee      	b.n	80069da <eth_cmds_analysis+0x112>
		if(confirmation(fobos_eth_buf, ip_source_adr))
 8006bfc:	4910      	ldr	r1, [pc, #64]	; (8006c40 <eth_cmds_analysis+0x378>)
 8006bfe:	f7ff fe3a 	bl	8006876 <confirmation>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f aeed 	beq.w	80069e2 <eth_cmds_analysis+0x11a>
			setSIPR(ip_source_adr);
 8006c08:	2204      	movs	r2, #4
 8006c0a:	490d      	ldr	r1, [pc, #52]	; (8006c40 <eth_cmds_analysis+0x378>)
 8006c0c:	200f      	movs	r0, #15
			setSUBR(subnet_mask_adr);
 8006c0e:	f7ff fc0d 	bl	800642c <WIZCHIP_WRITE_BUF>
 8006c12:	e6e6      	b.n	80069e2 <eth_cmds_analysis+0x11a>
		if(confirmation(fobos_eth_buf, subnet_mask_adr))
 8006c14:	490b      	ldr	r1, [pc, #44]	; (8006c44 <eth_cmds_analysis+0x37c>)
 8006c16:	f7ff fe2e 	bl	8006876 <confirmation>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f43f aee1 	beq.w	80069e2 <eth_cmds_analysis+0x11a>
			setSUBR(subnet_mask_adr);
 8006c20:	2204      	movs	r2, #4
 8006c22:	4908      	ldr	r1, [pc, #32]	; (8006c44 <eth_cmds_analysis+0x37c>)
 8006c24:	2005      	movs	r0, #5
 8006c26:	e7f2      	b.n	8006c0e <eth_cmds_analysis+0x346>
 8006c28:	20004300 	.word	0x20004300
 8006c2c:	58020400 	.word	0x58020400
 8006c30:	20004094 	.word	0x20004094
 8006c34:	58020800 	.word	0x58020800
 8006c38:	58020000 	.word	0x58020000
 8006c3c:	080085c7 	.word	0x080085c7
 8006c40:	2000003c 	.word	0x2000003c
 8006c44:	20000042 	.word	0x20000042
		socket_port = (fobos_eth_buf->fobos_protocol_buf_t.data[1]<<8)|fobos_eth_buf->fobos_protocol_buf_t.data[2];
 8006c48:	78c2      	ldrb	r2, [r0, #3]
 8006c4a:	7903      	ldrb	r3, [r0, #4]
 8006c4c:	4d38      	ldr	r5, [pc, #224]	; (8006d30 <eth_cmds_analysis+0x468>)
 8006c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if(confirmation(fobos_eth_buf, &socket_port))
 8006c52:	4629      	mov	r1, r5
		socket_port = (fobos_eth_buf->fobos_protocol_buf_t.data[1]<<8)|fobos_eth_buf->fobos_protocol_buf_t.data[2];
 8006c54:	802b      	strh	r3, [r5, #0]
		if(confirmation(fobos_eth_buf, &socket_port))
 8006c56:	f7ff fe0e 	bl	8006876 <confirmation>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f43f aec1 	beq.w	80069e2 <eth_cmds_analysis+0x11a>
		  setSn_PORT(SOCKET0, socket_port);
 8006c60:	8829      	ldrh	r1, [r5, #0]
 8006c62:	f244 0004 	movw	r0, #16388	; 0x4004
 8006c66:	0a09      	lsrs	r1, r1, #8
 8006c68:	f7ff fba0 	bl	80063ac <WIZCHIP_WRITE>
 8006c6c:	7829      	ldrb	r1, [r5, #0]
 8006c6e:	f244 0005 	movw	r0, #16389	; 0x4005
			setRTR(timeout_period);
 8006c72:	f7ff fb9b 	bl	80063ac <WIZCHIP_WRITE>
 8006c76:	e6b4      	b.n	80069e2 <eth_cmds_analysis+0x11a>
		if(confirmation(fobos_eth_buf, &timeout_period))
 8006c78:	4c2e      	ldr	r4, [pc, #184]	; (8006d34 <eth_cmds_analysis+0x46c>)
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	f7ff fdfb 	bl	8006876 <confirmation>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f43f aeae 	beq.w	80069e2 <eth_cmds_analysis+0x11a>
			setRTR(timeout_period);
 8006c86:	7861      	ldrb	r1, [r4, #1]
 8006c88:	2017      	movs	r0, #23
 8006c8a:	f7ff fb8f 	bl	80063ac <WIZCHIP_WRITE>
 8006c8e:	7821      	ldrb	r1, [r4, #0]
 8006c90:	2018      	movs	r0, #24
 8006c92:	e7ee      	b.n	8006c72 <eth_cmds_analysis+0x3aa>
	    uint8_t dhcp_state = fobos_eth_buf->fobos_protocol_buf_t.data[1];
 8006c94:	78c3      	ldrb	r3, [r0, #3]
	    wiz_NetData.dhcp = dhcp_state;
 8006c96:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <eth_cmds_analysis+0x470>)
	    uint8_t dhcp_state = fobos_eth_buf->fobos_protocol_buf_t.data[1];
 8006c98:	f88d 3020 	strb.w	r3, [sp, #32]
	    wiz_NetData.dhcp = dhcp_state;
 8006c9c:	7593      	strb	r3, [r2, #22]
	    if(dhcp_state == 1 || dhcp_state == 2)
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d806      	bhi.n	8006cb2 <eth_cmds_analysis+0x3ea>
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006ca4:	2300      	movs	r3, #0
		feedback_params(fobos_eth_buf, &dhcp_state, 1+1);
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	a908      	add	r1, sp, #32
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006caa:	7083      	strb	r3, [r0, #2]
	    feedback_params(fobos_eth_buf, &dhcp_state, 1+1);
 8006cac:	f7ff fdd4 	bl	8006858 <feedback_params>
	  break;
 8006cb0:	e697      	b.n	80069e2 <eth_cmds_analysis+0x11a>
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 8006cb2:	2301      	movs	r3, #1
		fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_PA;
 8006cb4:	7085      	strb	r5, [r0, #2]
		send(SOCKET0,fobos_eth_buf->data_to_transmit,fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N+2);
 8006cb6:	2203      	movs	r2, #3
		fobos_eth_buf->fobos_protocol_buf_t.bytes_in_packet_N = 1;
 8006cb8:	7043      	strb	r3, [r0, #1]
 8006cba:	e68e      	b.n	80069da <eth_cmds_analysis+0x112>
	    uint8_t mask[4]={0};
 8006cbc:	ad12      	add	r5, sp, #72	; 0x48
 8006cbe:	2600      	movs	r6, #0
	    getSUBR(mask);
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	2005      	movs	r0, #5
	    uint8_t mask[4]={0};
 8006cc4:	f845 6d28 	str.w	r6, [r5, #-40]!
	    getSUBR(mask);
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7ff fbdb 	bl	8006484 <WIZCHIP_READ_BUF>
	    feedback_params(fobos_eth_buf, mask, 4+1);
 8006cce:	2205      	movs	r2, #5
 8006cd0:	4629      	mov	r1, r5
	    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006cd2:	70a6      	strb	r6, [r4, #2]
		    feedback_params(fobos_eth_buf, timeout, 2+1);
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	e7e9      	b.n	8006cac <eth_cmds_analysis+0x3e4>
		    uint8_t port[2]={0};
 8006cd8:	2600      	movs	r6, #0
		    socket_port = getSn_PORT(SOCKET0);
 8006cda:	f244 0004 	movw	r0, #16388	; 0x4004
		    uint8_t port[2]={0};
 8006cde:	f8ad 6020 	strh.w	r6, [sp, #32]
		    socket_port = getSn_PORT(SOCKET0);
 8006ce2:	f7ff fb83 	bl	80063ec <WIZCHIP_READ>
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	f244 0005 	movw	r0, #16389	; 0x4005
 8006cec:	f7ff fb7e 	bl	80063ec <WIZCHIP_READ>
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <eth_cmds_analysis+0x468>)
 8006cf2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006cf6:	70a6      	strb	r6, [r4, #2]
		    socket_port = getSn_PORT(SOCKET0);
 8006cf8:	b280      	uxth	r0, r0
 8006cfa:	8018      	strh	r0, [r3, #0]
		    port[0] = socket_port>>8;
 8006cfc:	0a03      	lsrs	r3, r0, #8
		    port[1] = socket_port;
 8006cfe:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
		    port[0] = socket_port>>8;
 8006d02:	f88d 3020 	strb.w	r3, [sp, #32]
		    feedback_params(fobos_eth_buf, timeout, 2+1);
 8006d06:	2203      	movs	r2, #3
 8006d08:	e663      	b.n	80069d2 <eth_cmds_analysis+0x10a>
		    timeout_temp1 = getRTR();
 8006d0a:	2017      	movs	r0, #23
 8006d0c:	f7ff fb6e 	bl	80063ec <WIZCHIP_READ>
 8006d10:	4605      	mov	r5, r0
 8006d12:	2018      	movs	r0, #24
 8006d14:	f7ff fb6a 	bl	80063ec <WIZCHIP_READ>
 8006d18:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8006d1c:	b280      	uxth	r0, r0
		    timeout[0] = timeout_temp1>>8;
 8006d1e:	0a03      	lsrs	r3, r0, #8
		    timeout[1] = timeout_temp1;
 8006d20:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
		    timeout[0] = timeout_temp1>>8;
 8006d24:	f88d 3020 	strb.w	r3, [sp, #32]
		    fobos_eth_buf->fobos_protocol_buf_t.data[0] = FOBOS_ETH_ERR_NO;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	70a3      	strb	r3, [r4, #2]
 8006d2c:	e7eb      	b.n	8006d06 <eth_cmds_analysis+0x43e>
 8006d2e:	bf00      	nop
 8006d30:	20000040 	.word	0x20000040
 8006d34:	20000048 	.word	0x20000048
 8006d38:	20004094 	.word	0x20004094

08006d3c <EthernetTask_func>:
{
 8006d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	PIN_PWDN(RESET);
 8006d3e:	2200      	movs	r2, #0
{
 8006d40:	b0c7      	sub	sp, #284	; 0x11c
	PIN_PWDN(RESET);
 8006d42:	2104      	movs	r1, #4
 8006d44:	486f      	ldr	r0, [pc, #444]	; (8006f04 <EthernetTask_func+0x1c8>)
 8006d46:	f7fa fc23 	bl	8001590 <HAL_GPIO_WritePin>
	PIN_nRESET(SET);
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2110      	movs	r1, #16
 8006d4e:	486d      	ldr	r0, [pc, #436]	; (8006f04 <EthernetTask_func+0x1c8>)
 8006d50:	f7fa fc1e 	bl	8001590 <HAL_GPIO_WritePin>
	PIN_nCS1(SET);
 8006d54:	2140      	movs	r1, #64	; 0x40
 8006d56:	2201      	movs	r2, #1
 8006d58:	486b      	ldr	r0, [pc, #428]	; (8006f08 <EthernetTask_func+0x1cc>)
 8006d5a:	f7fa fc19 	bl	8001590 <HAL_GPIO_WritePin>
	vTaskDelay(200);
 8006d5e:	20c8      	movs	r0, #200	; 0xc8
 8006d60:	f7fe fa36 	bl	80051d0 <vTaskDelay>
	wiz_NetData.dhcp = 2;
 8006d64:	4869      	ldr	r0, [pc, #420]	; (8006f0c <EthernetTask_func+0x1d0>)
 8006d66:	2302      	movs	r3, #2
	setRTR(timeout_period);
 8006d68:	4c69      	ldr	r4, [pc, #420]	; (8006f10 <EthernetTask_func+0x1d4>)
	    LED_VD5(RESET);
 8006d6a:	4f6a      	ldr	r7, [pc, #424]	; (8006f14 <EthernetTask_func+0x1d8>)
	wiz_NetData.dhcp = 2;
 8006d6c:	7583      	strb	r3, [r0, #22]
	memcpy(wiz_NetData.sn, subnet_mask_adr, 4);
 8006d6e:	4b6a      	ldr	r3, [pc, #424]	; (8006f18 <EthernetTask_func+0x1dc>)
	  LED_VD1(SET);
 8006d70:	4e65      	ldr	r6, [pc, #404]	; (8006f08 <EthernetTask_func+0x1cc>)
	memcpy(wiz_NetData.sn, subnet_mask_adr, 4);
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c0 300a 	str.w	r3, [r0, #10]
	memcpy(wiz_NetData.ip, ip_source_adr, 4);
 8006d78:	4b68      	ldr	r3, [pc, #416]	; (8006f1c <EthernetTask_func+0x1e0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f8c0 3006 	str.w	r3, [r0, #6]
	memcpy(wiz_NetData.mac, source_hardware_adr,6);
 8006d80:	4b67      	ldr	r3, [pc, #412]	; (8006f20 <EthernetTask_func+0x1e4>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	889b      	ldrh	r3, [r3, #4]
 8006d86:	6002      	str	r2, [r0, #0]
 8006d88:	8083      	strh	r3, [r0, #4]
	wizchip_setnetinfo(&wiz_NetData);
 8006d8a:	f7ff fd09 	bl	80067a0 <wizchip_setnetinfo>
	setsockopt(SOCKET0, SO_DESTPORT, &socket_port);
 8006d8e:	4a65      	ldr	r2, [pc, #404]	; (8006f24 <EthernetTask_func+0x1e8>)
 8006d90:	2105      	movs	r1, #5
 8006d92:	2000      	movs	r0, #0
 8006d94:	f7ff faa4 	bl	80062e0 <setsockopt>
	setsockopt(SOCKET0, SO_DESTIP, ip_destination_adr);
 8006d98:	4a63      	ldr	r2, [pc, #396]	; (8006f28 <EthernetTask_func+0x1ec>)
 8006d9a:	2104      	movs	r1, #4
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7ff fa9f 	bl	80062e0 <setsockopt>
	setRTR(timeout_period);
 8006da2:	7861      	ldrb	r1, [r4, #1]
 8006da4:	2017      	movs	r0, #23
 8006da6:	f7ff fb01 	bl	80063ac <WIZCHIP_WRITE>
 8006daa:	7821      	ldrb	r1, [r4, #0]
 8006dac:	2018      	movs	r0, #24
 8006dae:	f7ff fafd 	bl	80063ac <WIZCHIP_WRITE>
	taskENTER_CRITICAL();
 8006db2:	f7fd fa57 	bl	8004264 <vPortEnterCritical>
	DHCP_init(SOCKET5, dhcp_buf);
 8006db6:	495d      	ldr	r1, [pc, #372]	; (8006f2c <EthernetTask_func+0x1f0>)
 8006db8:	2005      	movs	r0, #5
 8006dba:	f000 fadd 	bl	8007378 <DHCP_init>
	taskEXIT_CRITICAL();
 8006dbe:	f7fd fa77 	bl	80042b0 <vPortExitCritical>
	xTimer_period_reset = xTimerCreate("Period timer", 200, pdTRUE, (void*)0, vTimerCallback);
 8006dc2:	4b5b      	ldr	r3, [pc, #364]	; (8006f30 <EthernetTask_func+0x1f4>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	21c8      	movs	r1, #200	; 0xc8
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4859      	ldr	r0, [pc, #356]	; (8006f34 <EthernetTask_func+0x1f8>)
 8006dce:	f7fe fc97 	bl	8005700 <xTimerCreate>
 8006dd2:	4605      	mov	r5, r0
	xTimerStart(xTimer_period_reset, 0);
 8006dd4:	f7fe f8e8 	bl	8004fa8 <xTaskGetTickCount>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4602      	mov	r2, r0
 8006ddc:	2101      	movs	r1, #1
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	4628      	mov	r0, r5
 8006de2:	f7fe fcb3 	bl	800574c <xTimerGenericCommand>
	vTaskDelay(2000);
 8006de6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006dea:	f7fe f9f1 	bl	80051d0 <vTaskDelay>
	  taskENTER_CRITICAL();
 8006dee:	f7fd fa39 	bl	8004264 <vPortEnterCritical>
	  if(DHCP_run() == DHCP_IP_LEASED)
 8006df2:	f000 fd77 	bl	80078e4 <DHCP_run>
 8006df6:	2804      	cmp	r0, #4
 8006df8:	d105      	bne.n	8006e06 <EthernetTask_func+0xca>
	    LED_VD5(RESET);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7fa fbc5 	bl	8001590 <HAL_GPIO_WritePin>
	  taskEXIT_CRITICAL();
 8006e06:	f7fd fa53 	bl	80042b0 <vPortExitCritical>
	  LED_VD1(SET);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2180      	movs	r1, #128	; 0x80
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7fa fbbe 	bl	8001590 <HAL_GPIO_WritePin>
	  if(!PIN_nINT)
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	483b      	ldr	r0, [pc, #236]	; (8006f04 <EthernetTask_func+0x1c8>)
 8006e18:	f7fa fbb4 	bl	8001584 <HAL_GPIO_ReadPin>
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	b980      	cbnz	r0, 8006e42 <EthernetTask_func+0x106>
		  LED_VD1(SET);
 8006e20:	2180      	movs	r1, #128	; 0x80
 8006e22:	2201      	movs	r2, #1
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7fa fbb3 	bl	8001590 <HAL_GPIO_WritePin>
		  disconnect(SOCKET0);
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f7fe ff14 	bl	8005c58 <disconnect>
		  setSn_IR(SOCKET0, getSn_IR(SOCKET0));
 8006e30:	f244 0002 	movw	r0, #16386	; 0x4002
 8006e34:	f7ff fada 	bl	80063ec <WIZCHIP_READ>
 8006e38:	4601      	mov	r1, r0
 8006e3a:	f244 0002 	movw	r0, #16386	; 0x4002
 8006e3e:	f7ff fab5 	bl	80063ac <WIZCHIP_WRITE>
	  switch (getSn_SR(SOCKET0)){
 8006e42:	f244 0003 	movw	r0, #16387	; 0x4003
 8006e46:	f7ff fad1 	bl	80063ec <WIZCHIP_READ>
 8006e4a:	2813      	cmp	r0, #19
 8006e4c:	d055      	beq.n	8006efa <EthernetTask_func+0x1be>
 8006e4e:	d808      	bhi.n	8006e62 <EthernetTask_func+0x126>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d04b      	beq.n	8006eec <EthernetTask_func+0x1b0>
	  HAL_IWDG_Refresh(&hiwdg1);
 8006e54:	4838      	ldr	r0, [pc, #224]	; (8006f38 <EthernetTask_func+0x1fc>)
 8006e56:	f7fa fbe0 	bl	800161a <HAL_IWDG_Refresh>
	  vTaskDelay(150);
 8006e5a:	2096      	movs	r0, #150	; 0x96
 8006e5c:	f7fe f9b8 	bl	80051d0 <vTaskDelay>
	  taskENTER_CRITICAL();
 8006e60:	e7c5      	b.n	8006dee <EthernetTask_func+0xb2>
	  switch (getSn_SR(SOCKET0)){
 8006e62:	2817      	cmp	r0, #23
 8006e64:	d012      	beq.n	8006e8c <EthernetTask_func+0x150>
 8006e66:	281c      	cmp	r0, #28
 8006e68:	d1f4      	bne.n	8006e54 <EthernetTask_func+0x118>
		  xTimerStart(xTimer_period_reset, 0);
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	f7fe f89c 	bl	8004fa8 <xTaskGetTickCount>
 8006e70:	2101      	movs	r1, #1
 8006e72:	4602      	mov	r2, r0
 8006e74:	9400      	str	r4, [sp, #0]
 8006e76:	4623      	mov	r3, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f7fe fc67 	bl	800574c <xTimerGenericCommand>
		  disconnect(SOCKET0);
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7fe feea 	bl	8005c58 <disconnect>
	    LED_VD2(RESET);
 8006e84:	2200      	movs	r2, #0
 8006e86:	2102      	movs	r1, #2
 8006e88:	481e      	ldr	r0, [pc, #120]	; (8006f04 <EthernetTask_func+0x1c8>)
 8006e8a:	e02c      	b.n	8006ee6 <EthernetTask_func+0x1aa>
	    if(xTimerIsTimerActive(xTimer_period_reset) != pdFALSE)
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f7fe fdb9 	bl	8005a04 <xTimerIsTimerActive>
 8006e92:	b130      	cbz	r0, 8006ea2 <EthernetTask_func+0x166>
	    xTimerStop(xTimer_period_reset, 0);
 8006e94:	2300      	movs	r3, #0
 8006e96:	2103      	movs	r1, #3
 8006e98:	4628      	mov	r0, r5
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f7fe fc55 	bl	800574c <xTimerGenericCommand>
		  LED_VD2(SET);
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	4817      	ldr	r0, [pc, #92]	; (8006f04 <EthernetTask_func+0x1c8>)
 8006ea8:	f7fa fb72 	bl	8001590 <HAL_GPIO_WritePin>
		  recv(SOCKET0,fobos_eth_buf.data_to_transmit, 258);
 8006eac:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006eb0:	a905      	add	r1, sp, #20
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f7fe ffcc 	bl	8005e50 <recv>
		  LED_VD1(SET);
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7fa fb67 	bl	8001590 <HAL_GPIO_WritePin>
		  eth_cmds_analysis(&fobos_eth_buf);
 8006ec2:	a805      	add	r0, sp, #20
 8006ec4:	f7ff fd00 	bl	80068c8 <eth_cmds_analysis>
		  uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <EthernetTask_func+0x200>)
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	6810      	ldr	r0, [r2, #0]
 8006ece:	6851      	ldr	r1, [r2, #4]
		  can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER3);
 8006ed0:	2208      	movs	r2, #8
		  uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 8006ed2:	c303      	stmia	r3!, {r0, r1}
		  can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER3);
 8006ed4:	9200      	str	r2, [sp, #0]
 8006ed6:	2180      	movs	r1, #128	; 0x80
 8006ed8:	ab03      	add	r3, sp, #12
 8006eda:	4819      	ldr	r0, [pc, #100]	; (8006f40 <EthernetTask_func+0x204>)
 8006edc:	f001 f83c 	bl	8007f58 <can_tx_func>
		  LED_VD1(RESET);
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2180      	movs	r1, #128	; 0x80
 8006ee4:	4630      	mov	r0, r6
	    LED_VD2(RESET);
 8006ee6:	f7fa fb53 	bl	8001590 <HAL_GPIO_WritePin>
		  break;
 8006eea:	e7b3      	b.n	8006e54 <EthernetTask_func+0x118>
	    socket(SOCKET0,Sn_MR_TCP,socket_port,0x00);
 8006eec:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <EthernetTask_func+0x1e8>)
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	8812      	ldrh	r2, [r2, #0]
 8006ef4:	f7fe fdf2 	bl	8005adc <socket>
 8006ef8:	e7c4      	b.n	8006e84 <EthernetTask_func+0x148>
	    listen(SOCKET0);
 8006efa:	2000      	movs	r0, #0
 8006efc:	f7fe fe78 	bl	8005bf0 <listen>
 8006f00:	e7c0      	b.n	8006e84 <EthernetTask_func+0x148>
 8006f02:	bf00      	nop
 8006f04:	58020c00 	.word	0x58020c00
 8006f08:	58020400 	.word	0x58020400
 8006f0c:	20004094 	.word	0x20004094
 8006f10:	20000048 	.word	0x20000048
 8006f14:	58020800 	.word	0x58020800
 8006f18:	20000042 	.word	0x20000042
 8006f1c:	2000003c 	.word	0x2000003c
 8006f20:	080085ec 	.word	0x080085ec
 8006f24:	20000040 	.word	0x20000040
 8006f28:	20000038 	.word	0x20000038
 8006f2c:	20003e50 	.word	0x20003e50
 8006f30:	080067f5 	.word	0x080067f5
 8006f34:	080085ba 	.word	0x080085ba
 8006f38:	20004124 	.word	0x20004124
 8006f3c:	080084f5 	.word	0x080084f5
 8006f40:	20004300 	.word	0x20004300

08006f44 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8006f44:	b508      	push	{r3, lr}
   setSIPR(DHCP_allocated_ip);
 8006f46:	2204      	movs	r2, #4
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <default_ip_assign+0x24>)
 8006f4a:	200f      	movs	r0, #15
 8006f4c:	f7ff fa6e 	bl	800642c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8006f50:	2204      	movs	r2, #4
 8006f52:	4906      	ldr	r1, [pc, #24]	; (8006f6c <default_ip_assign+0x28>)
 8006f54:	2005      	movs	r0, #5
 8006f56:	f7ff fa69 	bl	800642c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	4904      	ldr	r1, [pc, #16]	; (8006f70 <default_ip_assign+0x2c>)
 8006f5e:	2001      	movs	r0, #1
}
 8006f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setGAR (DHCP_allocated_gw);
 8006f64:	f7ff ba62 	b.w	800642c <WIZCHIP_WRITE_BUF>
 8006f68:	200040b3 	.word	0x200040b3
 8006f6c:	200040b7 	.word	0x200040b7
 8006f70:	200040af 	.word	0x200040af

08006f74 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8006f74:	b508      	push	{r3, lr}
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	2000      	movs	r0, #0
 8006f7a:	f7ff fa17 	bl	80063ac <WIZCHIP_WRITE>
   getMR(); // for delay
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f7ff fa34 	bl	80063ec <WIZCHIP_READ>
   default_ip_assign();
 8006f84:	f7ff ffde 	bl	8006f44 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8006f88:	2206      	movs	r2, #6
 8006f8a:	4903      	ldr	r1, [pc, #12]	; (8006f98 <default_ip_update+0x24>)
 8006f8c:	2009      	movs	r0, #9
}
 8006f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setSHAR(DHCP_CHADDR);
 8006f92:	f7ff ba4b 	b.w	800642c <WIZCHIP_WRITE_BUF>
 8006f96:	bf00      	nop
 8006f98:	2000410c 	.word	0x2000410c

08006f9c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8006f9c:	b508      	push	{r3, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 8006f9e:	2180      	movs	r1, #128	; 0x80
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	f7ff fa03 	bl	80063ac <WIZCHIP_WRITE>
	getMR(); // for delay
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f7ff fa20 	bl	80063ec <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8006fac:	2206      	movs	r2, #6
 8006fae:	4903      	ldr	r1, [pc, #12]	; (8006fbc <default_ip_conflict+0x20>)
 8006fb0:	2009      	movs	r0, #9
}
 8006fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	setSHAR(DHCP_CHADDR);
 8006fb6:	f7ff ba39 	b.w	800642c <WIZCHIP_WRITE_BUF>
 8006fba:	bf00      	nop
 8006fbc:	2000410c 	.word	0x2000410c

08006fc0 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8006fc0:	b507      	push	{r0, r1, r2, lr}
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8006fc2:	2206      	movs	r2, #6
 8006fc4:	4669      	mov	r1, sp
 8006fc6:	2009      	movs	r0, #9
 8006fc8:	f7ff fa5c 	bl	8006484 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8006fcc:	4b2c      	ldr	r3, [pc, #176]	; (8007080 <makeDHCPMSG+0xc0>)
 8006fce:	2201      	movs	r2, #1
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
	pDHCPMSG->hops    = DHCP_HOPS;
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006fd0:	492c      	ldr	r1, [pc, #176]	; (8007084 <makeDHCPMSG+0xc4>)
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8006fd6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8006fd8:	2206      	movs	r2, #6
 8006fda:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8006fdc:	2200      	movs	r2, #0
 8006fde:	70da      	strb	r2, [r3, #3]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006fe0:	6809      	ldr	r1, [r1, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);
	pDHCPMSG->secs    = DHCP_SECS;
 8006fe2:	811a      	strh	r2, [r3, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006fe4:	0e08      	lsrs	r0, r1, #24
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);
 8006fe6:	71d9      	strb	r1, [r3, #7]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8006fe8:	72da      	strb	r2, [r3, #11]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006fea:	7118      	strb	r0, [r3, #4]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8006fec:	0c08      	lsrs	r0, r1, #16

	pDHCPMSG->ciaddr[0] = 0;
 8006fee:	731a      	strb	r2, [r3, #12]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8006ff0:	7158      	strb	r0, [r3, #5]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8006ff2:	0a08      	lsrs	r0, r1, #8
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8006ff4:	2180      	movs	r1, #128	; 0x80
	pDHCPMSG->ciaddr[1] = 0;
 8006ff6:	735a      	strb	r2, [r3, #13]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8006ff8:	7198      	strb	r0, [r3, #6]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8006ffa:	7299      	strb	r1, [r3, #10]
	pDHCPMSG->giaddr[0] = 0;
	pDHCPMSG->giaddr[1] = 0;
	pDHCPMSG->giaddr[2] = 0;
	pDHCPMSG->giaddr[3] = 0;

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8006ffc:	4922      	ldr	r1, [pc, #136]	; (8007088 <makeDHCPMSG+0xc8>)
	pDHCPMSG->ciaddr[2] = 0;
 8006ffe:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8007000:	7808      	ldrb	r0, [r1, #0]
	pDHCPMSG->ciaddr[3] = 0;
 8007002:	73da      	strb	r2, [r3, #15]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8007004:	7718      	strb	r0, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8007006:	7848      	ldrb	r0, [r1, #1]
	pDHCPMSG->yiaddr[0] = 0;
 8007008:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800700a:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800700c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800700e:	74da      	strb	r2, [r3, #19]
	pDHCPMSG->siaddr[0] = 0;
 8007010:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8007012:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8007014:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8007016:	75da      	strb	r2, [r3, #23]
	pDHCPMSG->giaddr[0] = 0;
 8007018:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800701a:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800701c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800701e:	76da      	strb	r2, [r3, #27]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8007020:	7758      	strb	r0, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8007022:	7888      	ldrb	r0, [r1, #2]
 8007024:	7798      	strb	r0, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8007026:	78c8      	ldrb	r0, [r1, #3]
 8007028:	77d8      	strb	r0, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800702a:	7908      	ldrb	r0, [r1, #4]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800702c:	7949      	ldrb	r1, [r1, #5]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800702e:	f883 0020 	strb.w	r0, [r3, #32]
 8007032:	f103 002c 	add.w	r0, r3, #44	; 0x2c
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8007036:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 800703a:	f103 0122 	add.w	r1, r3, #34	; 0x22

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 800703e:	f801 2b01 	strb.w	r2, [r1], #1
 8007042:	4281      	cmp	r1, r0
 8007044:	d1fb      	bne.n	800703e <makeDHCPMSG+0x7e>
 8007046:	f103 026c 	add.w	r2, r3, #108	; 0x6c
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 800704a:	2000      	movs	r0, #0
 800704c:	f801 0b01 	strb.w	r0, [r1], #1
 8007050:	4291      	cmp	r1, r2
 8007052:	d1fb      	bne.n	800704c <makeDHCPMSG+0x8c>
 8007054:	f103 02ec 	add.w	r2, r3, #236	; 0xec
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8007058:	2000      	movs	r0, #0
 800705a:	428a      	cmp	r2, r1
 800705c:	d10d      	bne.n	800707a <makeDHCPMSG+0xba>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800705e:	2182      	movs	r1, #130	; 0x82
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8007060:	2263      	movs	r2, #99	; 0x63
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8007062:	f883 10ed 	strb.w	r1, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8007066:	2153      	movs	r1, #83	; 0x53
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8007068:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800706c:	f883 10ee 	strb.w	r1, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8007070:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8007074:	b003      	add	sp, #12
 8007076:	f85d fb04 	ldr.w	pc, [sp], #4
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 800707a:	f801 0b01 	strb.w	r0, [r1], #1
 800707e:	e7ec      	b.n	800705a <makeDHCPMSG+0x9a>
 8007080:	2000411c 	.word	0x2000411c
 8007084:	20004114 	.word	0x20004114
 8007088:	2000410c 	.word	0x2000410c

0800708c <send_DHCP_DECLINE>:

}

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800708c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int i;
	uint8_t ip[4];
	uint16_t k = 0;

	makeDHCPMSG();
 800708e:	f7ff ff97 	bl	8006fc0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()

	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8007092:	4b36      	ldr	r3, [pc, #216]	; (800716c <send_DHCP_DECLINE+0xe0>)
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007094:	243d      	movs	r4, #61	; 0x3d
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8007096:	2200      	movs	r2, #0
 8007098:	6819      	ldr	r1, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800709a:	2335      	movs	r3, #53	; 0x35
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800709c:	2004      	movs	r0, #4
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800709e:	f881 30f0 	strb.w	r3, [r1, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
 80070a2:	2301      	movs	r3, #1
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80070a4:	f881 40f3 	strb.w	r4, [r1, #243]	; 0xf3
	pDHCPMSG->OPT[k++] = 0x07;
 80070a8:	2407      	movs	r4, #7
	pDHCPMSG->OPT[k++] = 0x01;
 80070aa:	f881 30f1 	strb.w	r3, [r1, #241]	; 0xf1
	pDHCPMSG->OPT[k++] = 0x01;
 80070ae:	f881 30f5 	strb.w	r3, [r1, #245]	; 0xf5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80070b2:	4b2f      	ldr	r3, [pc, #188]	; (8007170 <send_DHCP_DECLINE+0xe4>)
	pDHCPMSG->OPT[k++] = 0x07;
 80070b4:	f881 40f4 	strb.w	r4, [r1, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80070b8:	781c      	ldrb	r4, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80070ba:	728a      	strb	r2, [r1, #10]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80070bc:	f881 40f6 	strb.w	r4, [r1, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80070c0:	785c      	ldrb	r4, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80070c2:	f881 00f2 	strb.w	r0, [r1, #242]	; 0xf2
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80070c6:	f881 40f7 	strb.w	r4, [r1, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80070ca:	789c      	ldrb	r4, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
	pDHCPMSG->OPT[k++] = 0x04;
 80070cc:	f881 00fd 	strb.w	r0, [r1, #253]	; 0xfd
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80070d0:	f881 40f8 	strb.w	r4, [r1, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80070d4:	78dc      	ldrb	r4, [r3, #3]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80070d6:	72ca      	strb	r2, [r1, #11]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80070d8:	f881 40f9 	strb.w	r4, [r1, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80070dc:	791c      	ldrb	r4, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80070de:	795b      	ldrb	r3, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80070e0:	f881 40fa 	strb.w	r4, [r1, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80070e4:	f881 30fb 	strb.w	r3, [r1, #251]	; 0xfb
	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80070e8:	2332      	movs	r3, #50	; 0x32
 80070ea:	f881 30fc 	strb.w	r3, [r1, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80070ee:	4b21      	ldr	r3, [pc, #132]	; (8007174 <send_DHCP_DECLINE+0xe8>)
 80070f0:	781c      	ldrb	r4, [r3, #0]
 80070f2:	f881 40fe 	strb.w	r4, [r1, #254]	; 0xfe
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80070f6:	785c      	ldrb	r4, [r3, #1]
 80070f8:	f881 40ff 	strb.w	r4, [r1, #255]	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80070fc:	789c      	ldrb	r4, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80070fe:	78db      	ldrb	r3, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8007100:	f881 4100 	strb.w	r4, [r1, #256]	; 0x100
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8007104:	f881 3101 	strb.w	r3, [r1, #257]	; 0x101

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8007108:	2336      	movs	r3, #54	; 0x36
 800710a:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
	pDHCPMSG->OPT[k++] = 0x04;
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <send_DHCP_DECLINE+0xec>)
	pDHCPMSG->OPT[k++] = 0x04;
 8007110:	f881 0103 	strb.w	r0, [r1, #259]	; 0x103
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8007114:	7818      	ldrb	r0, [r3, #0]
 8007116:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800711a:	7858      	ldrb	r0, [r3, #1]
 800711c:	f881 0105 	strb.w	r0, [r1, #261]	; 0x105
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8007120:	7898      	ldrb	r0, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8007122:	78db      	ldrb	r3, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8007124:	f881 0106 	strb.w	r0, [r1, #262]	; 0x106
 8007128:	f501 7009 	add.w	r0, r1, #548	; 0x224
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800712c:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107

	pDHCPMSG->OPT[k++] = endOption;
 8007130:	23ff      	movs	r3, #255	; 0xff
 8007132:	f881 3108 	strb.w	r3, [r1, #264]	; 0x108
 8007136:	f201 1309 	addw	r3, r1, #265	; 0x109

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800713a:	f803 2b01 	strb.w	r2, [r3], #1
 800713e:	4283      	cmp	r3, r0
 8007140:	d1fb      	bne.n	800713a <send_DHCP_DECLINE+0xae>

	//send broadcasting packet
	ip[0] = 0xFF;
 8007142:	23ff      	movs	r3, #255	; 0xff

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007144:	f44f 7209 	mov.w	r2, #548	; 0x224
	ip[0] = 0xFF;
 8007148:	f88d 300c 	strb.w	r3, [sp, #12]
	ip[1] = 0xFF;
 800714c:	f88d 300d 	strb.w	r3, [sp, #13]
	ip[2] = 0xFF;
 8007150:	f88d 300e 	strb.w	r3, [sp, #14]
	ip[3] = 0xFF;
 8007154:	f88d 300f 	strb.w	r3, [sp, #15]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007158:	4b08      	ldr	r3, [pc, #32]	; (800717c <send_DHCP_DECLINE+0xf0>)
 800715a:	7818      	ldrb	r0, [r3, #0]
 800715c:	2343      	movs	r3, #67	; 0x43
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	ab03      	add	r3, sp, #12
 8007162:	f7fe fee5 	bl	8005f30 <sendto>
}
 8007166:	b004      	add	sp, #16
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop
 800716c:	2000411c 	.word	0x2000411c
 8007170:	2000410c 	.word	0x2000410c
 8007174:	200040b3 	.word	0x200040b3
 8007178:	20004118 	.word	0x20004118
 800717c:	20004120 	.word	0x20004120

08007180 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8007180:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
	uint8_t opt_len;

   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8007182:	4d55      	ldr	r5, [pc, #340]	; (80072d8 <parseDHCPMSG+0x158>)
{
 8007184:	b087      	sub	sp, #28
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8007186:	7828      	ldrb	r0, [r5, #0]
 8007188:	f7ff f9c7 	bl	800651a <getSn_RX_RSR>
 800718c:	4602      	mov	r2, r0
 800718e:	b910      	cbnz	r0, 8007196 <parseDHCPMSG+0x16>
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
   #ifdef _DHCP_DEBUG_
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif
   }
   else return 0;
 8007190:	2000      	movs	r0, #0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
 8007192:	b007      	add	sp, #28
 8007194:	bdf0      	pop	{r4, r5, r6, r7, pc}
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8007196:	f10d 030e 	add.w	r3, sp, #14
 800719a:	4c50      	ldr	r4, [pc, #320]	; (80072dc <parseDHCPMSG+0x15c>)
 800719c:	7828      	ldrb	r0, [r5, #0]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	ab04      	add	r3, sp, #16
 80071a2:	6821      	ldr	r1, [r4, #0]
 80071a4:	f7fe ff98 	bl	80060d8 <recvfrom>
	if (svr_port == DHCP_SERVER_PORT) {
 80071a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80071ac:	2b43      	cmp	r3, #67	; 0x43
 80071ae:	f040 8091 	bne.w	80072d4 <parseDHCPMSG+0x154>
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	4b4a      	ldr	r3, [pc, #296]	; (80072e0 <parseDHCPMSG+0x160>)
 80071b6:	7f14      	ldrb	r4, [r2, #28]
 80071b8:	7819      	ldrb	r1, [r3, #0]
 80071ba:	428c      	cmp	r4, r1
 80071bc:	d1e8      	bne.n	8007190 <parseDHCPMSG+0x10>
 80071be:	7f54      	ldrb	r4, [r2, #29]
 80071c0:	7859      	ldrb	r1, [r3, #1]
 80071c2:	428c      	cmp	r4, r1
 80071c4:	d1e4      	bne.n	8007190 <parseDHCPMSG+0x10>
 80071c6:	7f94      	ldrb	r4, [r2, #30]
 80071c8:	7899      	ldrb	r1, [r3, #2]
 80071ca:	428c      	cmp	r4, r1
 80071cc:	d1e0      	bne.n	8007190 <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80071ce:	7fd4      	ldrb	r4, [r2, #31]
 80071d0:	78d9      	ldrb	r1, [r3, #3]
 80071d2:	428c      	cmp	r4, r1
 80071d4:	d1dc      	bne.n	8007190 <parseDHCPMSG+0x10>
 80071d6:	f892 4020 	ldrb.w	r4, [r2, #32]
 80071da:	7919      	ldrb	r1, [r3, #4]
 80071dc:	428c      	cmp	r4, r1
 80071de:	d1d7      	bne.n	8007190 <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80071e0:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80071e4:	795b      	ldrb	r3, [r3, #5]
 80071e6:	4299      	cmp	r1, r3
 80071e8:	d1d2      	bne.n	8007190 <parseDHCPMSG+0x10>
		e = p + (len - 240);
 80071ea:	f102 03f0 	add.w	r3, r2, #240	; 0xf0
   				DHCP_allocated_dns[0] = *p++;
 80071ee:	4c3d      	ldr	r4, [pc, #244]	; (80072e4 <parseDHCPMSG+0x164>)
		e = p + (len - 240);
 80071f0:	fa12 f280 	uxtah	r2, r2, r0
   				DHCP_SIP[0] = *p++;
 80071f4:	4d3c      	ldr	r5, [pc, #240]	; (80072e8 <parseDHCPMSG+0x168>)
	uint8_t type = 0;
 80071f6:	2000      	movs	r0, #0
   				dhcp_lease_time  = *p++;
 80071f8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80072f4 <parseDHCPMSG+0x174>
   				DHCP_allocated_sn[0] = *p++;
 80071fc:	4e3b      	ldr	r6, [pc, #236]	; (80072ec <parseDHCPMSG+0x16c>)
   				DHCP_allocated_gw[0] = *p++;
 80071fe:	4f3c      	ldr	r7, [pc, #240]	; (80072f0 <parseDHCPMSG+0x170>)
		while ( p < e ) {
 8007200:	4293      	cmp	r3, r2
 8007202:	d301      	bcc.n	8007208 <parseDHCPMSG+0x88>
	return	type;
 8007204:	b240      	sxtb	r0, r0
 8007206:	e7c4      	b.n	8007192 <parseDHCPMSG+0x12>
			switch ( *p ) {
 8007208:	7819      	ldrb	r1, [r3, #0]
 800720a:	2906      	cmp	r1, #6
 800720c:	d047      	beq.n	800729e <parseDHCPMSG+0x11e>
 800720e:	d808      	bhi.n	8007222 <parseDHCPMSG+0xa2>
 8007210:	2901      	cmp	r1, #1
 8007212:	d026      	beq.n	8007262 <parseDHCPMSG+0xe2>
 8007214:	d320      	bcc.n	8007258 <parseDHCPMSG+0xd8>
 8007216:	2903      	cmp	r1, #3
 8007218:	d02d      	beq.n	8007276 <parseDHCPMSG+0xf6>
   				opt_len = *p++;
 800721a:	1c99      	adds	r1, r3, #2
   				p += opt_len;
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	440b      	add	r3, r1
   				break;
 8007220:	e7ee      	b.n	8007200 <parseDHCPMSG+0x80>
			switch ( *p ) {
 8007222:	2935      	cmp	r1, #53	; 0x35
 8007224:	d01a      	beq.n	800725c <parseDHCPMSG+0xdc>
 8007226:	d811      	bhi.n	800724c <parseDHCPMSG+0xcc>
 8007228:	2933      	cmp	r1, #51	; 0x33
 800722a:	d1f6      	bne.n	800721a <parseDHCPMSG+0x9a>
   				dhcp_lease_time  = *p++;
 800722c:	7899      	ldrb	r1, [r3, #2]
 800722e:	f8cc 1000 	str.w	r1, [ip]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8007232:	f893 e003 	ldrb.w	lr, [r3, #3]
 8007236:	eb0e 2e01 	add.w	lr, lr, r1, lsl #8
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800723a:	7919      	ldrb	r1, [r3, #4]
 800723c:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8007240:	7959      	ldrb	r1, [r3, #5]
 8007242:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8007246:	f8cc 1000 	str.w	r1, [ip]
 800724a:	e012      	b.n	8007272 <parseDHCPMSG+0xf2>
			switch ( *p ) {
 800724c:	2936      	cmp	r1, #54	; 0x36
 800724e:	d038      	beq.n	80072c2 <parseDHCPMSG+0x142>
 8007250:	29ff      	cmp	r1, #255	; 0xff
 8007252:	d1e2      	bne.n	800721a <parseDHCPMSG+0x9a>
 8007254:	4613      	mov	r3, r2
 8007256:	e7d3      	b.n	8007200 <parseDHCPMSG+0x80>
   				p++;
 8007258:	3301      	adds	r3, #1
   				break;
 800725a:	e7d1      	b.n	8007200 <parseDHCPMSG+0x80>
   				type = *p++;
 800725c:	7898      	ldrb	r0, [r3, #2]
 800725e:	3303      	adds	r3, #3
   				break;
 8007260:	e7ce      	b.n	8007200 <parseDHCPMSG+0x80>
   				DHCP_allocated_sn[0] = *p++;
 8007262:	7899      	ldrb	r1, [r3, #2]
 8007264:	7031      	strb	r1, [r6, #0]
   				DHCP_allocated_sn[1] = *p++;
 8007266:	78d9      	ldrb	r1, [r3, #3]
 8007268:	7071      	strb	r1, [r6, #1]
   				DHCP_allocated_sn[2] = *p++;
 800726a:	7919      	ldrb	r1, [r3, #4]
 800726c:	70b1      	strb	r1, [r6, #2]
   				DHCP_allocated_sn[3] = *p++;
 800726e:	7959      	ldrb	r1, [r3, #5]
 8007270:	70f1      	strb	r1, [r6, #3]
   				DHCP_SIP[3] = *p++;
 8007272:	3306      	adds	r3, #6
   				break;
 8007274:	e7c4      	b.n	8007200 <parseDHCPMSG+0x80>
   				DHCP_allocated_gw[0] = *p++;
 8007276:	f893 e002 	ldrb.w	lr, [r3, #2]
   				opt_len = *p++;
 800727a:	7859      	ldrb	r1, [r3, #1]
   				DHCP_allocated_gw[0] = *p++;
 800727c:	f887 e000 	strb.w	lr, [r7]
   				DHCP_allocated_gw[1] = *p++;
 8007280:	f893 e003 	ldrb.w	lr, [r3, #3]
 8007284:	f887 e001 	strb.w	lr, [r7, #1]
   				DHCP_allocated_gw[2] = *p++;
 8007288:	f893 e004 	ldrb.w	lr, [r3, #4]
 800728c:	f887 e002 	strb.w	lr, [r7, #2]
   				DHCP_allocated_gw[3] = *p++;
 8007290:	f893 e005 	ldrb.w	lr, [r3, #5]
 8007294:	f887 e003 	strb.w	lr, [r7, #3]
   				p = p + (opt_len - 4);
 8007298:	440b      	add	r3, r1
 800729a:	3302      	adds	r3, #2
   				break;
 800729c:	e7b0      	b.n	8007200 <parseDHCPMSG+0x80>
   				DHCP_allocated_dns[0] = *p++;
 800729e:	f893 e002 	ldrb.w	lr, [r3, #2]
   				opt_len = *p++;
 80072a2:	7859      	ldrb	r1, [r3, #1]
   				DHCP_allocated_dns[0] = *p++;
 80072a4:	f884 e000 	strb.w	lr, [r4]
   				DHCP_allocated_dns[1] = *p++;
 80072a8:	f893 e003 	ldrb.w	lr, [r3, #3]
 80072ac:	f884 e001 	strb.w	lr, [r4, #1]
   				DHCP_allocated_dns[2] = *p++;
 80072b0:	f893 e004 	ldrb.w	lr, [r3, #4]
 80072b4:	f884 e002 	strb.w	lr, [r4, #2]
   				DHCP_allocated_dns[3] = *p++;
 80072b8:	f893 e005 	ldrb.w	lr, [r3, #5]
 80072bc:	f884 e003 	strb.w	lr, [r4, #3]
 80072c0:	e7ea      	b.n	8007298 <parseDHCPMSG+0x118>
   				DHCP_SIP[0] = *p++;
 80072c2:	7899      	ldrb	r1, [r3, #2]
 80072c4:	7029      	strb	r1, [r5, #0]
   				DHCP_SIP[1] = *p++;
 80072c6:	78d9      	ldrb	r1, [r3, #3]
 80072c8:	7069      	strb	r1, [r5, #1]
   				DHCP_SIP[2] = *p++;
 80072ca:	7919      	ldrb	r1, [r3, #4]
 80072cc:	70a9      	strb	r1, [r5, #2]
   				DHCP_SIP[3] = *p++;
 80072ce:	7959      	ldrb	r1, [r3, #5]
 80072d0:	70e9      	strb	r1, [r5, #3]
 80072d2:	e7ce      	b.n	8007272 <parseDHCPMSG+0xf2>
	uint8_t type = 0;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e795      	b.n	8007204 <parseDHCPMSG+0x84>
 80072d8:	20004120 	.word	0x20004120
 80072dc:	2000411c 	.word	0x2000411c
 80072e0:	2000410c 	.word	0x2000410c
 80072e4:	200040ab 	.word	0x200040ab
 80072e8:	20004118 	.word	0x20004118
 80072ec:	200040b7 	.word	0x200040b7
 80072f0:	200040af 	.word	0x200040af
 80072f4:	20000060 	.word	0x20000060

080072f8 <check_DHCP_leasedIP>:
	}
	return ret;
}

int8_t check_DHCP_leasedIP(void)
{
 80072f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80072fa:	2019      	movs	r0, #25
 80072fc:	f7ff f876 	bl	80063ec <WIZCHIP_READ>
	setRCR(0x03);
 8007300:	2103      	movs	r1, #3
	tmp = getRCR();
 8007302:	4605      	mov	r5, r0
	setRCR(0x03);
 8007304:	2019      	movs	r0, #25
 8007306:	f7ff f851 	bl	80063ac <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <check_DHCP_leasedIP+0x50>)
 800730c:	2211      	movs	r2, #17
 800730e:	490f      	ldr	r1, [pc, #60]	; (800734c <check_DHCP_leasedIP+0x54>)
 8007310:	7818      	ldrb	r0, [r3, #0]
 8007312:	f241 3388 	movw	r3, #5000	; 0x1388
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <check_DHCP_leasedIP+0x58>)
 800731a:	f7fe fe09 	bl	8005f30 <sendto>
 800731e:	4604      	mov	r4, r0

	// RCR value restore
	setRCR(tmp);
 8007320:	4629      	mov	r1, r5
 8007322:	2019      	movs	r0, #25
 8007324:	f7ff f842 	bl	80063ac <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8007328:	340d      	adds	r4, #13
 800732a:	d00a      	beq.n	8007342 <check_DHCP_leasedIP+0x4a>
#endif

		return 1;
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800732c:	f7ff feae 	bl	800708c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8007330:	4b08      	ldr	r3, [pc, #32]	; (8007354 <check_DHCP_leasedIP+0x5c>)
 8007332:	6819      	ldr	r1, [r3, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	1a52      	subs	r2, r2, r1
 8007338:	2a01      	cmp	r2, #1
 800733a:	d9fb      	bls.n	8007334 <check_DHCP_leasedIP+0x3c>
 800733c:	2000      	movs	r0, #0

		return 0;
	}
}
 800733e:	b003      	add	sp, #12
 8007340:	bd30      	pop	{r4, r5, pc}
		return 1;
 8007342:	2001      	movs	r0, #1
 8007344:	e7fb      	b.n	800733e <check_DHCP_leasedIP+0x46>
 8007346:	bf00      	nop
 8007348:	20004120 	.word	0x20004120
 800734c:	080085f2 	.word	0x080085f2
 8007350:	200040b3 	.word	0x200040b3
 8007354:	200040c4 	.word	0x200040c4

08007358 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <reset_DHCP_timeout+0x14>)
	dhcp_tick_next = DHCP_WAIT_TIME;
 800735c:	210a      	movs	r1, #10
	dhcp_tick_1s = 0;
 800735e:	6013      	str	r3, [r2, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8007360:	4a03      	ldr	r2, [pc, #12]	; (8007370 <reset_DHCP_timeout+0x18>)
 8007362:	6011      	str	r1, [r2, #0]
	dhcp_retry_count = 0;
 8007364:	4a03      	ldr	r2, [pc, #12]	; (8007374 <reset_DHCP_timeout+0x1c>)
 8007366:	7013      	strb	r3, [r2, #0]
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	200040c4 	.word	0x200040c4
 8007370:	20000064 	.word	0x20000064
 8007374:	200040bf 	.word	0x200040bf

08007378 <DHCP_init>:
{
 8007378:	b573      	push	{r0, r1, r4, r5, r6, lr}
   getSHAR(DHCP_CHADDR);
 800737a:	4e1e      	ldr	r6, [pc, #120]	; (80073f4 <DHCP_init+0x7c>)
   uint8_t zeroip[4] = {0,0,0,0};
 800737c:	2300      	movs	r3, #0
   getSHAR(DHCP_CHADDR);
 800737e:	2206      	movs	r2, #6
{
 8007380:	4605      	mov	r5, r0
 8007382:	460c      	mov	r4, r1
   getSHAR(DHCP_CHADDR);
 8007384:	2009      	movs	r0, #9
 8007386:	4631      	mov	r1, r6
   uint8_t zeroip[4] = {0,0,0,0};
 8007388:	9301      	str	r3, [sp, #4]
   getSHAR(DHCP_CHADDR);
 800738a:	f7ff f87b 	bl	8006484 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800738e:	7872      	ldrb	r2, [r6, #1]
 8007390:	7833      	ldrb	r3, [r6, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	78b2      	ldrb	r2, [r6, #2]
 8007396:	4313      	orrs	r3, r2
 8007398:	78f2      	ldrb	r2, [r6, #3]
 800739a:	4313      	orrs	r3, r2
 800739c:	7932      	ldrb	r2, [r6, #4]
 800739e:	4313      	orrs	r3, r2
 80073a0:	7972      	ldrb	r2, [r6, #5]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	d10c      	bne.n	80073c0 <DHCP_init+0x48>
      DHCP_CHADDR[1] = 0x08;
 80073a6:	2208      	movs	r2, #8
      setSHAR(DHCP_CHADDR);
 80073a8:	4631      	mov	r1, r6
 80073aa:	2009      	movs	r0, #9
      DHCP_CHADDR[0] = 0x00;
 80073ac:	7033      	strb	r3, [r6, #0]
      DHCP_CHADDR[1] = 0x08;
 80073ae:	7072      	strb	r2, [r6, #1]
      DHCP_CHADDR[2] = 0xdc;
 80073b0:	22dc      	movs	r2, #220	; 0xdc
      DHCP_CHADDR[3] = 0x00;
 80073b2:	70f3      	strb	r3, [r6, #3]
      DHCP_CHADDR[2] = 0xdc;
 80073b4:	70b2      	strb	r2, [r6, #2]
      setSHAR(DHCP_CHADDR);
 80073b6:	2206      	movs	r2, #6
      DHCP_CHADDR[4] = 0x00;
 80073b8:	7133      	strb	r3, [r6, #4]
      DHCP_CHADDR[5] = 0x00;
 80073ba:	7173      	strb	r3, [r6, #5]
      setSHAR(DHCP_CHADDR);
 80073bc:	f7ff f836 	bl	800642c <WIZCHIP_WRITE_BUF>
	DHCP_SOCKET = s; // SOCK_DHCP
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <DHCP_init+0x80>)
	setSIPR(zeroip);
 80073c2:	200f      	movs	r0, #15
	DHCP_XID = 0x12345678;
 80073c4:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <DHCP_init+0x84>)
	DHCP_SOCKET = s; // SOCK_DHCP
 80073c6:	701d      	strb	r5, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80073c8:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <DHCP_init+0x88>)
 80073ca:	601c      	str	r4, [r3, #0]
	DHCP_XID = 0x12345678;
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <DHCP_init+0x8c>)
 80073ce:	601a      	str	r2, [r3, #0]
	setSIPR(zeroip);
 80073d0:	2204      	movs	r2, #4
 80073d2:	eb0d 0102 	add.w	r1, sp, r2
 80073d6:	f7ff f829 	bl	800642c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80073da:	2204      	movs	r2, #4
 80073dc:	2001      	movs	r0, #1
 80073de:	eb0d 0102 	add.w	r1, sp, r2
 80073e2:	f7ff f823 	bl	800642c <WIZCHIP_WRITE_BUF>
	reset_DHCP_timeout();
 80073e6:	f7ff ffb7 	bl	8007358 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <DHCP_init+0x90>)
 80073ee:	701a      	strb	r2, [r3, #0]
}
 80073f0:	b002      	add	sp, #8
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	2000410c 	.word	0x2000410c
 80073f8:	20004120 	.word	0x20004120
 80073fc:	12345678 	.word	0x12345678
 8007400:	2000411c 	.word	0x2000411c
 8007404:	20004114 	.word	0x20004114
 8007408:	200040c0 	.word	0x200040c0

0800740c <NibbleToHex>:
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
 800740c:	f000 000f 	and.w	r0, r0, #15
  if (nibble <= 9)
 8007410:	2809      	cmp	r0, #9
    return nibble + '0';
 8007412:	bf94      	ite	ls
 8007414:	3030      	addls	r0, #48	; 0x30
  else
    return nibble + ('A'-0x0A);
 8007416:	3037      	addhi	r0, #55	; 0x37
}
 8007418:	4770      	bx	lr
	...

0800741c <send_DHCP_DISCOVER>:
{
 800741c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007420:	b085      	sub	sp, #20
   makeDHCPMSG();
 8007422:	f7ff fdcd 	bl	8006fc0 <makeDHCPMSG>
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8007426:	4b6b      	ldr	r3, [pc, #428]	; (80075d4 <send_DHCP_DISCOVER+0x1b8>)
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007428:	223d      	movs	r2, #61	; 0x3d
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800742a:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 80075e0 <send_DHCP_DISCOVER+0x1c4>
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	2335      	movs	r3, #53	; 0x35
 8007432:	f881 30f0 	strb.w	r3, [r1, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
 8007436:	2301      	movs	r3, #1
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007438:	f881 20f3 	strb.w	r2, [r1, #243]	; 0xf3
	pDHCPMSG->OPT[k++] = 0x07;
 800743c:	2207      	movs	r2, #7
	pDHCPMSG->OPT[k++] = 0x01;
 800743e:	f881 30f1 	strb.w	r3, [r1, #241]	; 0xf1
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8007442:	f881 30f2 	strb.w	r3, [r1, #242]	; 0xf2
	pDHCPMSG->OPT[k++] = 0x01;
 8007446:	f881 30f5 	strb.w	r3, [r1, #245]	; 0xf5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800744a:	4b63      	ldr	r3, [pc, #396]	; (80075d8 <send_DHCP_DISCOVER+0x1bc>)
	pDHCPMSG->OPT[k++] = 0x07;
 800744c:	f881 20f4 	strb.w	r2, [r1, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8007450:	781a      	ldrb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007452:	f893 9003 	ldrb.w	r9, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8007456:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800745a:	785a      	ldrb	r2, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800745c:	f893 8004 	ldrb.w	r8, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8007460:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8007464:	789a      	ldrb	r2, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007466:	795f      	ldrb	r7, [r3, #5]
	pDHCPMSG->OPT[k++] = hostName;
 8007468:	230c      	movs	r3, #12
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800746a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname
 800746e:	2200      	movs	r2, #0
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007470:	f881 90f9 	strb.w	r9, [r1, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007474:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007478:	f881 70fb 	strb.w	r7, [r1, #251]	; 0xfb
	pDHCPMSG->OPT[k++] = hostName;
 800747c:	f881 30fc 	strb.w	r3, [r1, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname
 8007480:	f881 20fd 	strb.w	r2, [r1, #253]	; 0xfd
 8007484:	b293      	uxth	r3, r2
 8007486:	1c50      	adds	r0, r2, #1
 8007488:	f103 0612 	add.w	r6, r3, #18
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800748c:	f81e 5003 	ldrb.w	r5, [lr, r3]
 8007490:	461c      	mov	r4, r3
 8007492:	fa11 f686 	uxtah	r6, r1, r6
 8007496:	2d00      	cmp	r5, #0
 8007498:	f040 8092 	bne.w	80075c0 <send_DHCP_DISCOVER+0x1a4>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 800749c:	ea4f 1019 	mov.w	r0, r9, lsr #4
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80074a0:	3407      	adds	r4, #7
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 80074a2:	f7ff ffb3 	bl	800740c <NibbleToHex>
 80074a6:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80074aa:	4648      	mov	r0, r9
 80074ac:	f7ff ffae 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 80074b0:	f103 0613 	add.w	r6, r3, #19
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80074b4:	fa11 f686 	uxtah	r6, r1, r6
 80074b8:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 80074bc:	ea4f 1018 	mov.w	r0, r8, lsr #4
 80074c0:	f7ff ffa4 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80074c4:	f103 0614 	add.w	r6, r3, #20
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 80074c8:	fa11 f686 	uxtah	r6, r1, r6
 80074cc:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80074d0:	4640      	mov	r0, r8
 80074d2:	f7ff ff9b 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 80074d6:	f103 0615 	add.w	r6, r3, #21
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80074da:	fa11 f686 	uxtah	r6, r1, r6
 80074de:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 80074e2:	0938      	lsrs	r0, r7, #4
 80074e4:	f7ff ff92 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80074e8:	f103 0616 	add.w	r6, r3, #22
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 80074ec:	fa11 f686 	uxtah	r6, r1, r6
 80074f0:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80074f4:	4638      	mov	r0, r7
 80074f6:	f7ff ff89 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 80074fa:	f103 0617 	add.w	r6, r3, #23
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80074fe:	3206      	adds	r2, #6
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8007500:	fa11 f686 	uxtah	r6, r1, r6
 8007504:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 8007508:	f103 0018 	add.w	r0, r3, #24
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800750c:	b280      	uxth	r0, r0
 800750e:	1b04      	subs	r4, r0, r4
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8007510:	4408      	add	r0, r1
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8007512:	440c      	add	r4, r1
 8007514:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8007518:	2237      	movs	r2, #55	; 0x37
	pDHCPMSG->OPT[k++] = subnetMask;
 800751a:	2401      	movs	r4, #1
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800751c:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
 8007520:	f103 0219 	add.w	r2, r3, #25
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8007524:	2006      	movs	r0, #6
 8007526:	fa11 f282 	uxtah	r2, r1, r2
 800752a:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 800752e:	f103 021a 	add.w	r2, r3, #26
	pDHCPMSG->OPT[k++] = subnetMask;
 8007532:	fa11 f282 	uxtah	r2, r1, r2
 8007536:	f882 40ec 	strb.w	r4, [r2, #236]	; 0xec
 800753a:	f103 021b 	add.w	r2, r3, #27
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800753e:	2403      	movs	r4, #3
 8007540:	fa11 f282 	uxtah	r2, r1, r2
 8007544:	f882 40ec 	strb.w	r4, [r2, #236]	; 0xec
 8007548:	f103 021c 	add.w	r2, r3, #28
	pDHCPMSG->OPT[k++] = dns;
 800754c:	fa11 f282 	uxtah	r2, r1, r2
 8007550:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 8007554:	f103 021d 	add.w	r2, r3, #29
	pDHCPMSG->OPT[k++] = domainName;
 8007558:	200f      	movs	r0, #15
 800755a:	fa11 f282 	uxtah	r2, r1, r2
 800755e:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 8007562:	f103 021e 	add.w	r2, r3, #30
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8007566:	203a      	movs	r0, #58	; 0x3a
 8007568:	fa11 f282 	uxtah	r2, r1, r2
 800756c:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 8007570:	f103 021f 	add.w	r2, r3, #31
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8007574:	203b      	movs	r0, #59	; 0x3b
 8007576:	fa11 f282 	uxtah	r2, r1, r2
 800757a:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800757e:	f103 0221 	add.w	r2, r3, #33	; 0x21
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8007582:	3320      	adds	r3, #32
	pDHCPMSG->OPT[k++] = endOption;
 8007584:	20ff      	movs	r0, #255	; 0xff
 8007586:	b292      	uxth	r2, r2
 8007588:	fa11 f383 	uxtah	r3, r1, r3
 800758c:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8007590:	f5b2 7f9c 	cmp.w	r2, #312	; 0x138
 8007594:	d318      	bcc.n	80075c8 <send_DHCP_DISCOVER+0x1ac>
	ip[0] = 255;
 8007596:	23ff      	movs	r3, #255	; 0xff
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007598:	f44f 7209 	mov.w	r2, #548	; 0x224
	ip[0] = 255;
 800759c:	f88d 300c 	strb.w	r3, [sp, #12]
	ip[1] = 255;
 80075a0:	f88d 300d 	strb.w	r3, [sp, #13]
	ip[2] = 255;
 80075a4:	f88d 300e 	strb.w	r3, [sp, #14]
	ip[3] = 255;
 80075a8:	f88d 300f 	strb.w	r3, [sp, #15]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <send_DHCP_DISCOVER+0x1c0>)
 80075ae:	7818      	ldrb	r0, [r3, #0]
 80075b0:	2343      	movs	r3, #67	; 0x43
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	ab03      	add	r3, sp, #12
 80075b6:	f7fe fcbb 	bl	8005f30 <sendto>
}
 80075ba:	b005      	add	sp, #20
 80075bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80075c0:	f886 50ec 	strb.w	r5, [r6, #236]	; 0xec
 80075c4:	4602      	mov	r2, r0
 80075c6:	e75d      	b.n	8007484 <send_DHCP_DISCOVER+0x68>
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80075c8:	188b      	adds	r3, r1, r2
 80075ca:	3201      	adds	r2, #1
 80075cc:	f883 50ec 	strb.w	r5, [r3, #236]	; 0xec
 80075d0:	b292      	uxth	r2, r2
 80075d2:	e7dd      	b.n	8007590 <send_DHCP_DISCOVER+0x174>
 80075d4:	2000411c 	.word	0x2000411c
 80075d8:	2000410c 	.word	0x2000410c
 80075dc:	20004120 	.word	0x20004120
 80075e0:	2000004c 	.word	0x2000004c

080075e4 <send_DHCP_REQUEST>:
{
 80075e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   makeDHCPMSG();
 80075e8:	f7ff fcea 	bl	8006fc0 <makeDHCPMSG>
   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80075ec:	4b95      	ldr	r3, [pc, #596]	; (8007844 <send_DHCP_REQUEST+0x260>)
 80075ee:	4996      	ldr	r1, [pc, #600]	; (8007848 <send_DHCP_REQUEST+0x264>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	3b03      	subs	r3, #3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f200 8113 	bhi.w	8007820 <send_DHCP_REQUEST+0x23c>
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80075fa:	680b      	ldr	r3, [r1, #0]
 80075fc:	2200      	movs	r2, #0
 80075fe:	729a      	strb	r2, [r3, #10]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8007600:	72da      	strb	r2, [r3, #11]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8007602:	4a92      	ldr	r2, [pc, #584]	; (800784c <send_DHCP_REQUEST+0x268>)
 8007604:	7810      	ldrb	r0, [r2, #0]
 8007606:	7318      	strb	r0, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8007608:	7850      	ldrb	r0, [r2, #1]
 800760a:	7358      	strb	r0, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800760c:	7890      	ldrb	r0, [r2, #2]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800760e:	78d2      	ldrb	r2, [r2, #3]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8007610:	7398      	strb	r0, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8007612:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8007614:	4b8e      	ldr	r3, [pc, #568]	; (8007850 <send_DHCP_REQUEST+0x26c>)
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	f88d 200c 	strb.w	r2, [sp, #12]
   	ip[1] = DHCP_SIP[1];
 800761c:	785a      	ldrb	r2, [r3, #1]
 800761e:	f88d 200d 	strb.w	r2, [sp, #13]
   	ip[2] = DHCP_SIP[2];
 8007622:	789a      	ldrb	r2, [r3, #2]
   	ip[3] = DHCP_SIP[3];
 8007624:	78db      	ldrb	r3, [r3, #3]
   	ip[2] = DHCP_SIP[2];
 8007626:	f88d 200e 	strb.w	r2, [sp, #14]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800762a:	6809      	ldr	r1, [r1, #0]
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 800762c:	2203      	movs	r2, #3
   	ip[3] = 255;
 800762e:	f88d 300f 	strb.w	r3, [sp, #15]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8007632:	2335      	movs	r3, #53	; 0x35
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8007634:	f881 20f2 	strb.w	r2, [r1, #242]	; 0xf2
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007638:	223d      	movs	r2, #61	; 0x3d
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800763a:	f881 30f0 	strb.w	r3, [r1, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
 800763e:	2301      	movs	r3, #1
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007640:	f881 20f3 	strb.w	r2, [r1, #243]	; 0xf3
	pDHCPMSG->OPT[k++] = 0x07;
 8007644:	2207      	movs	r2, #7
	pDHCPMSG->OPT[k++] = 0x01;
 8007646:	f881 30f1 	strb.w	r3, [r1, #241]	; 0xf1
	pDHCPMSG->OPT[k++] = 0x01;
 800764a:	f881 30f5 	strb.w	r3, [r1, #245]	; 0xf5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800764e:	4b81      	ldr	r3, [pc, #516]	; (8007854 <send_DHCP_REQUEST+0x270>)
	pDHCPMSG->OPT[k++] = 0x07;
 8007650:	f881 20f4 	strb.w	r2, [r1, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8007654:	781a      	ldrb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007656:	78de      	ldrb	r6, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8007658:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800765c:	785a      	ldrb	r2, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800765e:	791d      	ldrb	r5, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007660:	795f      	ldrb	r7, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8007662:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8007666:	789a      	ldrb	r2, [r3, #2]
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8007668:	f89d 300f 	ldrb.w	r3, [sp, #15]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800766c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8007670:	2bff      	cmp	r3, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007672:	f881 60f9 	strb.w	r6, [r1, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007676:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800767a:	f881 70fb 	strb.w	r7, [r1, #251]	; 0xfb
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800767e:	f040 80d7 	bne.w	8007830 <send_DHCP_REQUEST+0x24c>
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8007682:	2332      	movs	r3, #50	; 0x32
		pDHCPMSG->OPT[k++] = 0x04;
 8007684:	2204      	movs	r2, #4
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8007686:	f881 30fc 	strb.w	r3, [r1, #252]	; 0xfc
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800768a:	4b70      	ldr	r3, [pc, #448]	; (800784c <send_DHCP_REQUEST+0x268>)
		pDHCPMSG->OPT[k++] = 0x04;
 800768c:	f881 20fd 	strb.w	r2, [r1, #253]	; 0xfd
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8007690:	7818      	ldrb	r0, [r3, #0]
		pDHCPMSG->OPT[k++] = 0x04;
 8007692:	f881 2103 	strb.w	r2, [r1, #259]	; 0x103
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8007696:	f881 00fe 	strb.w	r0, [r1, #254]	; 0xfe
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800769a:	7858      	ldrb	r0, [r3, #1]
 800769c:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80076a0:	7898      	ldrb	r0, [r3, #2]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80076a2:	78db      	ldrb	r3, [r3, #3]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80076a4:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80076a8:	f881 3101 	strb.w	r3, [r1, #257]	; 0x101
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80076ac:	2336      	movs	r3, #54	; 0x36
 80076ae:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80076b2:	4b67      	ldr	r3, [pc, #412]	; (8007850 <send_DHCP_REQUEST+0x26c>)
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	f881 2104 	strb.w	r2, [r1, #260]	; 0x104
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80076ba:	785a      	ldrb	r2, [r3, #1]
 80076bc:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80076c0:	789a      	ldrb	r2, [r3, #2]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80076c2:	78db      	ldrb	r3, [r3, #3]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80076c4:	f881 2106 	strb.w	r2, [r1, #262]	; 0x106
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80076c8:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
 80076cc:	231c      	movs	r3, #28
	pDHCPMSG->OPT[k++] = hostName;
 80076ce:	18ca      	adds	r2, r1, r3
 80076d0:	200c      	movs	r0, #12
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80076d2:	f103 0e02 	add.w	lr, r3, #2
 80076d6:	3301      	adds	r3, #1
	pDHCPMSG->OPT[k++] = hostName;
 80076d8:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80076dc:	2200      	movs	r2, #0
 80076de:	440b      	add	r3, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80076e0:	485d      	ldr	r0, [pc, #372]	; (8007858 <send_DHCP_REQUEST+0x274>)
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80076e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80076e6:	eb0e 0302 	add.w	r3, lr, r2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80076ea:	5c14      	ldrb	r4, [r2, r0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	eb01 0803 	add.w	r8, r1, r3
 80076f2:	2c00      	cmp	r4, #0
 80076f4:	f040 809e 	bne.w	8007834 <send_DHCP_REQUEST+0x250>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 80076f8:	0930      	lsrs	r0, r6, #4
 80076fa:	f7ff fe87 	bl	800740c <NibbleToHex>
 80076fe:	f888 00ec 	strb.w	r0, [r8, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff fe82 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 8007708:	1c5e      	adds	r6, r3, #1
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800770a:	fa11 f686 	uxtah	r6, r1, r6
 800770e:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 8007712:	0928      	lsrs	r0, r5, #4
 8007714:	f7ff fe7a 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8007718:	1c9e      	adds	r6, r3, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 800771a:	fa11 f686 	uxtah	r6, r1, r6
 800771e:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8007722:	4628      	mov	r0, r5
 8007724:	f7ff fe72 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 8007728:	1cdd      	adds	r5, r3, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800772a:	fa11 f585 	uxtah	r5, r1, r5
 800772e:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 8007732:	0938      	lsrs	r0, r7, #4
 8007734:	f7ff fe6a 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8007738:	1d1d      	adds	r5, r3, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 800773a:	fa11 f585 	uxtah	r5, r1, r5
 800773e:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff fe62 	bl	800740c <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 8007748:	1d5d      	adds	r5, r3, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800774a:	fa11 f585 	uxtah	r5, r1, r5
 800774e:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
 8007752:	1d98      	adds	r0, r3, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8007754:	1dd5      	adds	r5, r2, #7
 8007756:	3206      	adds	r2, #6
 8007758:	b280      	uxth	r0, r0
 800775a:	1b45      	subs	r5, r0, r5
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800775c:	4408      	add	r0, r1
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800775e:	440d      	add	r5, r1
 8007760:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8007764:	2237      	movs	r2, #55	; 0x37
 8007766:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
 800776a:	1dda      	adds	r2, r3, #7
	pDHCPMSG->OPT[k++] = 0x08;
 800776c:	2008      	movs	r0, #8
 800776e:	fa11 f282 	uxtah	r2, r1, r2
 8007772:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 8007776:	181a      	adds	r2, r3, r0
	pDHCPMSG->OPT[k++] = subnetMask;
 8007778:	2001      	movs	r0, #1
 800777a:	fa11 f282 	uxtah	r2, r1, r2
 800777e:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 8007782:	f103 0209 	add.w	r2, r3, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8007786:	2003      	movs	r0, #3
 8007788:	fa11 f282 	uxtah	r2, r1, r2
 800778c:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 8007790:	f103 020a 	add.w	r2, r3, #10
	pDHCPMSG->OPT[k++] = dns;
 8007794:	2006      	movs	r0, #6
 8007796:	fa11 f282 	uxtah	r2, r1, r2
 800779a:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 800779e:	f103 020b 	add.w	r2, r3, #11
	pDHCPMSG->OPT[k++] = domainName;
 80077a2:	200f      	movs	r0, #15
 80077a4:	fa11 f282 	uxtah	r2, r1, r2
 80077a8:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 80077ac:	f103 020c 	add.w	r2, r3, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80077b0:	203a      	movs	r0, #58	; 0x3a
 80077b2:	fa11 f282 	uxtah	r2, r1, r2
 80077b6:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 80077ba:	f103 020d 	add.w	r2, r3, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80077be:	203b      	movs	r0, #59	; 0x3b
 80077c0:	fa11 f282 	uxtah	r2, r1, r2
 80077c4:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 80077c8:	f103 020e 	add.w	r2, r3, #14
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80077cc:	201f      	movs	r0, #31
 80077ce:	fa11 f282 	uxtah	r2, r1, r2
 80077d2:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 80077d6:	f103 020f 	add.w	r2, r3, #15
	pDHCPMSG->OPT[k++] = staticRoute;
 80077da:	2021      	movs	r0, #33	; 0x21
 80077dc:	fa11 f282 	uxtah	r2, r1, r2
 80077e0:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 80077e4:	f103 0210 	add.w	r2, r3, #16
	pDHCPMSG->OPT[k++] = endOption;
 80077e8:	3311      	adds	r3, #17
 80077ea:	20ff      	movs	r0, #255	; 0xff
 80077ec:	fa11 f282 	uxtah	r2, r1, r2
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80077f6:	f06f 00ea 	mvn.w	r0, #234	; 0xea
 80077fa:	33eb      	adds	r3, #235	; 0xeb
 80077fc:	1a40      	subs	r0, r0, r1
 80077fe:	440b      	add	r3, r1
 8007800:	18c2      	adds	r2, r0, r3
 8007802:	f5b2 7f9c 	cmp.w	r2, #312	; 0x138
 8007806:	db19      	blt.n	800783c <send_DHCP_REQUEST+0x258>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <send_DHCP_REQUEST+0x278>)
 800780a:	f44f 7209 	mov.w	r2, #548	; 0x224
 800780e:	7818      	ldrb	r0, [r3, #0]
 8007810:	2343      	movs	r3, #67	; 0x43
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	ab03      	add	r3, sp, #12
 8007816:	f7fe fb8b 	bl	8005f30 <sendto>
}
 800781a:	b004      	add	sp, #16
 800781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   	ip[0] = 255;
 8007820:	23ff      	movs	r3, #255	; 0xff
 8007822:	f88d 300c 	strb.w	r3, [sp, #12]
   	ip[1] = 255;
 8007826:	f88d 300d 	strb.w	r3, [sp, #13]
   	ip[2] = 255;
 800782a:	f88d 300e 	strb.w	r3, [sp, #14]
 800782e:	e6fc      	b.n	800762a <send_DHCP_REQUEST+0x46>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007830:	2310      	movs	r3, #16
 8007832:	e74c      	b.n	80076ce <send_DHCP_REQUEST+0xea>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8007834:	f888 40ec 	strb.w	r4, [r8, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007838:	3201      	adds	r2, #1
 800783a:	e754      	b.n	80076e6 <send_DHCP_REQUEST+0x102>
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800783c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007840:	e7de      	b.n	8007800 <send_DHCP_REQUEST+0x21c>
 8007842:	bf00      	nop
 8007844:	200040c0 	.word	0x200040c0
 8007848:	2000411c 	.word	0x2000411c
 800784c:	200040b3 	.word	0x200040b3
 8007850:	20004118 	.word	0x20004118
 8007854:	2000410c 	.word	0x2000410c
 8007858:	2000004c 	.word	0x2000004c
 800785c:	20004120 	.word	0x20004120

08007860 <check_DHCP_timeout>:
{
 8007860:	b570      	push	{r4, r5, r6, lr}
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8007862:	4c1c      	ldr	r4, [pc, #112]	; (80078d4 <check_DHCP_timeout+0x74>)
 8007864:	f994 3000 	ldrsb.w	r3, [r4]
 8007868:	2b01      	cmp	r3, #1
 800786a:	dc1d      	bgt.n	80078a8 <check_DHCP_timeout+0x48>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800786c:	4d1a      	ldr	r5, [pc, #104]	; (80078d8 <check_DHCP_timeout+0x78>)
 800786e:	4e1b      	ldr	r6, [pc, #108]	; (80078dc <check_DHCP_timeout+0x7c>)
 8007870:	682a      	ldr	r2, [r5, #0]
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4291      	cmp	r1, r2
 8007876:	d212      	bcs.n	800789e <check_DHCP_timeout+0x3e>
			switch ( dhcp_state ) {
 8007878:	4b19      	ldr	r3, [pc, #100]	; (80078e0 <check_DHCP_timeout+0x80>)
 800787a:	f993 3000 	ldrsb.w	r3, [r3]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d00f      	beq.n	80078a2 <check_DHCP_timeout+0x42>
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00d      	beq.n	80078a2 <check_DHCP_timeout+0x42>
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <check_DHCP_timeout+0x2e>
					send_DHCP_DISCOVER();
 800788a:	f7ff fdc7 	bl	800741c <send_DHCP_DISCOVER>
			dhcp_tick_1s = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	602b      	str	r3, [r5, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	330a      	adds	r3, #10
 8007896:	6033      	str	r3, [r6, #0]
			dhcp_retry_count++;
 8007898:	7823      	ldrb	r3, [r4, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	7023      	strb	r3, [r4, #0]
	uint8_t ret = DHCP_RUNNING;
 800789e:	2001      	movs	r0, #1
}
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
					send_DHCP_REQUEST();
 80078a2:	f7ff fe9f 	bl	80075e4 <send_DHCP_REQUEST>
 80078a6:	e7f2      	b.n	800788e <check_DHCP_timeout+0x2e>
		switch(dhcp_state) {
 80078a8:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <check_DHCP_timeout+0x80>)
 80078aa:	f993 2000 	ldrsb.w	r2, [r3]
 80078ae:	461c      	mov	r4, r3
 80078b0:	2a02      	cmp	r2, #2
 80078b2:	d008      	beq.n	80078c6 <check_DHCP_timeout+0x66>
 80078b4:	2a04      	cmp	r2, #4
 80078b6:	d006      	beq.n	80078c6 <check_DHCP_timeout+0x66>
 80078b8:	2a01      	cmp	r2, #1
 80078ba:	d109      	bne.n	80078d0 <check_DHCP_timeout+0x70>
				dhcp_state = STATE_DHCP_INIT;
 80078bc:	2000      	movs	r0, #0
 80078be:	7018      	strb	r0, [r3, #0]
		reset_DHCP_timeout();
 80078c0:	f7ff fd4a 	bl	8007358 <reset_DHCP_timeout>
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
				send_DHCP_DISCOVER();
 80078c6:	f7ff fda9 	bl	800741c <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80078ca:	2001      	movs	r0, #1
 80078cc:	7020      	strb	r0, [r4, #0]
				break;
 80078ce:	e7f7      	b.n	80078c0 <check_DHCP_timeout+0x60>
	uint8_t ret = DHCP_RUNNING;
 80078d0:	2001      	movs	r0, #1
 80078d2:	e7f5      	b.n	80078c0 <check_DHCP_timeout+0x60>
 80078d4:	200040bf 	.word	0x200040bf
 80078d8:	200040c4 	.word	0x200040c4
 80078dc:	20000064 	.word	0x20000064
 80078e0:	200040c0 	.word	0x200040c0

080078e4 <DHCP_run>:
{
 80078e4:	b538      	push	{r3, r4, r5, lr}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80078e6:	4c52      	ldr	r4, [pc, #328]	; (8007a30 <DHCP_run+0x14c>)
 80078e8:	f994 3000 	ldrsb.w	r3, [r4]
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	f000 809d 	beq.w	8007a2c <DHCP_run+0x148>
	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80078f2:	4d50      	ldr	r5, [pc, #320]	; (8007a34 <DHCP_run+0x150>)
 80078f4:	7828      	ldrb	r0, [r5, #0]
 80078f6:	0200      	lsls	r0, r0, #8
 80078f8:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 80078fc:	3003      	adds	r0, #3
 80078fe:	f7fe fd75 	bl	80063ec <WIZCHIP_READ>
 8007902:	2822      	cmp	r0, #34	; 0x22
 8007904:	d005      	beq.n	8007912 <DHCP_run+0x2e>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8007906:	2300      	movs	r3, #0
 8007908:	2244      	movs	r2, #68	; 0x44
 800790a:	2102      	movs	r1, #2
 800790c:	7828      	ldrb	r0, [r5, #0]
 800790e:	f7fe f8e5 	bl	8005adc <socket>
	type = parseDHCPMSG();
 8007912:	f7ff fc35 	bl	8007180 <parseDHCPMSG>
	switch ( dhcp_state ) {
 8007916:	f994 3000 	ldrsb.w	r3, [r4]
	type = parseDHCPMSG();
 800791a:	b2c5      	uxtb	r5, r0
	switch ( dhcp_state ) {
 800791c:	2b04      	cmp	r3, #4
 800791e:	d831      	bhi.n	8007984 <DHCP_run+0xa0>
 8007920:	e8df f003 	tbb	[pc, r3]
 8007924:	3d230e03 	.word	0x3d230e03
 8007928:	5a          	.byte	0x5a
 8007929:	00          	.byte	0x00
         DHCP_allocated_ip[0] = 0;
 800792a:	4b43      	ldr	r3, [pc, #268]	; (8007a38 <DHCP_run+0x154>)
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8007930:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8007932:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8007934:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8007936:	f7ff fd71 	bl	800741c <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800793a:	2001      	movs	r0, #1
				dhcp_state = STATE_DHCP_REREQUEST;
 800793c:	7020      	strb	r0, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
			if (type == DHCP_OFFER){
 8007940:	2d02      	cmp	r5, #2
 8007942:	d10e      	bne.n	8007962 <DHCP_run+0x7e>
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8007944:	4b3d      	ldr	r3, [pc, #244]	; (8007a3c <DHCP_run+0x158>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	4b3b      	ldr	r3, [pc, #236]	; (8007a38 <DHCP_run+0x154>)
 800794a:	7c11      	ldrb	r1, [r2, #16]
 800794c:	7019      	strb	r1, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800794e:	7c51      	ldrb	r1, [r2, #17]
 8007950:	7059      	strb	r1, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8007952:	7c91      	ldrb	r1, [r2, #18]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8007954:	7cd2      	ldrb	r2, [r2, #19]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8007956:	7099      	strb	r1, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8007958:	70da      	strb	r2, [r3, #3]
				send_DHCP_REQUEST();
 800795a:	f7ff fe43 	bl	80075e4 <send_DHCP_REQUEST>
				    dhcp_state = STATE_DHCP_INIT;
 800795e:	7025      	strb	r5, [r4, #0]
 8007960:	e010      	b.n	8007984 <DHCP_run+0xa0>
}
 8007962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			} else ret = check_DHCP_timeout();
 8007966:	f7ff bf7b 	b.w	8007860 <check_DHCP_timeout>
			if (type == DHCP_ACK) {
 800796a:	2d05      	cmp	r5, #5
 800796c:	d112      	bne.n	8007994 <DHCP_run+0xb0>
				if (check_DHCP_leasedIP()) {
 800796e:	f7ff fcc3 	bl	80072f8 <check_DHCP_leasedIP>
 8007972:	4605      	mov	r5, r0
 8007974:	b140      	cbz	r0, 8007988 <DHCP_run+0xa4>
					dhcp_ip_assign();
 8007976:	4b32      	ldr	r3, [pc, #200]	; (8007a40 <DHCP_run+0x15c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4798      	blx	r3
					reset_DHCP_timeout();
 800797c:	f7ff fcec 	bl	8007358 <reset_DHCP_timeout>
					dhcp_state = STATE_DHCP_LEASED;
 8007980:	2303      	movs	r3, #3
 8007982:	7023      	strb	r3, [r4, #0]
	ret = DHCP_RUNNING;
 8007984:	2001      	movs	r0, #1
 8007986:	bd38      	pop	{r3, r4, r5, pc}
					reset_DHCP_timeout();
 8007988:	f7ff fce6 	bl	8007358 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800798c:	4b2d      	ldr	r3, [pc, #180]	; (8007a44 <DHCP_run+0x160>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4798      	blx	r3
 8007992:	e7e4      	b.n	800795e <DHCP_run+0x7a>
			} else if (type == DHCP_NAK) {
 8007994:	2d06      	cmp	r5, #6
 8007996:	d1e4      	bne.n	8007962 <DHCP_run+0x7e>
				reset_DHCP_timeout();
 8007998:	f7ff fcde 	bl	8007358 <reset_DHCP_timeout>
 800799c:	e7cd      	b.n	800793a <DHCP_run+0x56>
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800799e:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <DHCP_run+0x164>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	d040      	beq.n	8007a28 <DHCP_run+0x144>
 80079a6:	4a29      	ldr	r2, [pc, #164]	; (8007a4c <DHCP_run+0x168>)
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 80079ae:	d93b      	bls.n	8007a28 <DHCP_run+0x144>
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80079b0:	4a21      	ldr	r2, [pc, #132]	; (8007a38 <DHCP_run+0x154>)
 80079b2:	4b27      	ldr	r3, [pc, #156]	; (8007a50 <DHCP_run+0x16c>)
 80079b4:	7811      	ldrb	r1, [r2, #0]
 80079b6:	7019      	strb	r1, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80079b8:	7851      	ldrb	r1, [r2, #1]
 80079ba:	7059      	strb	r1, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80079bc:	7891      	ldrb	r1, [r2, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80079be:	78d2      	ldrb	r2, [r2, #3]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80079c0:	7099      	strb	r1, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80079c2:	70da      	strb	r2, [r3, #3]
				DHCP_XID++;
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <DHCP_run+0x170>)
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	3301      	adds	r3, #1
 80079ca:	6013      	str	r3, [r2, #0]
				send_DHCP_REQUEST();
 80079cc:	f7ff fe0a 	bl	80075e4 <send_DHCP_REQUEST>
				reset_DHCP_timeout();
 80079d0:	f7ff fcc2 	bl	8007358 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_REREQUEST;
 80079d4:	2004      	movs	r0, #4
 80079d6:	e7b1      	b.n	800793c <DHCP_run+0x58>
			if (type == DHCP_ACK) {
 80079d8:	2d05      	cmp	r5, #5
 80079da:	d11f      	bne.n	8007a1c <DHCP_run+0x138>
				dhcp_retry_count = 0;
 80079dc:	2200      	movs	r2, #0
 80079de:	4b1e      	ldr	r3, [pc, #120]	; (8007a58 <DHCP_run+0x174>)
 80079e0:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] ||
 80079e2:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <DHCP_run+0x16c>)
 80079e4:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <DHCP_run+0x154>)
 80079e6:	7810      	ldrb	r0, [r2, #0]
 80079e8:	7819      	ldrb	r1, [r3, #0]
 80079ea:	4288      	cmp	r0, r1
 80079ec:	d10b      	bne.n	8007a06 <DHCP_run+0x122>
 80079ee:	7850      	ldrb	r0, [r2, #1]
 80079f0:	7859      	ldrb	r1, [r3, #1]
 80079f2:	4288      	cmp	r0, r1
 80079f4:	d107      	bne.n	8007a06 <DHCP_run+0x122>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80079f6:	7890      	ldrb	r0, [r2, #2]
 80079f8:	7899      	ldrb	r1, [r3, #2]
 80079fa:	4288      	cmp	r0, r1
 80079fc:	d103      	bne.n	8007a06 <DHCP_run+0x122>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80079fe:	78d2      	ldrb	r2, [r2, #3]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d008      	beq.n	8007a18 <DHCP_run+0x134>
					dhcp_ip_update();
 8007a06:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <DHCP_run+0x178>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4798      	blx	r3
					ret = DHCP_IP_CHANGED;
 8007a0c:	2003      	movs	r0, #3
				reset_DHCP_timeout();
 8007a0e:	f7ff fca3 	bl	8007358 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8007a12:	2303      	movs	r3, #3
 8007a14:	7023      	strb	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
		   ret = DHCP_IP_LEASED;
 8007a18:	2004      	movs	r0, #4
 8007a1a:	e7f8      	b.n	8007a0e <DHCP_run+0x12a>
			} else if (type == DHCP_NAK) {
 8007a1c:	2d06      	cmp	r5, #6
 8007a1e:	d1a0      	bne.n	8007962 <DHCP_run+0x7e>
				reset_DHCP_timeout();
 8007a20:	f7ff fc9a 	bl	8007358 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8007a24:	2301      	movs	r3, #1
 8007a26:	7023      	strb	r3, [r4, #0]
		   ret = DHCP_IP_LEASED;
 8007a28:	2004      	movs	r0, #4
}
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8007a2c:	2005      	movs	r0, #5
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200040c0 	.word	0x200040c0
 8007a34:	20004120 	.word	0x20004120
 8007a38:	200040b3 	.word	0x200040b3
 8007a3c:	2000411c 	.word	0x2000411c
 8007a40:	20000054 	.word	0x20000054
 8007a44:	20000058 	.word	0x20000058
 8007a48:	20000060 	.word	0x20000060
 8007a4c:	200040c4 	.word	0x200040c4
 8007a50:	200040bb 	.word	0x200040bb
 8007a54:	20004114 	.word	0x20004114
 8007a58:	200040bf 	.word	0x200040bf
 8007a5c:	2000005c 	.word	0x2000005c

08007a60 <vTimerCallback1>:
  }
}



void vTimerCallback1(TimerHandle_t Timer){
 8007a60:	b508      	push	{r3, lr}
	LED_VD7(SET);
 8007a62:	2201      	movs	r2, #1
 8007a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a68:	4805      	ldr	r0, [pc, #20]	; (8007a80 <vTimerCallback1+0x20>)
 8007a6a:	f7f9 fd91 	bl	8001590 <HAL_GPIO_WritePin>
	DIG_OUT3(RESET);//magnets for table
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a74:	4803      	ldr	r0, [pc, #12]	; (8007a84 <vTimerCallback1+0x24>)
}
 8007a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DIG_OUT3(RESET);//magnets for table
 8007a7a:	f7f9 bd89 	b.w	8001590 <HAL_GPIO_WritePin>
 8007a7e:	bf00      	nop
 8007a80:	58020800 	.word	0x58020800
 8007a84:	58021000 	.word	0x58021000

08007a88 <SystemClock_Config>:
{
 8007a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8a:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a8c:	224c      	movs	r2, #76	; 0x4c
 8007a8e:	2100      	movs	r1, #0
 8007a90:	a80a      	add	r0, sp, #40	; 0x28
 8007a92:	f000 fd18 	bl	80084c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a96:	2220      	movs	r2, #32
 8007a98:	2100      	movs	r1, #0
 8007a9a:	a802      	add	r0, sp, #8
 8007a9c:	f000 fd13 	bl	80084c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007aa0:	22bc      	movs	r2, #188	; 0xbc
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	a81d      	add	r0, sp, #116	; 0x74
 8007aa6:	f000 fd0e 	bl	80084c6 <memset>
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8007aaa:	4b31      	ldr	r3, [pc, #196]	; (8007b70 <SystemClock_Config+0xe8>)
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	f022 0204 	bic.w	r2, r2, #4
 8007ab2:	60da      	str	r2, [r3, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	9201      	str	r2, [sp, #4]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ac2:	619a      	str	r2, [r3, #24]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8007aca:	9201      	str	r2, [sp, #4]
 8007acc:	9a01      	ldr	r2, [sp, #4]
  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	0492      	lsls	r2, r2, #18
 8007ad2:	d5fc      	bpl.n	8007ace <SystemClock_Config+0x46>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007ad4:	4a27      	ldr	r2, [pc, #156]	; (8007b74 <SystemClock_Config+0xec>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007ad6:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ad8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007ada:	2608      	movs	r6, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007adc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007ade:	2701      	movs	r7, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ae0:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	f043 0302 	orr.w	r3, r3, #2
 8007aea:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007aec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007af0:	2309      	movs	r3, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007af2:	970f      	str	r7, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007af4:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8007af6:	2205      	movs	r2, #5
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007af8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 5;
 8007afa:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007afc:	2248      	movs	r2, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8007afe:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007b00:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 4;
 8007b02:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b04:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = 4;
 8007b06:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b08:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007b0a:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007b0c:	961a      	str	r6, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007b0e:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007b10:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b12:	f7f9 fd89 	bl	8001628 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b16:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007b18:	2240      	movs	r2, #64	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b20:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b22:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007b24:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 8007b26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b2a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV8;
 8007b2c:	2360      	movs	r3, #96	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV8;
 8007b2e:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV8;
 8007b30:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV8;
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007b34:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8007b36:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007b38:	f7fa f85c 	bl	8001bf4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_FDCAN
 8007b3c:	f249 0301 	movw	r3, #36865	; 0x9001
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b40:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8007b42:	9520      	str	r5, [sp, #128]	; 0x80
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_FDCAN
 8007b44:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2M = 20;
 8007b46:	2314      	movs	r3, #20
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007b48:	9522      	str	r5, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2M = 20;
 8007b4a:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLL2.PLL2N = 150;
 8007b4c:	2396      	movs	r3, #150	; 0x96
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8007b4e:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PLL2.PLL2N = 150;
 8007b50:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2Q = 30;
 8007b52:	231e      	movs	r3, #30
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007b54:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.PLL2.PLL2Q = 30;
 8007b56:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007b58:	2320      	movs	r3, #32
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8007b5a:	9434      	str	r4, [sp, #208]	; 0xd0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007b5c:	9324      	str	r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8007b5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 8007b62:	963b      	str	r6, [sp, #236]	; 0xec
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8007b64:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b66:	f7fa fa31 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
}
 8007b6a:	b04d      	add	sp, #308	; 0x134
 8007b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	58024800 	.word	0x58024800
 8007b74:	58024400 	.word	0x58024400

08007b78 <main>:
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b7c:	4db1      	ldr	r5, [pc, #708]	; (8007e44 <main+0x2cc>)
  HAL_Init();
 8007b7e:	f7f8 fd63 	bl	8000648 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b82:	2400      	movs	r4, #0
  SystemClock_Config();
 8007b84:	f7ff ff80 	bl	8007a88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b88:	2214      	movs	r2, #20
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	a80f      	add	r0, sp, #60	; 0x3c
 8007b8e:	f000 fc9a 	bl	80084c6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b92:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8007b96:	2200      	movs	r2, #0
 8007b98:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b9c:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8007ba0:	48a9      	ldr	r0, [pc, #676]	; (8007e48 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8007ba2:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ba6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ba8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007bac:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007bb2:	f04f 0880 	mov.w	r8, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007bbe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8007bca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8007be2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	9306      	str	r3, [sp, #24]
 8007bec:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007bf2:	f043 0302 	orr.w	r3, r3, #2
 8007bf6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8007bfa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	9307      	str	r3, [sp, #28]
 8007c04:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c06:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007c0a:	f043 0310 	orr.w	r3, r3, #16
 8007c0e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8007c12:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	9308      	str	r3, [sp, #32]
 8007c1c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c1e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007c22:	f043 0308 	orr.w	r3, r3, #8
 8007c26:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8007c2a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	9309      	str	r3, [sp, #36]	; 0x24
 8007c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8007c36:	f7f9 fcab 	bl	8001590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8007c40:	4882      	ldr	r0, [pc, #520]	; (8007e4c <main+0x2d4>)
 8007c42:	f7f9 fca5 	bl	8001590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8007c46:	2200      	movs	r2, #0
 8007c48:	2116      	movs	r1, #22
 8007c4a:	4881      	ldr	r0, [pc, #516]	; (8007e50 <main+0x2d8>)
 8007c4c:	f7f9 fca0 	bl	8001590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8007c50:	2200      	movs	r2, #0
 8007c52:	21c0      	movs	r1, #192	; 0xc0
 8007c54:	487f      	ldr	r0, [pc, #508]	; (8007e54 <main+0x2dc>)
 8007c56:	f7f9 fc9b 	bl	8001590 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007c5a:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c5c:	a90f      	add	r1, sp, #60	; 0x3c
 8007c5e:	487e      	ldr	r0, [pc, #504]	; (8007e58 <main+0x2e0>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007c60:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c62:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c64:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c66:	f7f9 fba3 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007c6a:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c6c:	a90f      	add	r1, sp, #60	; 0x3c
 8007c6e:	4877      	ldr	r0, [pc, #476]	; (8007e4c <main+0x2d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007c70:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c72:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c74:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c76:	f7f9 fb9b 	bl	80013b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c7a:	a90f      	add	r1, sp, #60	; 0x3c
 8007c7c:	4875      	ldr	r0, [pc, #468]	; (8007e54 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8007c7e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c82:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c84:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c86:	f7f9 fb93 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007c8a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c8e:	a90f      	add	r1, sp, #60	; 0x3c
 8007c90:	486d      	ldr	r0, [pc, #436]	; (8007e48 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007c92:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c94:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c96:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c98:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c9a:	f7f9 fb89 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007c9e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ca2:	a90f      	add	r1, sp, #60	; 0x3c
 8007ca4:	4868      	ldr	r0, [pc, #416]	; (8007e48 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007ca6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ca8:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007caa:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cac:	f7f9 fb80 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007cb0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cb4:	a90f      	add	r1, sp, #60	; 0x3c
 8007cb6:	4865      	ldr	r0, [pc, #404]	; (8007e4c <main+0x2d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007cb8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cba:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cbc:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cbe:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cc0:	f7f9 fb76 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8007cc4:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cc6:	a90f      	add	r1, sp, #60	; 0x3c
 8007cc8:	4861      	ldr	r0, [pc, #388]	; (8007e50 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8007cca:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ccc:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cce:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cd0:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cd2:	f7f9 fb6d 	bl	80013b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cd6:	a90f      	add	r1, sp, #60	; 0x3c
 8007cd8:	485d      	ldr	r0, [pc, #372]	; (8007e50 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007cda:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cde:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007ce0:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ce2:	f7f9 fb65 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ce6:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ce8:	a90f      	add	r1, sp, #60	; 0x3c
 8007cea:	485a      	ldr	r0, [pc, #360]	; (8007e54 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007cec:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cee:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cf0:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007cf2:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cf4:	f7f9 fb5c 	bl	80013b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cf8:	a90f      	add	r1, sp, #60	; 0x3c
 8007cfa:	4856      	ldr	r0, [pc, #344]	; (8007e54 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007cfc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  htim7.Init.Prescaler = 2000;
 8007d00:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d04:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d06:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d08:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d0a:	f7f9 fb51 	bl	80013b0 <HAL_GPIO_Init>
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 8007d0e:	2010      	movs	r0, #16
 8007d10:	f7f9 fc44 	bl	800159c <HAL_I2CEx_EnableFastModePlus>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007d14:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007d18:	2105      	movs	r1, #5
 8007d1a:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007d1c:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007d1e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007d20:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8007d24:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  htim7.Instance = TIM7;
 8007d28:	4d4c      	ldr	r5, [pc, #304]	; (8007e5c <main+0x2e4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007d2a:	4033      	ands	r3, r6
 8007d2c:	9303      	str	r3, [sp, #12]
 8007d2e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8007d30:	f7f8 fcbe 	bl	80006b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007d34:	200b      	movs	r0, #11
 8007d36:	f7f8 fcf3 	bl	8000720 <HAL_NVIC_EnableIRQ>
  huart6.Instance = USART6;
 8007d3a:	4849      	ldr	r0, [pc, #292]	; (8007e60 <main+0x2e8>)
  huart6.Init.BaudRate = 9600;
 8007d3c:	4a49      	ldr	r2, [pc, #292]	; (8007e64 <main+0x2ec>)
 8007d3e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007d42:	6084      	str	r4, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007d44:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007d46:	6104      	str	r4, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d48:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d4a:	61c4      	str	r4, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d4c:	6204      	str	r4, [r0, #32]
  huart6.Init.Prescaler = UART_PRESCALER_DIV1;
 8007d4e:	6244      	str	r4, [r0, #36]	; 0x24
  huart6.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8007d50:	6284      	str	r4, [r0, #40]	; 0x28
  huart6.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8007d52:	62c4      	str	r4, [r0, #44]	; 0x2c
  huart6.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8007d54:	6304      	str	r4, [r0, #48]	; 0x30
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007d56:	6344      	str	r4, [r0, #52]	; 0x34
  huart6.Init.BaudRate = 9600;
 8007d58:	e880 000c 	stmia.w	r0, {r2, r3}
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007d60:	f7fc f98c 	bl	800407c <HAL_UART_Init>
  htim7.Init.Prescaler = 2000;
 8007d64:	4b40      	ldr	r3, [pc, #256]	; (8007e68 <main+0x2f0>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007d66:	4628      	mov	r0, r5
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d68:	60ac      	str	r4, [r5, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d6a:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d6c:	940f      	str	r4, [sp, #60]	; 0x3c
 8007d6e:	9410      	str	r4, [sp, #64]	; 0x40
 8007d70:	9411      	str	r4, [sp, #68]	; 0x44
  htim7.Init.Prescaler = 2000;
 8007d72:	e885 0108 	stmia.w	r5, {r3, r8}
  htim7.Init.Period = 1500;
 8007d76:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8007d7a:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007d7c:	f7fb fdda 	bl	8003934 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007d80:	a90f      	add	r1, sp, #60	; 0x3c
 8007d82:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d84:	940f      	str	r4, [sp, #60]	; 0x3c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007d86:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d8a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007d8c:	f7fb fdec 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
  hspi3.Instance = SPI3;
 8007d90:	4836      	ldr	r0, [pc, #216]	; (8007e6c <main+0x2f4>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d96:	4936      	ldr	r1, [pc, #216]	; (8007e70 <main+0x2f8>)
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007d98:	6345      	str	r5, [r0, #52]	; 0x34
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007d9a:	6084      	str	r4, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d9c:	f8c0 900c 	str.w	r9, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007da0:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007da2:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007da4:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007da6:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007da8:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007daa:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007dae:	6384      	str	r4, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007db0:	63c4      	str	r4, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007db2:	6404      	str	r4, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007db4:	6444      	str	r4, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007db6:	6484      	str	r4, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007db8:	64c4      	str	r4, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007dba:	6504      	str	r4, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007dbc:	6544      	str	r4, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007dbe:	6584      	str	r4, [r0, #88]	; 0x58
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007dc0:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007dc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007dc8:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007dce:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007dd0:	f7fa ff32 	bl	8002c38 <HAL_SPI_Init>
  hfdcan2.Instance = FDCAN2;
 8007dd4:	4827      	ldr	r0, [pc, #156]	; (8007e74 <main+0x2fc>)
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8007dd6:	220d      	movs	r2, #13
  hfdcan2.Instance = FDCAN2;
 8007dd8:	4b27      	ldr	r3, [pc, #156]	; (8007e78 <main+0x300>)
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8007dda:	61c2      	str	r2, [r0, #28]
  hfdcan2.Init.StdFiltersNbr = 3;
 8007ddc:	2203      	movs	r2, #3
  hfdcan2.Instance = FDCAN2;
 8007dde:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.NominalPrescaler = 4;
 8007de0:	2304      	movs	r3, #4
  hfdcan2.Init.StdFiltersNbr = 3;
 8007de2:	6382      	str	r2, [r0, #56]	; 0x38
  hfdcan2.Init.TxBuffersNbr = 5;
 8007de4:	2205      	movs	r2, #5
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8007de6:	7406      	strb	r6, [r0, #16]
  hfdcan2.Init.TxBuffersNbr = 5;
 8007de8:	65c2      	str	r2, [r0, #92]	; 0x5c
  hfdcan2.Init.NominalPrescaler = 4;
 8007dea:	6143      	str	r3, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8007dec:	6186      	str	r6, [r0, #24]
  hfdcan2.Init.DataPrescaler = 1;
 8007dee:	6246      	str	r6, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8007df0:	6286      	str	r6, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8007df2:	62c6      	str	r6, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8007df4:	6306      	str	r6, [r0, #48]	; 0x30
  hfdcan2.Init.RxFifo0ElmtsNbr = 4;
 8007df6:	6403      	str	r3, [r0, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007df8:	6443      	str	r3, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8007dfa:	6486      	str	r6, [r0, #72]	; 0x48
  osThreadDef(EthTask, EthernetTask_func, osPriorityNormal, 0, 2048);
 8007dfc:	ae0a      	add	r6, sp, #40	; 0x28
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007dfe:	64c3      	str	r3, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007e00:	6543      	str	r3, [r0, #84]	; 0x54
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 8007e02:	6645      	str	r5, [r0, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007e04:	6683      	str	r3, [r0, #104]	; 0x68
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007e06:	6084      	str	r4, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8007e08:	60c4      	str	r4, [r0, #12]
  hfdcan2.Init.TransmitPause = DISABLE;
 8007e0a:	7444      	strb	r4, [r0, #17]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8007e0c:	6207      	str	r7, [r0, #32]
  hfdcan2.Init.MessageRAMOffset = 0;
 8007e0e:	6344      	str	r4, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8007e10:	63c4      	str	r4, [r0, #60]	; 0x3c
  hfdcan2.Init.RxBuffersNbr = 0;
 8007e12:	6504      	str	r4, [r0, #80]	; 0x50
  hfdcan2.Init.TxEventsNbr = 0;
 8007e14:	6584      	str	r4, [r0, #88]	; 0x58
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8007e16:	6604      	str	r4, [r0, #96]	; 0x60
  hfdcan2.msgRam.StandardFilterSA = 0;
 8007e18:	66c4      	str	r4, [r0, #108]	; 0x6c
  hfdcan2.msgRam.ExtendedFilterSA = 0;
 8007e1a:	6704      	str	r4, [r0, #112]	; 0x70
  hfdcan2.msgRam.RxFIFO0SA = 0;
 8007e1c:	6744      	str	r4, [r0, #116]	; 0x74
  hfdcan2.msgRam.RxFIFO1SA = 0;
 8007e1e:	6784      	str	r4, [r0, #120]	; 0x78
  hfdcan2.msgRam.RxBufferSA = 0;
 8007e20:	67c4      	str	r4, [r0, #124]	; 0x7c
  hfdcan2.msgRam.TxEventFIFOSA = 0;
 8007e22:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  hfdcan2.msgRam.TxBufferSA = 0;
 8007e26:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  hfdcan2.msgRam.TxFIFOQSA = 0;
 8007e2a:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
  hfdcan2.msgRam.TTMemorySA = 0;
 8007e2e:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
  hfdcan2.msgRam.EndAddress = 0;
 8007e32:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
  hfdcan2.ErrorCode = 0;
 8007e36:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8007e3a:	f7f8 ff95 	bl	8000d68 <HAL_FDCAN_Init>
  hiwdg1.Instance = IWDG1;
 8007e3e:	480f      	ldr	r0, [pc, #60]	; (8007e7c <main+0x304>)
 8007e40:	e01e      	b.n	8007e80 <main+0x308>
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
 8007e48:	58021000 	.word	0x58021000
 8007e4c:	58020800 	.word	0x58020800
 8007e50:	58020c00 	.word	0x58020c00
 8007e54:	58020400 	.word	0x58020400
 8007e58:	58020000 	.word	0x58020000
 8007e5c:	200042c0 	.word	0x200042c0
 8007e60:	2000423c 	.word	0x2000423c
 8007e64:	40011400 	.word	0x40011400
 8007e68:	40001400 	.word	0x40001400
 8007e6c:	20004134 	.word	0x20004134
 8007e70:	40003c00 	.word	0x40003c00
 8007e74:	20004300 	.word	0x20004300
 8007e78:	4000a400 	.word	0x4000a400
 8007e7c:	20004124 	.word	0x20004124
 8007e80:	4b16      	ldr	r3, [pc, #88]	; (8007edc <main+0x364>)
  osThreadDef(EthTask, EthernetTask_func, osPriorityNormal, 0, 2048);
 8007e82:	4d17      	ldr	r5, [pc, #92]	; (8007ee0 <main+0x368>)
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8007e84:	e880 0018 	stmia.w	r0, {r3, r4}
  hiwdg1.Init.Window = 4095;
 8007e88:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007e8c:	60c3      	str	r3, [r0, #12]
  hiwdg1.Init.Reload = 4095;
 8007e8e:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8007e90:	f7f9 fb9c 	bl	80015cc <HAL_IWDG_Init>
  xTimer_btn_timer = xTimerCreate("Btn timer", 2000, pdFALSE, (void*)0, vTimerCallback1);
 8007e94:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <main+0x36c>)
 8007e96:	4622      	mov	r2, r4
 8007e98:	4641      	mov	r1, r8
 8007e9a:	4813      	ldr	r0, [pc, #76]	; (8007ee8 <main+0x370>)
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	f7fd fc2e 	bl	8005700 <xTimerCreate>
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <main+0x374>)
 8007ea6:	6018      	str	r0, [r3, #0]
  osThreadDef(EthTask, EthernetTask_func, osPriorityNormal, 0, 2048);
 8007ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eaa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007eac:	f855 3b04 	ldr.w	r3, [r5], #4
  EthTaskHandle = osThreadCreate(osThread(EthTask), NULL);
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	a80a      	add	r0, sp, #40	; 0x28
  osThreadDef(EthTask, EthernetTask_func, osPriorityNormal, 0, 2048);
 8007eb4:	6033      	str	r3, [r6, #0]
  EthTaskHandle = osThreadCreate(osThread(EthTask), NULL);
 8007eb6:	f7fc f918 	bl	80040ea <osThreadCreate>
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <main+0x378>)
  osThreadDef(DigIOTask, DigIOTask_func, osPriorityIdle, 0, 128);
 8007ebc:	ae0f      	add	r6, sp, #60	; 0x3c
  EthTaskHandle = osThreadCreate(osThread(EthTask), NULL);
 8007ebe:	6018      	str	r0, [r3, #0]
  osThreadDef(DigIOTask, DigIOTask_func, osPriorityIdle, 0, 128);
 8007ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ec2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007ec4:	682b      	ldr	r3, [r5, #0]
  DigIOTaskHandle = osThreadCreate(osThread(DigIOTask), NULL);
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	a80f      	add	r0, sp, #60	; 0x3c
  osThreadDef(DigIOTask, DigIOTask_func, osPriorityIdle, 0, 128);
 8007eca:	6033      	str	r3, [r6, #0]
  DigIOTaskHandle = osThreadCreate(osThread(DigIOTask), NULL);
 8007ecc:	f7fc f90d 	bl	80040ea <osThreadCreate>
 8007ed0:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <main+0x37c>)
 8007ed2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8007ed4:	f7fc f904 	bl	80040e0 <osKernelStart>
 8007ed8:	e7fe      	b.n	8007ed8 <main+0x360>
 8007eda:	bf00      	nop
 8007edc:	58004800 	.word	0x58004800
 8007ee0:	08008500 	.word	0x08008500
 8007ee4:	08007a61 	.word	0x08007a61
 8007ee8:	08008604 	.word	0x08008604
 8007eec:	20004234 	.word	0x20004234
 8007ef0:	20004238 	.word	0x20004238
 8007ef4:	200042bc 	.word	0x200042bc

08007ef8 <check_adr_func>:
uint32_t check_adr_func(){
 8007ef8:	b510      	push	{r4, lr}
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))//1
 8007efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007efe:	4814      	ldr	r0, [pc, #80]	; (8007f50 <check_adr_func+0x58>)
 8007f00:	f7f9 fb40 	bl	8001584 <HAL_GPIO_ReadPin>
 8007f04:	1c04      	adds	r4, r0, #0
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))//2
 8007f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f0a:	4811      	ldr	r0, [pc, #68]	; (8007f50 <check_adr_func+0x58>)
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))//1
 8007f0c:	bf18      	it	ne
 8007f0e:	2401      	movne	r4, #1
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))//2
 8007f10:	f7f9 fb38 	bl	8001584 <HAL_GPIO_ReadPin>
 8007f14:	b108      	cbz	r0, 8007f1a <check_adr_func+0x22>
			address_buf |= 2;
 8007f16:	f044 0402 	orr.w	r4, r4, #2
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14))//3
 8007f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f1e:	480c      	ldr	r0, [pc, #48]	; (8007f50 <check_adr_func+0x58>)
 8007f20:	f7f9 fb30 	bl	8001584 <HAL_GPIO_ReadPin>
 8007f24:	b108      	cbz	r0, 8007f2a <check_adr_func+0x32>
			address_buf |= 4;
 8007f26:	f044 0404 	orr.w	r4, r4, #4
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15))//4
 8007f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f2e:	4808      	ldr	r0, [pc, #32]	; (8007f50 <check_adr_func+0x58>)
 8007f30:	f7f9 fb28 	bl	8001584 <HAL_GPIO_ReadPin>
 8007f34:	b108      	cbz	r0, 8007f3a <check_adr_func+0x42>
			address_buf |= 8;
 8007f36:	f044 0408 	orr.w	r4, r4, #8
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))//5
 8007f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f3e:	4805      	ldr	r0, [pc, #20]	; (8007f54 <check_adr_func+0x5c>)
 8007f40:	f7f9 fb20 	bl	8001584 <HAL_GPIO_ReadPin>
 8007f44:	b108      	cbz	r0, 8007f4a <check_adr_func+0x52>
			address_buf |= 16;
 8007f46:	f044 0410 	orr.w	r4, r4, #16
}
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	bd10      	pop	{r4, pc}
 8007f4e:	bf00      	nop
 8007f50:	58021000 	.word	0x58021000
 8007f54:	58020400 	.word	0x58020400

08007f58 <can_tx_func>:
{
 8007f58:	b530      	push	{r4, r5, lr}
	TxHeader.DataLength = (data_lenght<<16);
 8007f5a:	0412      	lsls	r2, r2, #16
{
 8007f5c:	b08b      	sub	sp, #44	; 0x2c
 8007f5e:	461d      	mov	r5, r3
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8007f60:	2300      	movs	r3, #0
	TxHeader.DataLength = (data_lenght<<16);
 8007f62:	9204      	str	r2, [sp, #16]
	TxHeader.TxEventFifoControl = FDCAN_TX_EVENT;
 8007f64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 8007f68:	4604      	mov	r4, r0
	TxHeader.Identifier = ID;
 8007f6a:	9101      	str	r1, [sp, #4]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8007f6c:	9302      	str	r3, [sp, #8]
	HAL_FDCAN_AddMessageToTxBuffer(hfdcan, &TxHeader, data, can_buf_num);
 8007f6e:	a901      	add	r1, sp, #4
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8007f70:	9303      	str	r3, [sp, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007f72:	9305      	str	r3, [sp, #20]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8007f74:	9306      	str	r3, [sp, #24]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8007f76:	9307      	str	r3, [sp, #28]
	TxHeader.TxEventFifoControl = FDCAN_TX_EVENT;
 8007f78:	9208      	str	r2, [sp, #32]
	HAL_FDCAN_AddMessageToTxBuffer(hfdcan, &TxHeader, data, can_buf_num);
 8007f7a:	462a      	mov	r2, r5
	TxHeader.MessageMarker = 0;
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_FDCAN_AddMessageToTxBuffer(hfdcan, &TxHeader, data, can_buf_num);
 8007f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f80:	f7f9 f92e 	bl	80011e0 <HAL_FDCAN_AddMessageToTxBuffer>
	HAL_FDCAN_EnableTxBufferRequest(hfdcan, can_buf_num);
 8007f84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7f9 f95c 	bl	8001244 <HAL_FDCAN_EnableTxBufferRequest>
	LED_VD6(a^=1);
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <can_tx_func+0x50>)
 8007f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f92:	4806      	ldr	r0, [pc, #24]	; (8007fac <can_tx_func+0x54>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	f082 0201 	eor.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	f7f9 faf7 	bl	8001590 <HAL_GPIO_WritePin>
}
 8007fa2:	20ff      	movs	r0, #255	; 0xff
 8007fa4:	b00b      	add	sp, #44	; 0x2c
 8007fa6:	bd30      	pop	{r4, r5, pc}
 8007fa8:	200040c8 	.word	0x200040c8
 8007fac:	58020800 	.word	0x58020800

08007fb0 <FDCAN_Config>:
{
 8007fb0:	b510      	push	{r4, lr}
	sFilterConfig.FilterIndex = 1;
 8007fb2:	2101      	movs	r1, #1
{
 8007fb4:	b092      	sub	sp, #72	; 0x48
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8007fb6:	2300      	movs	r3, #0
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007fb8:	2202      	movs	r2, #2
	sFilterConfig.FilterIndex = 1;
 8007fba:	9103      	str	r1, [sp, #12]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007fbc:	9105      	str	r1, [sp, #20]
	sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1_HP;
 8007fbe:	2106      	movs	r1, #6
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
 8007fc0:	4c0f      	ldr	r4, [pc, #60]	; (8008000 <FDCAN_Config+0x50>)
	sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1_HP;
 8007fc2:	910d      	str	r1, [sp, #52]	; 0x34
	sFilterConfig1.FilterID1 = 0x080;
 8007fc4:	2180      	movs	r1, #128	; 0x80
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
 8007fc6:	9300      	str	r3, [sp, #0]
	sFilterConfig1.FilterID1 = 0x080;
 8007fc8:	910e      	str	r1, [sp, #56]	; 0x38
	sFilterConfig1.FilterID2 = 0x0FF;
 8007fca:	21ff      	movs	r1, #255	; 0xff
	sFilterConfig.FilterID1 = adr;
 8007fcc:	9006      	str	r0, [sp, #24]
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
 8007fce:	4620      	mov	r0, r4
	sFilterConfig1.FilterID2 = 0x0FF;
 8007fd0:	910f      	str	r1, [sp, #60]	; 0x3c
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
 8007fd2:	4611      	mov	r1, r2
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8007fd4:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007fd6:	9204      	str	r2, [sp, #16]
	sFilterConfig.FilterID2 = 0x000;
 8007fd8:	9307      	str	r3, [sp, #28]
	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 8007fda:	930a      	str	r3, [sp, #40]	; 0x28
	sFilterConfig1.FilterIndex = 2;
 8007fdc:	920b      	str	r2, [sp, #44]	; 0x2c
	sFilterConfig1.FilterType = FDCAN_FILTER_MASK;
 8007fde:	920c      	str	r2, [sp, #48]	; 0x30
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
 8007fe0:	f7f9 f8cc 	bl	800117c <HAL_FDCAN_ConfigGlobalFilter>
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8007fe4:	a902      	add	r1, sp, #8
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7f9 f88a 	bl	8001100 <HAL_FDCAN_ConfigFilter>
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig1) != HAL_OK)
 8007fec:	a90a      	add	r1, sp, #40	; 0x28
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f7f9 f886 	bl	8001100 <HAL_FDCAN_ConfigFilter>
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7f9 f8da 	bl	80011ae <HAL_FDCAN_Start>
}
 8007ffa:	b012      	add	sp, #72	; 0x48
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	bf00      	nop
 8008000:	20004300 	.word	0x20004300

08008004 <DigIOTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DigIOTask_func */
void DigIOTask_func(void const * argument)
{
 8008004:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN DigIOTask_func */
	XRAY_GEN_START(RESET);
 8008006:	2200      	movs	r2, #0
{
 8008008:	b085      	sub	sp, #20
	XRAY_GEN_START(RESET);
 800800a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800800e:	4846      	ldr	r0, [pc, #280]	; (8008128 <DigIOTask_func+0x124>)
 8008010:	f7f9 fabe 	bl	8001590 <HAL_GPIO_WritePin>
	MOTOR_STO_EN(SET);
 8008014:	2201      	movs	r2, #1
 8008016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800801a:	4843      	ldr	r0, [pc, #268]	; (8008128 <DigIOTask_func+0x124>)
 800801c:	f7f9 fab8 	bl	8001590 <HAL_GPIO_WritePin>
	TABLE_MAGNETS(RESET);
 8008020:	2200      	movs	r2, #0
 8008022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008026:	4840      	ldr	r0, [pc, #256]	; (8008128 <DigIOTask_func+0x124>)
 8008028:	f7f9 fab2 	bl	8001590 <HAL_GPIO_WritePin>
	uint8_t prev_btn_state = 0, btn_press_val = 0;

  /* Infinite loop */
  for(;;)
  {
	  if(BTN_STATE)
 800802c:	4e3f      	ldr	r6, [pc, #252]	; (800812c <DigIOTask_func+0x128>)
	int CAN_id = check_adr_func();
 800802e:	f7ff ff63 	bl	8007ef8 <check_adr_func>
 8008032:	4604      	mov	r4, r0
	FDCAN_Config(CAN_id);
 8008034:	f7ff ffbc 	bl	8007fb0 <FDCAN_Config>
		uint8_t buf[] = {0x43, 0x05, 0x10,0,0,0,0,0};
 8008038:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <DigIOTask_func+0x12c>)
 800803a:	ab02      	add	r3, sp, #8
 800803c:	6810      	ldr	r0, [r2, #0]
 800803e:	6851      	ldr	r1, [r2, #4]
 8008040:	c303      	stmia	r3!, {r0, r1}
		buf[3] = (uint8_t)CAN_id;
 8008042:	f88d 400b 	strb.w	r4, [sp, #11]
		can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER0);
 8008046:	2401      	movs	r4, #1
		vTaskDelay(100);
 8008048:	2064      	movs	r0, #100	; 0x64
 800804a:	f7fd f8c1 	bl	80051d0 <vTaskDelay>
		can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER0);
 800804e:	ab02      	add	r3, sp, #8
 8008050:	2208      	movs	r2, #8
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	9400      	str	r4, [sp, #0]
 8008056:	4837      	ldr	r0, [pc, #220]	; (8008134 <DigIOTask_func+0x130>)
 8008058:	f7ff ff7e 	bl	8007f58 <can_tx_func>
		vTaskDelay(100);
 800805c:	2064      	movs	r0, #100	; 0x64
 800805e:	f7fd f8b7 	bl	80051d0 <vTaskDelay>
		can_tx_func(&hfdcan2, 0x80, 8, buf, FDCAN_TX_BUFFER0);
 8008062:	ab02      	add	r3, sp, #8
 8008064:	9400      	str	r4, [sp, #0]
 8008066:	2208      	movs	r2, #8
 8008068:	2180      	movs	r1, #128	; 0x80
 800806a:	4832      	ldr	r0, [pc, #200]	; (8008134 <DigIOTask_func+0x130>)
 800806c:	f7ff ff74 	bl	8007f58 <can_tx_func>
	LED_VD5(SET);
 8008070:	4622      	mov	r2, r4
 8008072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008076:	4830      	ldr	r0, [pc, #192]	; (8008138 <DigIOTask_func+0x134>)
 8008078:	f7f9 fa8a 	bl	8001590 <HAL_GPIO_WritePin>
	LED_VD6(SET);
 800807c:	4622      	mov	r2, r4
 800807e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008082:	482d      	ldr	r0, [pc, #180]	; (8008138 <DigIOTask_func+0x134>)
 8008084:	f7f9 fa84 	bl	8001590 <HAL_GPIO_WritePin>
	LED_VD7(SET);
 8008088:	4622      	mov	r2, r4
	uint8_t prev_btn_state = 0, btn_press_val = 0;
 800808a:	2400      	movs	r4, #0
	LED_VD7(SET);
 800808c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008090:	4829      	ldr	r0, [pc, #164]	; (8008138 <DigIOTask_func+0x134>)
	uint8_t prev_btn_state = 0, btn_press_val = 0;
 8008092:	4625      	mov	r5, r4
		  }
	  }
	  else
	  {
		  btn_press_val = 0;
		  prev_btn_state = 0;
 8008094:	4627      	mov	r7, r4
	LED_VD7(SET);
 8008096:	f7f9 fa7b 	bl	8001590 <HAL_GPIO_WritePin>
	  if(BTN_STATE)
 800809a:	2101      	movs	r1, #1
 800809c:	4823      	ldr	r0, [pc, #140]	; (800812c <DigIOTask_func+0x128>)
 800809e:	f7f9 fa71 	bl	8001584 <HAL_GPIO_ReadPin>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d03d      	beq.n	8008122 <DigIOTask_func+0x11e>
		  btn_press_val <<= 1;
 80080a6:	0064      	lsls	r4, r4, #1
 80080a8:	b2e4      	uxtb	r4, r4
		  btn_press_val |= 1;
 80080aa:	f044 0401 	orr.w	r4, r4, #1
		  if(btn_press_val == 0xFF && BTN_STATE != prev_btn_state && BTN_STATE - prev_btn_state > 0)
 80080ae:	2cff      	cmp	r4, #255	; 0xff
 80080b0:	d128      	bne.n	8008104 <DigIOTask_func+0x100>
 80080b2:	2101      	movs	r1, #1
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7f9 fa65 	bl	8001584 <HAL_GPIO_ReadPin>
 80080ba:	4285      	cmp	r5, r0
 80080bc:	d022      	beq.n	8008104 <DigIOTask_func+0x100>
 80080be:	2101      	movs	r1, #1
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7f9 fa5f 	bl	8001584 <HAL_GPIO_ReadPin>
 80080c6:	1b40      	subs	r0, r0, r5
 80080c8:	2800      	cmp	r0, #0
 80080ca:	dd1b      	ble.n	8008104 <DigIOTask_func+0x100>
			  xTimerStart(xTimer_btn_timer, 0);
 80080cc:	4b1b      	ldr	r3, [pc, #108]	; (800813c <DigIOTask_func+0x138>)
 80080ce:	681d      	ldr	r5, [r3, #0]
 80080d0:	f7fc ff6a 	bl	8004fa8 <xTaskGetTickCount>
 80080d4:	2300      	movs	r3, #0
 80080d6:	4602      	mov	r2, r0
 80080d8:	2101      	movs	r1, #1
 80080da:	4628      	mov	r0, r5
 80080dc:	9700      	str	r7, [sp, #0]
 80080de:	f7fd fb35 	bl	800574c <xTimerGenericCommand>
			  DIG_OUT3(SET);
 80080e2:	2201      	movs	r2, #1
 80080e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080e8:	480f      	ldr	r0, [pc, #60]	; (8008128 <DigIOTask_func+0x124>)
 80080ea:	f7f9 fa51 	bl	8001590 <HAL_GPIO_WritePin>
			  LED_VD7(RESET);
 80080ee:	2200      	movs	r2, #0
 80080f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080f4:	4810      	ldr	r0, [pc, #64]	; (8008138 <DigIOTask_func+0x134>)
 80080f6:	f7f9 fa4b 	bl	8001590 <HAL_GPIO_WritePin>
			  prev_btn_state = BTN_STATE;
 80080fa:	2101      	movs	r1, #1
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7f9 fa41 	bl	8001584 <HAL_GPIO_ReadPin>
 8008102:	4605      	mov	r5, r0
	  }

	  if(INTERLOCKS_STATE == 0)
 8008104:	2104      	movs	r1, #4
 8008106:	4630      	mov	r0, r6
 8008108:	f7f9 fa3c 	bl	8001584 <HAL_GPIO_ReadPin>
 800810c:	4602      	mov	r2, r0
 800810e:	b920      	cbnz	r0, 800811a <DigIOTask_func+0x116>
		  XRAY_GEN_START(RESET);
 8008110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008114:	4804      	ldr	r0, [pc, #16]	; (8008128 <DigIOTask_func+0x124>)
 8008116:	f7f9 fa3b 	bl	8001590 <HAL_GPIO_WritePin>

	  vTaskDelay(3);
 800811a:	2003      	movs	r0, #3
 800811c:	f7fd f858 	bl	80051d0 <vTaskDelay>
	  if(BTN_STATE)
 8008120:	e7bb      	b.n	800809a <DigIOTask_func+0x96>
		  btn_press_val = 0;
 8008122:	4604      	mov	r4, r0
		  prev_btn_state = 0;
 8008124:	4605      	mov	r5, r0
 8008126:	e7ed      	b.n	8008104 <DigIOTask_func+0x100>
 8008128:	58021000 	.word	0x58021000
 800812c:	58020400 	.word	0x58020400
 8008130:	08008528 	.word	0x08008528
 8008134:	20004300 	.word	0x20004300
 8008138:	58020800 	.word	0x58020800
 800813c:	20004234 	.word	0x20004234

08008140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008140:	4770      	bx	lr
	...

08008144 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008144:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <HAL_MspInit+0x30>)
{
 8008146:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008148:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800814c:	210f      	movs	r1, #15
 800814e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008152:	f042 0202 	orr.w	r2, r2, #2
 8008156:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800815a:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800815c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008168:	f7f8 faa2 	bl	80006b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800816c:	b003      	add	sp, #12
 800816e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400

08008178 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8008178:	b510      	push	{r4, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800817e:	2214      	movs	r2, #20
 8008180:	2100      	movs	r1, #0
 8008182:	a803      	add	r0, sp, #12
 8008184:	f000 f99f 	bl	80084c6 <memset>
  if(hfdcan->Instance==FDCAN2)
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	4b14      	ldr	r3, [pc, #80]	; (80081dc <HAL_FDCAN_MspInit+0x64>)
 800818c:	429a      	cmp	r2, r3
 800818e:	d123      	bne.n	80081d8 <HAL_FDCAN_MspInit+0x60>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008190:	4b13      	ldr	r3, [pc, #76]	; (80081e0 <HAL_FDCAN_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008192:	a903      	add	r1, sp, #12
 8008194:	4813      	ldr	r0, [pc, #76]	; (80081e4 <HAL_FDCAN_MspInit+0x6c>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008196:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800819a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800819e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80081a2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80081a6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80081aa:	9201      	str	r2, [sp, #4]
 80081ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80081b2:	f042 0202 	orr.w	r2, r2, #2
 80081b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80081ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80081c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80081ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081cc:	2302      	movs	r3, #2
 80081ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80081d0:	2309      	movs	r3, #9
 80081d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081d4:	f7f9 f8ec 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80081d8:	b008      	add	sp, #32
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	4000a400 	.word	0x4000a400
 80081e0:	58024400 	.word	0x58024400
 80081e4:	58020400 	.word	0x58020400

080081e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081ee:	2214      	movs	r2, #20
 80081f0:	2100      	movs	r1, #0
 80081f2:	a803      	add	r0, sp, #12
 80081f4:	f000 f967 	bl	80084c6 <memset>
  if(hspi->Instance==SPI3)
 80081f8:	682a      	ldr	r2, [r5, #0]
 80081fa:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <HAL_SPI_MspInit+0xc0>)
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d151      	bne.n	80082a4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008200:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <HAL_SPI_MspInit+0xc4>)
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008202:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008204:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008206:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008208:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800820c:	4828      	ldr	r0, [pc, #160]	; (80082b0 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800820e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008212:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8008216:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800821a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800821e:	9201      	str	r2, [sp, #4]
 8008220:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008222:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008226:	f042 0202 	orr.w	r2, r2, #2
 800822a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800822e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008232:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008234:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008238:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800823a:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800823c:	9302      	str	r3, [sp, #8]
 800823e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008240:	2318      	movs	r3, #24
 8008242:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008244:	2306      	movs	r3, #6
 8008246:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008248:	f7f9 f8b2 	bl	80013b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800824c:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800824e:	4818      	ldr	r0, [pc, #96]	; (80082b0 <HAL_SPI_MspInit+0xc8>)
 8008250:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008252:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008256:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008258:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800825a:	9606      	str	r6, [sp, #24]

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800825c:	263e      	movs	r6, #62	; 0x3e
    hdma_spi3_tx.Instance = DMA1_Stream0;
 800825e:	4c15      	ldr	r4, [pc, #84]	; (80082b4 <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008260:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008262:	f7f9 f8a5 	bl	80013b0 <HAL_GPIO_Init>
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <HAL_SPI_MspInit+0xd0>)
 8008268:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800826c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8008270:	4620      	mov	r0, r4
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008272:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008276:	2300      	movs	r3, #0
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008278:	6122      	str	r2, [r4, #16]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800827a:	60e3      	str	r3, [r4, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800827c:	6163      	str	r3, [r4, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800827e:	61a3      	str	r3, [r4, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8008280:	61e3      	str	r3, [r4, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008282:	6223      	str	r3, [r4, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008284:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8008286:	f7f8 fad9 	bl	800083c <HAL_DMA_Init>
 800828a:	b108      	cbz	r0, 8008290 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800828c:	f7ff ff58 	bl	8008140 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8008290:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8008292:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8008294:	2200      	movs	r2, #0
 8008296:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8008298:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800829a:	f7f8 fa09 	bl	80006b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800829e:	2033      	movs	r0, #51	; 0x33
 80082a0:	f7f8 fa3e 	bl	8000720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80082a4:	b008      	add	sp, #32
 80082a6:	bd70      	pop	{r4, r5, r6, pc}
 80082a8:	40003c00 	.word	0x40003c00
 80082ac:	58024400 	.word	0x58024400
 80082b0:	58020400 	.word	0x58020400
 80082b4:	200041bc 	.word	0x200041bc
 80082b8:	40020010 	.word	0x40020010

080082bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80082bc:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 80082be:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <HAL_TIM_Base_MspInit+0x3c>)
 80082c0:	6802      	ldr	r2, [r0, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d114      	bne.n	80082f0 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <HAL_TIM_Base_MspInit+0x40>)
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80082c8:	2037      	movs	r0, #55	; 0x37
 80082ca:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 80082cc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80082d0:	f042 0220 	orr.w	r2, r2, #32
 80082d4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80082d8:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 80082da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80082e6:	f7f8 f9e3 	bl	80006b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80082ea:	2037      	movs	r0, #55	; 0x37
 80082ec:	f7f8 fa18 	bl	8000720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80082f0:	b003      	add	sp, #12
 80082f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80082f6:	bf00      	nop
 80082f8:	40001400 	.word	0x40001400
 80082fc:	58024400 	.word	0x58024400

08008300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008300:	b510      	push	{r4, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008306:	2214      	movs	r2, #20
 8008308:	2100      	movs	r1, #0
 800830a:	a803      	add	r0, sp, #12
 800830c:	f000 f8db 	bl	80084c6 <memset>
  if(huart->Instance==USART6)
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <HAL_UART_MspInit+0x64>)
 8008314:	429a      	cmp	r2, r3
 8008316:	d122      	bne.n	800835e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8008318:	4b13      	ldr	r3, [pc, #76]	; (8008368 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800831a:	a903      	add	r1, sp, #12
 800831c:	4813      	ldr	r0, [pc, #76]	; (800836c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800831e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008322:	f042 0220 	orr.w	r2, r2, #32
 8008326:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800832a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800832e:	f002 0220 	and.w	r2, r2, #32
 8008332:	9201      	str	r2, [sp, #4]
 8008334:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008336:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800833a:	f042 0204 	orr.w	r2, r2, #4
 800833e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800834e:	23c0      	movs	r3, #192	; 0xc0
 8008350:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008352:	2302      	movs	r3, #2
 8008354:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8008356:	2307      	movs	r3, #7
 8008358:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800835a:	f7f9 f829 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800835e:	b008      	add	sp, #32
 8008360:	bd10      	pop	{r4, pc}
 8008362:	bf00      	nop
 8008364:	40011400 	.word	0x40011400
 8008368:	58024400 	.word	0x58024400
 800836c:	58020800 	.word	0x58020800

08008370 <NMI_Handler>:
 8008370:	4770      	bx	lr

08008372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008372:	e7fe      	b.n	8008372 <HardFault_Handler>

08008374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008374:	e7fe      	b.n	8008374 <MemManage_Handler>

08008376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008376:	e7fe      	b.n	8008376 <BusFault_Handler>

08008378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008378:	e7fe      	b.n	8008378 <UsageFault_Handler>

0800837a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800837a:	4770      	bx	lr

0800837c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800837c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800837e:	f7f8 f973 	bl	8000668 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8008386:	f7fb bec8 	b.w	800411a <osSystickHandler>
	...

0800838c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <DMA1_Stream0_IRQHandler+0x8>)
 800838e:	f7f8 bb79 	b.w	8000a84 <HAL_DMA_IRQHandler>
 8008392:	bf00      	nop
 8008394:	200041bc 	.word	0x200041bc

08008398 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8008398:	4801      	ldr	r0, [pc, #4]	; (80083a0 <SPI3_IRQHandler+0x8>)
 800839a:	f7fb b8a7 	b.w	80034ec <HAL_SPI_IRQHandler>
 800839e:	bf00      	nop
 80083a0:	20004134 	.word	0x20004134

080083a4 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80083a4:	4801      	ldr	r0, [pc, #4]	; (80083ac <TIM7_IRQHandler+0x8>)
 80083a6:	f7fb b9ad 	b.w	8003704 <HAL_TIM_IRQHandler>
 80083aa:	bf00      	nop
 80083ac:	200042c0 	.word	0x200042c0

080083b0 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80083b0:	4914      	ldr	r1, [pc, #80]	; (8008404 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80083b2:	4815      	ldr	r0, [pc, #84]	; (8008408 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80083b4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80083b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80083bc:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80083be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <SystemInit+0x5c>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80083cc:	2200      	movs	r2, #0
 80083ce:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80083d0:	681c      	ldr	r4, [r3, #0]
 80083d2:	4020      	ands	r0, r4
 80083d4:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80083d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80083d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80083da:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80083de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80083e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80083e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80083ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80083f2:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80083f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80083f6:	2201      	movs	r2, #1
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <SystemInit+0x60>)
 80083fa:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80083fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008400:	608b      	str	r3, [r1, #8]
 8008402:	bd10      	pop	{r4, pc}
 8008404:	e000ed00 	.word	0xe000ed00
 8008408:	eaf6ed7f 	.word	0xeaf6ed7f
 800840c:	58024400 	.word	0x58024400
 8008410:	51008108 	.word	0x51008108

08008414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800844c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008418:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800841a:	e003      	b.n	8008424 <LoopCopyDataInit>

0800841c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800841e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008420:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008422:	3104      	adds	r1, #4

08008424 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008424:	480b      	ldr	r0, [pc, #44]	; (8008454 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008428:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800842a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800842c:	d3f6      	bcc.n	800841c <CopyDataInit>
  ldr  r2, =_sbss
 800842e:	4a0b      	ldr	r2, [pc, #44]	; (800845c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008430:	e002      	b.n	8008438 <LoopFillZerobss>

08008432 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008432:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008434:	f842 3b04 	str.w	r3, [r2], #4

08008438 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008438:	4b09      	ldr	r3, [pc, #36]	; (8008460 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800843a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800843c:	d3f9      	bcc.n	8008432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800843e:	f7ff ffb7 	bl	80083b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008442:	f000 f811 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008446:	f7ff fb97 	bl	8007b78 <main>
  bx  lr    
 800844a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800844c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008450:	08008640 	.word	0x08008640
  ldr  r0, =_sdata
 8008454:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008458:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800845c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8008460:	2000439c 	.word	0x2000439c

08008464 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008464:	e7fe      	b.n	8008464 <ADC3_IRQHandler>
	...

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4e0d      	ldr	r6, [pc, #52]	; (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	; (80084a4 <__libc_init_array+0x3c>)
 800846e:	1ba4      	subs	r4, r4, r6
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2500      	movs	r5, #0
 8008474:	42a5      	cmp	r5, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4e0b      	ldr	r6, [pc, #44]	; (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	; (80084ac <__libc_init_array+0x44>)
 800847c:	f000 f82c 	bl	80084d8 <_init>
 8008480:	1ba4      	subs	r4, r4, r6
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2500      	movs	r5, #0
 8008486:	42a5      	cmp	r5, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008490:	4798      	blx	r3
 8008492:	3501      	adds	r5, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800849a:	4798      	blx	r3
 800849c:	3501      	adds	r5, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	08008638 	.word	0x08008638
 80084a4:	08008638 	.word	0x08008638
 80084a8:	08008638 	.word	0x08008638
 80084ac:	0800863c 	.word	0x0800863c

080084b0 <memcpy>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	1e43      	subs	r3, r0, #1
 80084b4:	440a      	add	r2, r1
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d100      	bne.n	80084bc <memcpy+0xc>
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084c4:	e7f7      	b.n	80084b6 <memcpy+0x6>

080084c6 <memset>:
 80084c6:	4402      	add	r2, r0
 80084c8:	4603      	mov	r3, r0
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d100      	bne.n	80084d0 <memset+0xa>
 80084ce:	4770      	bx	lr
 80084d0:	f803 1b01 	strb.w	r1, [r3], #1
 80084d4:	e7f9      	b.n	80084ca <memset+0x4>
	...

080084d8 <_init>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr

080084e4 <_fini>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr
