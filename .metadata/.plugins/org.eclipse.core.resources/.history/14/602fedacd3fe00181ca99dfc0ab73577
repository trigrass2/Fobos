/*
 * BoardComTask_FreeRTOS.c
 *
 *  Created on: 12 дек. 2018 г.
 *      Author: zilkov
 */
/* USER CODE BEGIN Header_board_com_task */
/**
* @brief Function implementing the board_com thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_board_com_task */
#include "BoardComTask_FreeRTOS.h"

char can_tx_func(FDCAN_HandleTypeDef *hfdcan, unsigned int ID, uint32_t data_lenght, uint8_t *data)
{
	/* Prepare Tx Header */
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = ID;
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = (data_lenght<<16);//shifts 16 bits to the left
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	TxHeader.MessageMarker = 0;

	if(HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, data) == 0)
	  return 0xFF;

	else
	  return 0;
}

uint32_t check_adr_func(){
	uint32_t address_buf=0;
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))//1
		address_buf |= 1;
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))//2
			address_buf |= 2;
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14))//3
			address_buf |= 4;
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15))//4
			address_buf |= 8;
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))//5
			address_buf |= 16;
	/*if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))//6
			address_buf += 6;*/
	return address_buf;
}

void FDCAN_Config(uint32_t adr)
{

  /* Configure Rx filter */
	FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = adr;
  sFilterConfig.FilterID2 = 0x01F;
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, DISABLE, DISABLE);
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
  {
    /* Filter configuration Error */
    Error_Handler();
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
  {
    /* Start Error */
    Error_Handler();
  }
}

extern QueueHandle_t xQueue1;

void board_com_task(void const * argument)//communicates with CAN-bus
{
  /* USER CODE BEGIN board_com_task */
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t Rx_Can_Data[8];

	FDCAN_Config(check_adr_func());
	extern struct queue_t Queue1_t;
	uint8_t buf[8] = {1,2,3,4,5,6,7,8};
	can_tx_func(&hfdcan2, MASTER_ADR, sizeof(buf)/sizeof(buf)[0], buf);
  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg1);
	  if(can_protocol_data_analyzing(&hfdcan2, &RxHeader, Rx_Can_Data))
	  {
		  uint32_t address = RxHeader.Identifier;

		  if((address & 0x620) == 0x620)
		  {
			  //data0 & data1 are DigOUT & DigIN
			  DIG_OUT1(Rx_Can_Data[0] & (1<<0));
			  DIG_OUT2(Rx_Can_Data[0] & (1<<1));
			  DIG_OUT3(Rx_Can_Data[0] & (1<<2));
			  DIG_OUT4(Rx_Can_Data[0] & (1<<3));
		  }
		  else if((address & 0x6A0) == 0x6A0)
		  {
			  //data0 - quantity of bytes
			  if(Rx_Can_Data[0])
			  {
				  static struct uart_buf_t uart_tx_buffer;
				  /*if(count_chars < Rx_Can_Data[0]-1)
				  {
					  if(count_chars >= 8)
					  {
						  uart_buf[count_chars++] = Rx_Can_Data[count_chars%8];
					  }
					  else
					  {
						  uart_buf[count_chars++] = Rx_Can_Data[count_chars];
					  }
				  }
				  else
				  {
					  extern UART_HandleTypeDef huart6;
					  HAL_UART_Transmit(&huart6, uart_buf, count_chars, 100);
					  count_chars=0;
				  }*/

			  }
		  }
	  }
  }
  /* USER CODE END board_com_task */
}

